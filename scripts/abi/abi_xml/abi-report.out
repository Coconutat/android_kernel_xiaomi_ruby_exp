Leaf changes summary: 8 artifacts changed (1 filtered out)
Changed leaf types summary: 7 (1 filtered out) leaf types changed
Removed/Changed/Added functions summary: 0 Removed, 1 Changed, 0 Added function (1284 filtered out)
Removed/Changed/Added variables summary: 0 Removed, 0 Changed, 0 Added variable (106 filtered out)

1 function with some sub-type change:

  [C]'function void ion_device_add_heap(ion_heap*)' at ion.c:2006:1 has some sub-type changes:
    parameter 2 of type 'ion_heap*' was added

    parameter 1 of type 'ion_heap*' changed:
    pointer type changed from: 'ion_heap*' to: 'ion_device*'


'struct ufs_dev_info at ufs.h:605:1' changed:
  type size changed from 16 to 192 (in bits)
  5 data member insertions:
    'u8 ufs_dev_info::max_lu_supported', at offset 16 (in bits) at ufs.h:564:1
    'u16 ufs_dev_info::wmanufacturerid', at offset 32 (in bits) at ufs.h:565:1
    'u8* ufs_dev_info::model', at offset 64 (in bits) at ufs.h:567:1
    'u16 ufs_dev_info::wspecversion', at offset 128 (in bits) at ufs.h:568:1
    'u32 ufs_dev_info::clk_gating_wait_us', at offset 160 (in bits) at ufs.h:569:1

  18 impacted interfaces:
    function int ufshcd_alloc_host(device*, ufs_hba**)
    function int ufshcd_config_pwr_mode(ufs_hba*, ufs_pa_layer_attr*)
    function void ufshcd_dealloc_host(ufs_hba*)
    function int ufshcd_dme_get_attr(ufs_hba*, u32, u32*, u8)
    function int ufshcd_dme_set_attr(ufs_hba*, u32, u8, u32, u8)
    function int ufshcd_dump_regs(ufs_hba*, size_t, size_t, const char*)
    function u32 ufshcd_get_local_unipro_ver(ufs_hba*)
    function int ufshcd_hold(ufs_hba*, bool)
    function int ufshcd_init(ufs_hba*, void*, unsigned int)
    function int ufshcd_map_desc_id_to_length(ufs_hba*, desc_idn, int*)
    function void ufshcd_release(ufs_hba*)
    function void ufshcd_remove(ufs_hba*)
    function int ufshcd_runtime_idle(ufs_hba*)
    function int ufshcd_runtime_resume(ufs_hba*)
    function int ufshcd_runtime_suspend(ufs_hba*)
    function int ufshcd_shutdown(ufs_hba*)
    function int ufshcd_system_resume(ufs_hba*)
    function int ufshcd_system_suspend(ufs_hba*)


'struct ufs_hba at ufshcd.h:539:1' changed:
  type size changed from 14208 to 27456 (in bits)
  2 data member deletions:
    'bool ufs_hba::is_init_prefetch', at offset 3064 (in bits) at ufshcd.h:677:1

    'ufs_init_prefetch ufs_hba::init_prefetch_data', at offset 3072 (in bits) at ufshcd.h:678:1

  5 data member insertions:
    'ufs_ref_clk_freq ufs_hba::dev_ref_clk_freq', at offset 1984 (in bits) at ufshcd.h:602:1
    'u16 ufs_hba::hba_enable_delay_us', at offset 3120 (in bits) at ufshcd.h:697:1
    'bool ufs_hba::silence_err_logs', at offset 14784 (in bits) at ufshcd.h:710:1
    'device ufs_hba::bsg_dev', at offset 21184 (in bits) at ufshcd.h:780:1
    'request_queue* ufs_hba::bsg_queue', at offset 27392 (in bits) at ufshcd.h:781:1
  there are data member changes:
   'unsigned int ufs_hba::quirks' offset changed from 1984 to 2016 (in bits) (by +32 bits)
   'unsigned int ufs_hba::dev_quirks' offset changed from 2016 to 2048 (in bits) (by +32 bits)
   'wait_queue_head_t ufs_hba::tm_wq' offset changed from 2048 to 2112 (in bits) (by +64 bits)
   'wait_queue_head_t ufs_hba::tm_tag_wq' offset changed from 2240 to 2304 (in bits) (by +64 bits)
   'unsigned long int ufs_hba::tm_condition' offset changed from 2432 to 2496 (in bits) (by +64 bits)
   'unsigned long int ufs_hba::tm_slots_in_use' offset changed from 2496 to 2560 (in bits) (by +64 bits)
   'uic_command* ufs_hba::active_uic_cmd' offset changed from 2560 to 2624 (in bits) (by +64 bits)
   'mutex ufs_hba::uic_cmd_mutex' offset changed from 2624 to 2688 (in bits) (by +64 bits)
   'completion* ufs_hba::uic_async_done' offset changed from 2880 to 2944 (in bits) (by +64 bits)
   'u32 ufs_hba::ufshcd_state' offset changed from 2944 to 3008 (in bits) (by +64 bits)
   'u32 ufs_hba::eh_flags' offset changed from 2976 to 3040 (in bits) (by +64 bits)
   'u32 ufs_hba::intr_mask' offset changed from 3008 to 3072 (in bits) (by +64 bits)
   'u16 ufs_hba::ee_ctrl_mask' offset changed from 3040 to 3104 (in bits) (by +64 bits)
   'bool ufs_hba::is_powered' offset changed from 3056 to 3136 (in bits) (by +80 bits)
   'work_struct ufs_hba::eh_work' offset changed from 3136 to 3200 (in bits) (by +64 bits)
   'work_struct ufs_hba::eeh_work' offset changed from 3392 to 3456 (in bits) (by +64 bits)
   'u32 ufs_hba::errors' offset changed from 3648 to 3712 (in bits) (by +64 bits)
   'u32 ufs_hba::uic_error' offset changed from 3680 to 3744 (in bits) (by +64 bits)
   'u32 ufs_hba::saved_err' offset changed from 3712 to 3776 (in bits) (by +64 bits)
   'u32 ufs_hba::saved_uic_err' offset changed from 3744 to 3808 (in bits) (by +64 bits)
   type 'struct ufs_stats' of 'ufs_hba::ufs_stats' changed:
     type size changed from 4288 to 10944 (in bits)
     8 data member insertions:
       'ufs_err_reg_hist ufs_stats::auto_hibern8_err', at offset 4288 (in bits) at ufshcd.h:482:1
       'ufs_err_reg_hist ufs_stats::fatal_err', at offset 5120 (in bits) at ufshcd.h:483:1
       'ufs_err_reg_hist ufs_stats::link_startup_err', at offset 5952 (in bits) at ufshcd.h:484:1
       'ufs_err_reg_hist ufs_stats::resume_err', at offset 6784 (in bits) at ufshcd.h:485:1
       'ufs_err_reg_hist ufs_stats::suspend_err', at offset 7616 (in bits) at ufshcd.h:486:1
       'ufs_err_reg_hist ufs_stats::dev_reset', at offset 8448 (in bits) at ufshcd.h:489:1
       'ufs_err_reg_hist ufs_stats::host_reset', at offset 9280 (in bits) at ufshcd.h:490:1
       'ufs_err_reg_hist ufs_stats::task_abort', at offset 10112 (in bits) at ufshcd.h:491:1
     there are data member changes:
      type 'struct ufs_uic_err_reg_hist' of 'ufs_stats::pa_err' changed:

      type 'struct ufs_uic_err_reg_hist' of 'ufs_stats::dl_err' changed:
        type name changed from 'ufs_uic_err_reg_hist' to 'ufs_err_reg_hist'
        type size hasn't changed


      type 'struct ufs_uic_err_reg_hist' of 'ufs_stats::nl_err' changed as reported earlier

      type 'struct ufs_uic_err_reg_hist' of 'ufs_stats::tl_err' changed as reported earlier

      type 'struct ufs_uic_err_reg_hist' of 'ufs_stats::dme_err' changed as reported earlier


     18 impacted interfaces:
       function int ufshcd_alloc_host(device*, ufs_hba**)
       function int ufshcd_config_pwr_mode(ufs_hba*, ufs_pa_layer_attr*)
       function void ufshcd_dealloc_host(ufs_hba*)
       function int ufshcd_dme_get_attr(ufs_hba*, u32, u32*, u8)
       function int ufshcd_dme_set_attr(ufs_hba*, u32, u8, u32, u8)
       function int ufshcd_dump_regs(ufs_hba*, size_t, size_t, const char*)
       function u32 ufshcd_get_local_unipro_ver(ufs_hba*)
       function int ufshcd_hold(ufs_hba*, bool)
       function int ufshcd_init(ufs_hba*, void*, unsigned int)
       function int ufshcd_map_desc_id_to_length(ufs_hba*, desc_idn, int*)
       function void ufshcd_release(ufs_hba*)
       function void ufshcd_remove(ufs_hba*)
       function int ufshcd_runtime_idle(ufs_hba*)
       function int ufshcd_runtime_resume(ufs_hba*)
       function int ufshcd_runtime_suspend(ufs_hba*)
       function int ufshcd_shutdown(ufs_hba*)
       function int ufshcd_system_resume(ufs_hba*)
       function int ufshcd_system_suspend(ufs_hba*), offset changed from 3776 to 3840 (in bits) (by +64 bits), size changed from 4288 to 10944 (in bits) (by +6656 bits)
   'ufs_dev_cmd ufs_hba::dev_cmd' offset changed from 8064 to 14848 (in bits) (by +6784 bits)
   'ktime_t ufs_hba::last_dme_cmd_tstamp' offset changed from 9088 to 15872 (in bits) (by +6784 bits)
   type 'struct ufs_dev_info' of 'ufs_hba::dev_info' changed as reported earlier
   and offset changed from 9152 to 15936 (in bits) (by +6784 bits), size changed from 16 to 192 (in bits) (by +176 bits)
   'bool ufs_hba::auto_bkops_enabled' offset changed from 9168 to 16128 (in bits) (by +6960 bits)
   'ufs_vreg_info ufs_hba::vreg_info' offset changed from 9216 to 16192 (in bits) (by +6976 bits)
   'list_head ufs_hba::clk_list_head' offset changed from 9472 to 16448 (in bits) (by +6976 bits)
   'bool ufs_hba::wlun_dev_clr_ua' offset changed from 9600 to 16576 (in bits) (by +6976 bits)
   'int ufs_hba::req_abort_count' offset changed from 9632 to 16608 (in bits) (by +6976 bits)
   'u32 ufs_hba::lanes_per_direction' offset changed from 9664 to 16640 (in bits) (by +6976 bits)
   'ufs_pa_layer_attr ufs_hba::pwr_info' offset changed from 9696 to 16672 (in bits) (by +6976 bits)
   'ufs_pwr_mode_info ufs_hba::max_pwr_info' offset changed from 9920 to 16896 (in bits) (by +6976 bits)
   'ufs_clk_gating ufs_hba::clk_gating' offset changed from 10176 to 17152 (in bits) (by +6976 bits)
   'u32 ufs_hba::caps' offset changed from 11968 to 18944 (in bits) (by +6976 bits)
   'devfreq* ufs_hba::devfreq' offset changed from 12032 to 19008 (in bits) (by +6976 bits)
   'ufs_clk_scaling ufs_hba::clk_scaling' offset changed from 12096 to 19072 (in bits) (by +6976 bits)
   'bool ufs_hba::is_sys_suspended' offset changed from 13504 to 20480 (in bits) (by +6976 bits)
   'bkops_status ufs_hba::urgent_bkops_lvl' offset changed from 13536 to 20512 (in bits) (by +6976 bits)
   'bool ufs_hba::is_urgent_bkops_lvl_checked' offset changed from 13568 to 20544 (in bits) (by +6976 bits)
   'rw_semaphore ufs_hba::clk_scaling_lock' offset changed from 13632 to 20608 (in bits) (by +6976 bits)
   'ufs_desc_size ufs_hba::desc_size' offset changed from 13952 to 20928 (in bits) (by +6976 bits)
   'atomic_t ufs_hba::scsi_block_reqs_cnt' offset changed from 14176 to 21152 (in bits) (by +6976 bits)

  18 impacted interfaces:
    function int ufshcd_alloc_host(device*, ufs_hba**)
    function int ufshcd_config_pwr_mode(ufs_hba*, ufs_pa_layer_attr*)
    function void ufshcd_dealloc_host(ufs_hba*)
    function int ufshcd_dme_get_attr(ufs_hba*, u32, u32*, u8)
    function int ufshcd_dme_set_attr(ufs_hba*, u32, u8, u32, u8)
    function int ufshcd_dump_regs(ufs_hba*, size_t, size_t, const char*)
    function u32 ufshcd_get_local_unipro_ver(ufs_hba*)
    function int ufshcd_hold(ufs_hba*, bool)
    function int ufshcd_init(ufs_hba*, void*, unsigned int)
    function int ufshcd_map_desc_id_to_length(ufs_hba*, desc_idn, int*)
    function void ufshcd_release(ufs_hba*)
    function void ufshcd_remove(ufs_hba*)
    function int ufshcd_runtime_idle(ufs_hba*)
    function int ufshcd_runtime_resume(ufs_hba*)
    function int ufshcd_runtime_suspend(ufs_hba*)
    function int ufshcd_shutdown(ufs_hba*)
    function int ufshcd_system_resume(ufs_hba*)
    function int ufshcd_system_suspend(ufs_hba*)


'struct ufs_stats at ufshcd.h:470:1' changed:
  details were reported earlier



'struct ufs_vreg at ufs.h:587:1' changed:
  type size changed from 320 to 256 (in bits)
  2 data member deletions:
    'bool ufs_vreg::unused', at offset 136 (in bits) at ufs.h:591:1

    'int ufs_vreg::min_uA', at offset 224 (in bits) at ufs.h:594:1

  there are data member changes:
   'int ufs_vreg::max_uA' offset changed from 256 to 224 (in bits) (by -32 bits)

  18 impacted interfaces:
    function int ufshcd_alloc_host(device*, ufs_hba**)
    function int ufshcd_config_pwr_mode(ufs_hba*, ufs_pa_layer_attr*)
    function void ufshcd_dealloc_host(ufs_hba*)
    function int ufshcd_dme_get_attr(ufs_hba*, u32, u32*, u8)
    function int ufshcd_dme_set_attr(ufs_hba*, u32, u8, u32, u8)
    function int ufshcd_dump_regs(ufs_hba*, size_t, size_t, const char*)
    function u32 ufshcd_get_local_unipro_ver(ufs_hba*)
    function int ufshcd_hold(ufs_hba*, bool)
    function int ufshcd_init(ufs_hba*, void*, unsigned int)
    function int ufshcd_map_desc_id_to_length(ufs_hba*, desc_idn, int*)
    function void ufshcd_release(ufs_hba*)
    function void ufshcd_remove(ufs_hba*)
    function int ufshcd_runtime_idle(ufs_hba*)
    function int ufshcd_runtime_resume(ufs_hba*)
    function int ufshcd_runtime_suspend(ufs_hba*)
    function int ufshcd_shutdown(ufs_hba*)
    function int ufshcd_system_resume(ufs_hba*)
    function int ufshcd_system_suspend(ufs_hba*)


'struct ufshcd_lrb at ufshcd.h:175:1' changed:
  type size changed from 1024 to 1152 (in bits)
  3 data member insertions:
    'bool ufshcd_lrb::crypto_enable', at offset 960 (in bits) at ufshcd.h:198:1
    'u8 ufshcd_lrb::crypto_key_slot', at offset 968 (in bits) at ufshcd.h:199:1
    'u64 ufshcd_lrb::data_unit_num', at offset 1024 (in bits) at ufshcd.h:200:1
  there are data member changes:
   'bool ufshcd_lrb::req_abort_skip' offset changed from 960 to 1088 (in bits) (by +128 bits)

  18 impacted interfaces:
    function int ufshcd_alloc_host(device*, ufs_hba**)
    function int ufshcd_config_pwr_mode(ufs_hba*, ufs_pa_layer_attr*)
    function void ufshcd_dealloc_host(ufs_hba*)
    function int ufshcd_dme_get_attr(ufs_hba*, u32, u32*, u8)
    function int ufshcd_dme_set_attr(ufs_hba*, u32, u8, u32, u8)
    function int ufshcd_dump_regs(ufs_hba*, size_t, size_t, const char*)
    function u32 ufshcd_get_local_unipro_ver(ufs_hba*)
    function int ufshcd_hold(ufs_hba*, bool)
    function int ufshcd_init(ufs_hba*, void*, unsigned int)
    function int ufshcd_map_desc_id_to_length(ufs_hba*, desc_idn, int*)
    function void ufshcd_release(ufs_hba*)
    function void ufshcd_remove(ufs_hba*)
    function int ufshcd_runtime_idle(ufs_hba*)
    function int ufshcd_runtime_resume(ufs_hba*)
    function int ufshcd_runtime_suspend(ufs_hba*)
    function int ufshcd_shutdown(ufs_hba*)
    function int ufshcd_system_resume(ufs_hba*)
    function int ufshcd_system_suspend(ufs_hba*)


'struct utp_task_req_desc at ufshci.h:505:1' changed:
  type size hasn't changed
  7 data member insertions:
    '__be32 utp_task_req_desc::input_param1', at offset 224 (in bits) at ufshci.h:510:1
    '__be32 utp_task_req_desc::input_param2', at offset 256 (in bits) at ufshci.h:511:1
    '__be32 utp_task_req_desc::input_param3', at offset 288 (in bits) at ufshci.h:512:1
    '__be32 utp_task_req_desc::__reserved1[2]', at offset 320 (in bits) at ufshci.h:513:1
    '__be32 utp_task_req_desc::output_param1', at offset 480 (in bits) at ufshci.h:517:1
    '__be32 utp_task_req_desc::output_param2', at offset 512 (in bits) at ufshci.h:518:1
    '__be32 utp_task_req_desc::__reserved2[3]', at offset 544 (in bits) at ufshci.h:519:1
  there are data member changes:
   type '__le32[8]' of 'utp_task_req_desc::task_req_upiu' changed:
     entity changed from '__le32[8]' to 'struct utp_upiu_header' at scsi_bsg_ufs.h:27:1
     type size changed from 256 to 96 (in bits)
   name of 'utp_task_req_desc::task_req_upiu' changed to 'utp_task_req_desc::req_header' at ufshci.h:509:1, size changed from 256 to 96 (in bits) (by -160 bits)
   type '__le32[8]' of 'utp_task_req_desc::task_rsp_upiu' changed:
     entity changed from '__le32[8]' to 'struct utp_upiu_header' at scsi_bsg_ufs.h:27:1
     type size changed from 256 to 96 (in bits)
   name of 'utp_task_req_desc::task_rsp_upiu' changed to 'utp_task_req_desc::rsp_header' at ufshci.h:516:1, size changed from 256 to 96 (in bits) (by -160 bits)

  18 impacted interfaces:
    function int ufshcd_alloc_host(device*, ufs_hba**)
    function int ufshcd_config_pwr_mode(ufs_hba*, ufs_pa_layer_attr*)
    function void ufshcd_dealloc_host(ufs_hba*)
    function int ufshcd_dme_get_attr(ufs_hba*, u32, u32*, u8)
    function int ufshcd_dme_set_attr(ufs_hba*, u32, u8, u32, u8)
    function int ufshcd_dump_regs(ufs_hba*, size_t, size_t, const char*)
    function u32 ufshcd_get_local_unipro_ver(ufs_hba*)
    function int ufshcd_hold(ufs_hba*, bool)
    function int ufshcd_init(ufs_hba*, void*, unsigned int)
    function int ufshcd_map_desc_id_to_length(ufs_hba*, desc_idn, int*)
    function void ufshcd_release(ufs_hba*)
    function void ufshcd_remove(ufs_hba*)
    function int ufshcd_runtime_idle(ufs_hba*)
    function int ufshcd_runtime_resume(ufs_hba*)
    function int ufshcd_runtime_suspend(ufs_hba*)
    function int ufshcd_shutdown(ufs_hba*)
    function int ufshcd_system_resume(ufs_hba*)
    function int ufshcd_system_suspend(ufs_hba*)


'struct vm_fault at mm.h:354:1' changed:
  type size changed from 832 to 960 (in bits)
  2 data member insertions:
    'unsigned long int vm_fault::vma_flags', at offset 832 (in bits) at mm.h:401:1
    'pgprot_t vm_fault::vma_page_prot', at offset 896 (in bits) at mm.h:402:1

  6489 impacted interfaces:
    bus_type ac97_bus_type
    bus_type amba_bustype
    Qdisc_ops bfifo_qdisc_ops
    blkcg blkcg_root
    bpf_redirect_info bpf_redirect_info
    dentry* bt_debugfs
    cgroup_root cgrp_dfl_root
    console* console_drivers
    bus_type cpu_subsys
    freq_attr cpufreq_freq_attr_scaling_available_freqs
    freq_attr cpufreq_freq_attr_scaling_boost_freqs
    freq_attr* cpufreq_generic_attr[2]
    crypto_rng* crypto_default_rng
    const Qdisc_ops* default_qdisc_ops
    const dma_map_ops dma_direct_ops
    const dquot_operations dquot_operations
    const quotactl_ops dquot_quotactl_sysfile_ops
    const vm_operations_struct drm_gem_cma_vm_ops
    const drm_plane_funcs drm_primary_helper_funcs
    const dma_map_ops dummy_dma_ops
    class* fb_class
    bio_set fs_bio_set
    const file_operations fuse_dev_operations
    const file_operations generic_ro_fops
    bus_type hid_bus_type
    device_type i2c_adapter_type
    const i2c_algorithm i2c_bit_algo
    bus_type i2c_bus_type
    device_type i2c_client_type
    bus_type iio_bus_type
    const proto_ops inet_dgram_ops
    const proto_ops inet_stream_ops
    class input_class
    cgroup_subsys io_cgrp_subsys
    const inet_connection_sock_af_ops ipv4_specific
    const ipv6_bpf_stub* ipv6_bpf_stub
    const ipv6_stub* ipv6_stub
    const irq_domain_ops irq_domain_simple_ops
    const fwnode_operations irqchip_fwnode_ops
    bus_type mdio_bus_type
    cgroup_subsys memory_cgrp_subsys
    const nf_conntrack_l4proto nf_conntrack_l4proto_dccp4
    const nf_conntrack_l4proto nf_conntrack_l4proto_dccp6
    const nf_conntrack_l4proto nf_conntrack_l4proto_sctp4
    const nf_conntrack_l4proto nf_conntrack_l4proto_sctp6
    const nf_conntrack_l4proto nf_conntrack_l4proto_tcp4
    const nf_conntrack_l4proto nf_conntrack_l4proto_tcp6
    const nf_conntrack_l4proto nf_conntrack_l4proto_udp4
    const nf_conntrack_l4proto nf_conntrack_l4proto_udp6
    const nf_conntrack_l4proto nf_conntrack_l4proto_udplite4
    const nf_conntrack_l4proto nf_conntrack_l4proto_udplite6
    const nf_ipv6_ops* nf_ipv6_ops
    backing_dev_info noop_backing_dev_info
    Qdisc noop_qdisc
    const fwnode_operations of_fwnode_ops
    device_node* of_root
    const inode_operations page_symlink_inode_operations
    const kernel_param_ops param_array_ops
    const kernel_param_ops param_ops_bint
    const kernel_param_ops param_ops_bool
    const kernel_param_ops param_ops_bool_enable_only
    const kernel_param_ops param_ops_byte
    const kernel_param_ops param_ops_charp
    const kernel_param_ops param_ops_int
    const kernel_param_ops param_ops_invbool
    const kernel_param_ops param_ops_long
    const kernel_param_ops param_ops_short
    const kernel_param_ops param_ops_string
    const kernel_param_ops param_ops_uint
    const kernel_param_ops param_ops_ullong
    const kernel_param_ops param_ops_ulong
    const kernel_param_ops param_ops_ushort
    bus_type pci_bus_type
    Qdisc_ops pfifo_fast_ops
    Qdisc_ops pfifo_qdisc_ops
    device platform_bus
    bus_type platform_bus_type
    class* power_supply_class
    asymmetric_key_subtype public_key_subtype
    fb_info* registered_fb[32]
    bus_type scsi_bus_type
    bus_type serio_bus
    const dentry_operations simple_dentry_operations
    const inode_operations simple_dir_inode_operations
    const file_operations simple_dir_operations
    const inode_operations simple_symlink_inode_operations
    dentry* snd_soc_debugfs_root
    const dev_pm_ops snd_soc_pm_ops
    class* sound_class
    bus_type spi_bus_type
    const dma_map_ops swiotlb_dma_ops
    const ttm_mem_type_manager_func ttm_bo_manager_func
    dentry* usb_debug_root
    const dev_pm_ops usb_hcd_pci_pm_ops
    function block_device* I_BDEV(inode*)
    function void* PDE_DATA(const inode*)
    function gendisk* __alloc_disk_node(int, int)
    function void __audit_inode_child(inode*, const dentry*, const unsigned char)
    function void __bforget(buffer_head*)
    function void __bio_add_page(bio*, page*, unsigned int, unsigned int)
    function void __bio_clone_fast(bio*, bio*)
    function bool __bio_try_merge_page(bio*, page*, unsigned int, unsigned int)
    function void __blk_complete_request(request*)
    function bool __blk_end_request(request*, blk_status_t, unsigned int)
    function void __blk_end_request_all(request*, blk_status_t)
    function bool __blk_end_request_cur(request*, blk_status_t)
    function int __blk_mq_debugfs_rq_show(seq_file*, request*)
    function void __blk_mq_end_request(request*, blk_status_t)
    function void __blk_put_request(request_queue*, request*)
    function void __blk_run_queue(request_queue*)
    function void __blk_run_queue_uncond(request_queue*)
    function int __blkdev_driver_ioctl(block_device*, fmode_t, unsigned int, unsigned long int)
    function int __blkdev_issue_discard(block_device*, sector_t, sector_t, gfp_t, int, bio**)
    function int __blkdev_issue_zeroout(block_device*, sector_t, sector_t, gfp_t, bio**, unsigned int)
    function int __blkdev_reread_part(block_device*)
    function u64 __blkg_prfill_rwstat(seq_file*, blkg_policy_data*, const blkg_rwstat*)
    function u64 __blkg_prfill_u64(seq_file*, blkg_policy_data*, u64)
    function int __block_write_begin(page*, loff_t, unsigned int, get_block_t*)
    function int __block_write_full_page(inode*, page*, get_block_t*, writeback_control*, bh_end_io_t*)
    function ssize_t __blockdev_direct_IO(kiocb*, inode*, block_device*, iov_iter*, get_block_t*, dio_iodone_t*, dio_submit_t*, int)
    function buffer_head* __bread_gfp(block_device*, sector_t, unsigned int, gfp_t)
    function void __breadahead(block_device*, sector_t, unsigned int)
    function int __break_lease(inode*, unsigned int, unsigned int)
    function void __brelse(buffer_head*)
    function sk_buff* __cfg80211_alloc_event_skb(wiphy*, wireless_dev*, nl80211_commands, nl80211_attrs, int, int, gfp_t)
    function sk_buff* __cfg80211_alloc_reply_skb(wiphy*, nl80211_commands, nl80211_attrs, int)
    function int __cgroup_bpf_run_filter_sk(sock*, bpf_attach_type)
    function int __cgroup_bpf_run_filter_skb(sock*, sk_buff*, bpf_attach_type)
    function int __cgroup_bpf_run_filter_sock_addr(sock*, sockaddr*, bpf_attach_type, void*)
    function int __cgroup_bpf_run_filter_sock_ops(sock*, bpf_sock_ops_kern*, bpf_attach_type)
    function int __check_sticky(inode*, inode*)
    function class* __class_create(module*, const char*, lock_class_key*)
    function int __class_register(class*, lock_class_key*)
    function int __clocksource_register_scale(clocksource*, u32, u32)
    function void __clocksource_update_freq_scale(clocksource*, u32, u32)
    function int __close_fd(files_struct*, unsigned int)
    function int __compat_only_sysfs_link_entry_to_kobj(kobject*, kobject*, const char*)
    function int __cpufreq_driver_target(cpufreq_policy*, unsigned int, unsigned int)
    function crypto_tfm* __crypto_alloc_tfm(crypto_alg*, u32, u32)
    function void __d_drop(dentry*)
    function void __d_lookup_done(dentry*)
    function void __destroy_inode(inode*)
    function int __dev_forward_skb(net_device*, sk_buff*)
    function net_device* __dev_get_by_flags(net*, unsigned short int, unsigned short int)
    function net_device* __dev_get_by_index(net*, int)
    function net_device* __dev_get_by_name(net*, const char*)
    function net_device* __dev_getfirstbyhwtype(net*, unsigned short int)
    function void __dev_remove_pack(packet_type*)
    function int __dev_set_mtu(net_device*, int)
    function int __device_reset(device*, bool)
    function void* __devm_alloc_percpu(device*, size_t, size_t)
    function int __devm_iio_device_register(device*, iio_dev*, module*)
    function int __devm_irq_alloc_descs(device*, int, unsigned int, unsigned int, int, module*, const cpumask*)
    function phy_provider* __devm_of_phy_provider_register(device*, device_node*, module*, void ()*)
    function regmap* __devm_regmap_init(device*, const regmap_bus*, void*, const regmap_config*, lock_class_key*, const char*)
    function regmap* __devm_regmap_init_i2c(i2c_client*, const regmap_config*, lock_class_key*, const char*)
    function regmap* __devm_regmap_init_mmio_clk(device*, const char*, void*, const regmap_config*, lock_class_key*, const char*)
    function regmap* __devm_regmap_init_spi(spi_device*, const regmap_config*, lock_class_key*, const char*)
    function void __devm_release_region(device*, resource*, resource_size_t, resource_size_t)
    function resource* __devm_request_region(device*, resource*, resource_size_t, resource_size_t, const char*)
    function reset_control* __devm_reset_control_get(device*, const char*, int, bool, bool)
    function void* __devres_alloc_node(dr_release_t, size_t, gfp_t, int, const char*)
    function dma_chan* __dma_request_channel(const dma_cap_mask_t*, dma_filter_fn, void*)
    function int __dquot_alloc_space(inode*, qsize_t, int)
    function void __dquot_free_space(inode*, qsize_t, int)
    function int __dquot_transfer(inode*, dquot**)
    function void __drm_atomic_helper_connector_destroy_state(drm_connector_state*)
    function void __drm_atomic_helper_connector_duplicate_state(drm_connector*, drm_connector_state*)
    function void __drm_atomic_helper_connector_reset(drm_connector*, drm_connector_state*)
    function void __drm_atomic_helper_crtc_destroy_state(drm_crtc_state*)
    function void __drm_atomic_helper_crtc_duplicate_state(drm_crtc*, drm_crtc_state*)
    function void __drm_atomic_helper_plane_destroy_state(drm_plane_state*)
    function void __drm_atomic_helper_plane_duplicate_state(drm_plane*, drm_plane_state*)
    function void __drm_atomic_helper_private_obj_duplicate_state(drm_private_obj*, drm_private_state*)
    function void __dst_destroy_metrics_generic(dst_entry*, unsigned long int)
    function int __efivar_entry_delete(efivar_entry*)
    function int __efivar_entry_get(efivar_entry*, u32*, unsigned long int*, void*)
    function int __efivar_entry_iter(void ()*, list_head*, void*, efivar_entry**)
    function void __elv_add_request(request_queue*, request*, int)
    function int __ethtool_get_link_ksettings(net_device*, ethtool_link_ksettings*)
    function void __f_setown(file*, pid*, pid_type, int)
    function void __fat_fs_error(super_block*, int, const char*, ...)
    function int __fib_lookup(net*, flowi4*, fib_result*, unsigned int)
    function buffer_head* __find_get_block(block_device*, sector_t, unsigned int)
    function int __fscrypt_encrypt_symlink(inode*, const char*, unsigned int, fscrypt_str*)
    function int __fscrypt_prepare_link(inode*, inode*, dentry*)
    function int __fscrypt_prepare_lookup(inode*, dentry*, fscrypt_name*)
    function int __fscrypt_prepare_rename(inode*, dentry*, inode*, dentry*, unsigned int)
    function int __fscrypt_prepare_symlink(inode*, unsigned int, unsigned int, fscrypt_str*)
    function void __fsnotify_inode_delete(inode*)
    function int __fsnotify_parent(const path*, dentry*, __u32)
    function int __generic_block_fiemap(inode*, fiemap_extent_info*, loff_t, loff_t, get_block_t*)
    function int __generic_file_fsync(file*, loff_t, loff_t, int)
    function buffer_head* __getblk_gfp(block_device*, sector_t, unsigned int, gfp_t)
    function int __hci_cmd_send(hci_dev*, u16, u32, void*)
    function sk_buff* __hci_cmd_sync(hci_dev*, u16, u32, void*, u32)
    function sk_buff* __hci_cmd_sync_ev(hci_dev*, u16, u32, void*, u8, u32)
    function int __hid_register_driver(hid_driver*, module*, const char*)
    function void __hid_request(hid_device*, hid_report*, int)
    function void __hvc_resize(hvc_struct*, winsize)
    function int __hw_addr_sync_dev(netdev_hw_addr_list*, net_device*, void ()*, void ()*)
    function void __hw_addr_unsync_dev(netdev_hw_addr_list*, net_device*, void ()*)
    function s32 __i2c_smbus_xfer(i2c_adapter*, u16, unsigned short int, char, u8, int, i2c_smbus_data*)
    function int __i2c_transfer(i2c_adapter*, i2c_msg*, int)
    function int __iio_device_register(iio_dev*, module*)
    function sock* __inet6_lookup_established(net*, inet_hashinfo*, const in6_addr*, const __be16, const in6_addr*, const u16, const int, const int)
    function int __inet_hash(sock*, sock*)
    function int __inet_inherit_port(const sock*, sock*)
    function sock* __inet_lookup_established(net*, inet_hashinfo*, const __be32, const __be16, const __be32, const u16, const int, const int)
    function sock* __inet_lookup_listener(net*, inet_hashinfo*, sk_buff*, int, const __be32, __be16, const __be32, const unsigned short int, const int, const int)
    function int __inet_stream_connect(socket*, sockaddr*, int, int, int)
    function void __inet_twsk_schedule(inet_timewait_sock*, int, bool)
    function void __inode_add_bytes(inode*, loff_t)
    function void __inode_sub_bytes(inode*, loff_t)
    function void __insert_inode_hash(inode*, unsigned long int)
    function int __invalidate_device(block_device*, bool)
    function int __ip4_datagram_connect(sock*, sockaddr*, int)
    function int __ip6_datagram_connect(sock*, sockaddr*, int)
    function int __ip6_local_out(net*, sock*, sk_buff*)
    function net_device* __ip_dev_find(net*, __be32, bool)
    function int __ip_queue_xmit(sock*, sk_buff*, flowi*, __u8)
    function int __ip_tunnel_change_mtu(net_device*, int, bool)
    function irq_domain* __irq_domain_add(fwnode_handle*, int, irq_hw_number_t, int, const irq_domain_ops*, void*)
    function fwnode_handle* __irq_domain_alloc_fwnode(unsigned int, int, const char*, void*)
    function void __irq_set_handler(unsigned int, irq_flow_handler_t, int, const char*)
    function ssize_t __kernel_write(file*, void*, size_t, loff_t*)
    function void __l2tp_session_unhash(l2tp_session*)
    function void __lock_buffer(buffer_head*)
    function void __mark_inode_dirty(inode*, int)
    function int __mdiobus_read(mii_bus*, int, u32)
    function int __mdiobus_register(mii_bus*, module*)
    function int __mdiobus_write(mii_bus*, int, u32, u16)
    function int __mmc_claim_host(mmc_host*, mmc_ctx*, atomic_t*)
    function int __mmc_send_status(mmc_card*, u32*, unsigned int)
    function int __mnt_is_readonly(vfsmount*)
    function module* __module_address(unsigned long int)
    function void __module_get(module*)
    function void __module_put_and_exit(module*, long int)
    function module* __module_text_address(unsigned long int)
    function sk_buff* __napi_alloc_skb(napi_struct*, unsigned int, gfp_t)
    function void __napi_schedule(napi_struct*)
    function void __napi_schedule_irqoff(napi_struct*)
    function neighbour* __neigh_create(neigh_table*, void*, net_device*, bool)
    function sk_buff* __netdev_alloc_skb(net_device*, unsigned int, gfp_t)
    function void __netif_schedule(Qdisc*)
    function int __netif_set_xps_queue(net_device*, const unsigned long int*, u16, bool)
    function int __netlink_dump_start(sock*, sk_buff*, const nlmsghdr*, netlink_dump_control*)
    function sock* __netlink_kernel_create(net*, int, module*, netlink_kernel_cfg*)
    function bool __netlink_ns_capable(const netlink_skb_parms*, user_namespace*, int)
    function nf_conntrack_helper* __nf_conntrack_helper_find(const char*, u16, u8)
    function nf_conntrack_expect* __nf_ct_expect_find(net*, const nf_conntrack_zone*, const nf_conntrack_tuple*)
    function const nf_conntrack_l4proto* __nf_ct_l4proto_find(u_int16_t, u_int8_t)
    function phy_provider* __of_phy_provider_register(device*, device_node*, module*, void ()*)
    function reset_control* __of_reset_control_get(device_node*, const char*, int, bool, bool)
    function int __page_symlink(inode*, const char*, int, int)
    function int __pci_complete_power_transition(pci_dev*, pci_power_t)
    function int __pci_register_driver(pci_driver*, module*, const char*)
    function int __pci_reset_function_locked(pci_dev*)
    function int __phy_modify(phy_device*, u32, u16, u16)
    function int __phy_resume(phy_device*)
    function platform_device* __platform_create_bundle(platform_driver*, void ()*, resource*, unsigned int, void*, size_t, module*)
    function int __platform_driver_probe(platform_driver*, void ()*, module*)
    function int __platform_driver_register(platform_driver*, module*)
    function int __platform_register_drivers(platform_driver* const*, unsigned int, module*)
    function void __pm_relax(wakeup_source*)
    function void __pm_runtime_disable(device*, bool)
    function int __pm_runtime_idle(device*, int)
    function int __pm_runtime_resume(device*, int)
    function int __pm_runtime_set_status(device*, unsigned int)
    function int __pm_runtime_suspend(device*, int)
    function void __pm_runtime_use_autosuspend(device*, bool)
    function void __pm_stay_awake(wakeup_source*)
    function pneigh_entry* __pneigh_lookup(neigh_table*, net*, void*, net_device*)
    function int __ps2_command(ps2dev*, u8*, unsigned int)
    function void __quota_error(super_block*, const char*, const char*, ...)
    function sock* __raw_v4_lookup(net*, sock*, unsigned short int, __be32, __be32, int, int)
    function sock* __raw_v6_lookup(net*, sock*, unsigned short int, const in6_addr*, const in6_addr*, int, int)
    function void __register_binfmt(linux_binfmt*, int)
    function int __register_chrdev(unsigned int, unsigned int, unsigned int, const char*, const file_operations*)
    function int __register_nls(nls_table*, module*)
    function regmap* __regmap_init(device*, const regmap_bus*, void*, const regmap_config*, lock_class_key*, const char*)
    function regmap* __regmap_init_i2c(i2c_client*, const regmap_config*, lock_class_key*, const char*)
    function regmap* __regmap_init_mmio_clk(device*, const char*, void*, const regmap_config*, lock_class_key*, const char*)
    function regmap* __regmap_init_spi(spi_device*, const regmap_config*, lock_class_key*, const char*)
    function void __remove_inode_hash(inode*)
    function reset_control* __reset_control_get(device*, const char*, int, bool, bool)
    function device* __root_device_register(const char*, module*)
    function int __rtc_register_device(module*, rtc_device*)
    function int __rtnl_link_register(rtnl_link_ops*)
    function void __rtnl_link_unregister(rtnl_link_ops*)
    function void __sb_end_write(super_block*, int)
    function int __sb_start_write(super_block*, int, bool)
    function void __scm_destroy(scm_cookie*)
    function int __scm_send(socket*, msghdr*, scm_cookie*)
    function scsi_device* __scsi_add_device(Scsi_Host*, uint, uint, u64, void*)
    function scsi_device* __scsi_device_lookup(Scsi_Host*, uint, uint, u64)
    function scsi_device* __scsi_device_lookup_by_target(scsi_target*, u64)
    function int __scsi_execute(scsi_device*, const unsigned char*, int, void*, unsigned int, unsigned char*, scsi_sense_hdr*, int, int, u64, req_flags_t, int*)
    function void __scsi_init_queue(Scsi_Host*, request_queue*)
    function scsi_device* __scsi_iterate_devices(Scsi_Host*, scsi_device*)
    function void __scsi_print_sense(const scsi_device*, const char*, const unsigned char*, int)
    function void* __seq_open_private(file*, const seq_operations*, int)
    function int __serdev_device_driver_register(serdev_device_driver*, module*)
    function int __serio_register_driver(serio_driver*, module*, const char*)
    function void __serio_register_port(serio*, module*)
    function int __sk_backlog_rcv(sock*, sk_buff*)
    function dst_entry* __sk_dst_check(sock*, u32)
    function int __sk_mem_raise_allocated(sock*, int, int, int)
    function void __sk_mem_reclaim(sock*, int)
    function void __sk_mem_reduce_allocated(sock*, int)
    function int __sk_mem_schedule(sock*, int, int)
    function int __sk_queue_drop_skb(sock*, sk_buff_head*, sk_buff*, unsigned int, void ()*)
    function int __sk_receive_skb(sock*, sk_buff*, const int, unsigned int, bool)
    function void __skb_free_datagram_locked(sock*, sk_buff*, int)
    function sk_buff* __skb_recv_datagram(sock*, unsigned int, void ()*, int*, int*, int*)
    function sk_buff* __skb_recv_udp(sock*, unsigned int, int, int*, int*, int*)
    function sk_buff* __skb_try_recv_datagram(sock*, unsigned int, void ()*, int*, int*, int*, sk_buff**)
    function void __skb_tstamp_tx(sk_buff*, skb_shared_hwtstamps*, sock*, int)
    function int __skb_wait_for_more_packets(sock*, int*, long int*, const sk_buff*)
    function snd_pcm_sframes_t __snd_pcm_lib_xfer(snd_pcm_substream*, void*, bool, snd_pcm_uframes_t, bool)
    function int __snd_rawmidi_transmit_ack(snd_rawmidi_substream*, int)
    function int __snd_rawmidi_transmit_peek(snd_rawmidi_substream*, unsigned char*, int)
    function int __snd_usbmidi_create(snd_card*, usb_interface*, list_head*, const snd_usb_audio_quirk*, unsigned int)
    function int __sock_cmsg_send(sock*, msghdr*, cmsghdr*, sockcm_cookie*)
    function int __sock_create(net*, int, int, int, socket**, int)
    function int __sock_queue_rcv_skb(sock*, sk_buff*)
    function void __sock_recv_timestamp(msghdr*, sock*, sk_buff*)
    function void __sock_recv_ts_and_drops(msghdr*, sock*, sk_buff*)
    function void __sock_recv_wifi_status(msghdr*, sock*, sk_buff*)
    function spi_controller* __spi_alloc_controller(device*, unsigned int, bool)
    function int __spi_register_driver(module*, spi_driver*)
    function ssize_t __splice_from_pipe(pipe_inode_info*, splice_desc*, splice_actor*)
    function int __spmi_driver_register(spmi_driver*, module*)
    function void __starget_for_each_device(scsi_target*, void*, void ()*)
    function int __sync_dirty_buffer(buffer_head*, int)
    function pid_t __task_pid_nr_ns(task_struct*, pid_type, pid_namespace*)
    function tcf_block_cb* __tcf_block_cb_register(tcf_block*, tc_setup_cb_t*, void*, void*, netlink_ext_ack*)
    function void __tcf_block_cb_unregister(tcf_block*, tcf_block_cb*)
    function int __tcf_idr_release(tc_action*, bool, bool)
    function void __tcp_send_ack(sock*, u32)
    function tty_driver* __tty_alloc_driver(unsigned int, module*, unsigned long int)
    function int __tty_insert_flip_char(tty_port*, unsigned char, char)
    function sock* __udp4_lib_lookup(net*, __be32, __be16, __be32, __be16, int, int, udp_table*, sk_buff*)
    function sock* __udp6_lib_lookup(net*, const in6_addr*, __be16, const in6_addr*, __be16, int, int, udp_table*, sk_buff*)
    function int __udp_disconnect(sock*, int)
    function int __udp_enqueue_schedule_skb(sock*, sk_buff*)
    function int __uio_register_device(module*, device*, uio_info*)
    function usb_hcd* __usb_create_hcd(const hc_driver*, device*, device*, const char*, usb_hcd*)
    function ssize_t __vfs_getxattr(dentry*, inode*, const char*, void*, size_t)
    function int __vfs_removexattr(dentry*, const char*)
    function int __vfs_setxattr(dentry*, inode*, const char*, void*, size_t, int)
    function virtqueue* __vring_new_virtqueue(unsigned int, vring, virtio_device*, bool, bool, void ()*, void ()*, const char*)
    function int __vsock_core_init(const vsock_transport*, module*)
    function sock* __vsock_create(net*, socket*, sock*, gfp_t, unsigned short int, int)
    function void __wait_on_buffer(buffer_head*)
    function dst_entry* __xfrm_dst_lookup(net*, int, int, const xfrm_address_t*, const xfrm_address_t*, int, u32)
    function int __xfrm_init_state(xfrm_state*, bool, bool)
    function int __xfrm_policy_check(sock*, int, sk_buff*, unsigned short int)
    function int __xfrm_state_delete(xfrm_state*)
    function void __xfrm_state_destroy(xfrm_state*, bool)
    function int __zerocopy_sg_from_iter(sock*, sk_buff*, iov_iter*, size_t)
    function void _dev_alert(const device*, const char*, ...)
    function void _dev_crit(const device*, const char*, ...)
    function void _dev_emerg(const device*, const char*, ...)
    function void _dev_err(const device*, const char*, ...)
    function void _dev_info(const device*, const char*, ...)
    function void _dev_notice(const device*, const char*, ...)
    function void _dev_warn(const device*, const char*, ...)
    function bool _drm_lease_held(drm_file*, int)
    function int _snd_ctl_add_slave(snd_kcontrol*, snd_kcontrol*, unsigned int)
    function int _snd_pcm_lib_alloc_vmalloc_buffer(snd_pcm_substream*, size_t, gfp_t)
    function unsigned long int _snd_pcm_stream_lock_irqsave(snd_pcm_substream*)
    function int acc_ctrlrequest(usb_composite_dev*, const usb_ctrlrequest*)
    function acomp_req* acomp_request_alloc(crypto_acomp*)
    function void add_disk_randomness(gendisk*)
    function int add_random_ready_callback(random_ready_callback*)
    function void addrconf_add_linklocal(inet6_dev*, const in6_addr*, u32)
    function int addrconf_prefix_rcv_add_addr(net*, net_device*, const prefix_info*, inet6_dev*, const in6_addr*, int, u32, bool, bool, __u32, u32)
    function void aead_exit_geniv(crypto_aead*)
    function aead_instance* aead_geniv_alloc(crypto_template*, rtattr**, u32, u32)
    function void aead_geniv_free(aead_instance*)
    function int aead_init_geniv(crypto_aead*)
    function int aead_register_instance(crypto_template*, aead_instance*)
    function hash_alg_common* ahash_attr_alg(rtattr*, u32, u32)
    function void ahash_free_instance(crypto_instance*)
    function int ahash_register_instance(crypto_template*, ahash_instance*)
    function int akcipher_register_instance(crypto_template*, akcipher_instance*)
    function rtc_device* alarmtimer_get_rtcdev()
    function inode* alloc_anon_inode(super_block*)
    function buffer_head* alloc_buffer_head(gfp_t)
    function net_device* alloc_etherdev_mqs(int, unsigned int, unsigned int)
    function file* alloc_file_pseudo(inode*, vfsmount*, const char*, int, const file_operations*)
    function net_device* alloc_netdev_mqs(int, const char*, unsigned char, void ()*, unsigned int, unsigned int)
    function buffer_head* alloc_page_buffers(page*, unsigned long int, bool)
    function int always_delete_dentry(const dentry*)
    function amba_device* amba_ahb_device_add(device*, const char*, resource_size_t, size_t, int, int, void*, unsigned int)
    function amba_device* amba_ahb_device_add_res(device*, const char*, resource_size_t, size_t, int, int, void*, unsigned int, resource*)
    function amba_device* amba_apb_device_add(device*, const char*, resource_size_t, size_t, int, int, void*, unsigned int)
    function amba_device* amba_apb_device_add_res(device*, const char*, resource_size_t, size_t, int, int, void*, unsigned int, resource*)
    function int amba_device_add(amba_device*, resource*)
    function amba_device* amba_device_alloc(const char*, resource_size_t, size_t)
    function void amba_device_put(amba_device*)
    function int amba_device_register(amba_device*, resource*)
    function void amba_device_unregister(amba_device*)
    function int amba_driver_register(amba_driver*)
    function void amba_driver_unregister(amba_driver*)
    function amba_device* amba_find_device(const char*, device*, unsigned int, unsigned int)
    function void amba_release_regions(amba_device*)
    function int amba_request_regions(amba_device*, const char*)
    function int anon_inode_getfd(const char*, const file_operations*, void*, int)
    function file* anon_inode_getfile(const char*, const file_operations*, void*, int)
    function int anon_transport_class_register(anon_transport_class*)
    function void anon_transport_class_unregister(anon_transport_class*)
    function sk_buff* arp_create(int, int, __be32, net_device*, __be32, const unsigned char*, const unsigned char*, const unsigned char*)
    function void arp_send(int, int, __be32, net_device*, __be32, const unsigned char*, const unsigned char*, const unsigned char*)
    function unsigned int arpt_do_table(sk_buff*, const nf_hook_state*, xt_table*)
    function int arpt_register_table(net*, const xt_table*, const arpt_replace*, const nf_hook_ops*, xt_table**)
    function void arpt_unregister_table(net*, xt_table*, const nf_hook_ops*)
    function attribute_container* attribute_container_classdev_to_container(device*)
    function device* attribute_container_find_class_device(attribute_container*, device*)
    function int attribute_container_register(attribute_container*)
    function int attribute_container_unregister(attribute_container*)
    function int bd_link_disk_holder(block_device*, gendisk*)
    function void bd_set_size(block_device*, loff_t)
    function void bd_unlink_disk_holder(block_device*, gendisk*)
    function int bdev_read_only(block_device*)
    function int bdev_read_page(block_device*, sector_t, page*)
    function int bdev_stack_limits(queue_limits*, block_device*, sector_t)
    function int bdev_write_page(block_device*, sector_t, page*, writeback_control*)
    function const char* bdevname(block_device*, char*)
    function block_device* bdget(dev_t)
    function block_device* bdget_disk(gendisk*, int)
    function block_device* bdgrab(block_device*)
    function backing_dev_info* bdi_alloc_node(gfp_t, int)
    function void bdi_put(backing_dev_info*)
    function int bdi_register(backing_dev_info*, const char*, ...)
    function int bdi_register_owner(backing_dev_info*, device*)
    function int bdi_register_va(backing_dev_info*, const char*, va_list)
    function int bdi_set_max_ratio(backing_dev_info*, unsigned int)
    function void bdput(block_device*)
    function int bh_submit_read(buffer_head*)
    function int bh_uptodate_or_lock(buffer_head*)
    function int bio_add_page(bio*, page*, unsigned int, unsigned int)
    function int bio_add_pc_page(request_queue*, bio*, page*, unsigned int, unsigned int)
    function void bio_advance(bio*, unsigned int)
    function bio* bio_alloc_bioset(gfp_t, unsigned int, bio_set*)
    function int bio_associate_blkcg(bio*, cgroup_subsys_state*)
    function void bio_chain(bio*, bio*)
    function void bio_check_pages_dirty(bio*)
    function void bio_clone_blkcg_association(bio*, bio*)
    function bio* bio_clone_fast(bio*, gfp_t, bio_set*)
    function void bio_copy_data(bio*, bio*)
    function void bio_copy_data_iter(bio*, bvec_iter*, bio*, bvec_iter*)
    function const char* bio_devname(bio*, char*)
    function void bio_endio(bio*)
    function void bio_flush_dcache_pages(bio*)
    function void bio_free_pages(bio*)
    function void bio_init(bio*, bio_vec*, unsigned short int)
    function int bio_iov_iter_get_pages(bio*, iov_iter*)
    function void bio_list_copy_data(bio*, bio*)
    function bio* bio_map_kern(request_queue*, void*, unsigned int, gfp_t)
    function int bio_phys_segments(request_queue*, bio*)
    function void bio_put(bio*)
    function void bio_reset(bio*)
    function void bio_set_pages_dirty(bio*)
    function bio* bio_split(bio*, int, gfp_t, bio_set*)
    function void bio_trim(bio*, int, int)
    function void bio_uninit(bio*)
    function void bioset_exit(bio_set*)
    function int bioset_init(bio_set*, unsigned int, unsigned int, int)
    function int bioset_init_from_src(bio_set*, bio_set*)
    function void blk_abort_request(request*)
    function request_queue* blk_alloc_queue(gfp_t)
    function request_queue* blk_alloc_queue_node(gfp_t, int, spinlock_t*)
    function void blk_cleanup_queue(request_queue*)
    function void blk_clear_pm_only(request_queue*)
    function void blk_complete_request(request*)
    function void blk_delay_queue(request_queue*, unsigned long int)
    function void blk_dump_rq_flags(request*, char*)
    function bool blk_end_request(request*, blk_status_t, unsigned int)
    function void blk_end_request_all(request*, blk_status_t)
    function void blk_execute_rq(request_queue*, gendisk*, request*, int)
    function void blk_execute_rq_nowait(request_queue*, gendisk*, request*, int, rq_end_io_fn*)
    function request* blk_fetch_request(request_queue*)
    function void blk_finish_request(request*, blk_status_t)
    function void blk_free_tags(blk_queue_tag*)
    function void blk_freeze_queue_start(request_queue*)
    function bool blk_get_queue(request_queue*)
    function request* blk_get_request(request_queue*, unsigned int, blk_mq_req_flags_t)
    function int blk_init_allocated_queue(request_queue*)
    function request_queue* blk_init_queue(request_fn_proc*, spinlock_t*)
    function request_queue* blk_init_queue_node(request_fn_proc*, spinlock_t*, int)
    function void blk_init_request_from_bio(request*, bio*)
    function blk_queue_tag* blk_init_tags(int, int)
    function blk_status_t blk_insert_cloned_request(request_queue*, request*)
    function int blk_lld_busy(request_queue*)
    function void blk_mq_add_to_requeue_list(request*, bool, bool)
    function request* blk_mq_alloc_request(request_queue*, unsigned int, blk_mq_req_flags_t)
    function request* blk_mq_alloc_request_hctx(request_queue*, unsigned int, blk_mq_req_flags_t, unsigned int)
    function int blk_mq_alloc_tag_set(blk_mq_tag_set*)
    function bool blk_mq_bio_list_merge(request_queue*, list_head*, bio*)
    function bool blk_mq_can_queue(blk_mq_hw_ctx*)
    function void blk_mq_complete_request(request*)
    function void blk_mq_delay_kick_requeue_list(request_queue*, unsigned long int)
    function void blk_mq_delay_run_hw_queue(blk_mq_hw_ctx*, unsigned long int)
    function void blk_mq_end_request(request*, blk_status_t)
    function void blk_mq_flush_busy_ctxs(blk_mq_hw_ctx*, list_head*)
    function void blk_mq_free_request(request*)
    function void blk_mq_free_tag_set(blk_mq_tag_set*)
    function void blk_mq_freeze_queue(request_queue*)
    function void blk_mq_freeze_queue_wait(request_queue*)
    function int blk_mq_freeze_queue_wait_timeout(request_queue*, unsigned long int)
    function request_queue* blk_mq_init_allocated_queue(blk_mq_tag_set*, request_queue*)
    function request_queue* blk_mq_init_queue(blk_mq_tag_set*)
    function void blk_mq_kick_requeue_list(request_queue*)
    function int blk_mq_map_queues(blk_mq_tag_set*)
    function int blk_mq_pci_map_queues(blk_mq_tag_set*, pci_dev*, int)
    function bool blk_mq_queue_stopped(request_queue*)
    function void blk_mq_quiesce_queue(request_queue*)
    function void blk_mq_quiesce_queue_nowait(request_queue*)
    function int blk_mq_register_dev(device*, request_queue*)
    function int blk_mq_request_started(request*)
    function void blk_mq_requeue_request(request*, bool)
    function bool blk_mq_run_hw_queue(blk_mq_hw_ctx*, bool)
    function void blk_mq_run_hw_queues(request_queue*, bool)
    function void blk_mq_sched_free_hctx_data(request_queue*, void ()*)
    function void blk_mq_sched_mark_restart_hctx(blk_mq_hw_ctx*)
    function void blk_mq_sched_request_inserted(request*)
    function bool blk_mq_sched_try_insert_merge(request_queue*, request*)
    function bool blk_mq_sched_try_merge(request_queue*, bio*, request**)
    function void blk_mq_start_hw_queue(blk_mq_hw_ctx*)
    function void blk_mq_start_hw_queues(request_queue*)
    function void blk_mq_start_request(request*)
    function void blk_mq_start_stopped_hw_queue(blk_mq_hw_ctx*, bool)
    function void blk_mq_start_stopped_hw_queues(request_queue*, bool)
    function void blk_mq_stop_hw_queue(blk_mq_hw_ctx*)
    function void blk_mq_stop_hw_queues(request_queue*)
    function request* blk_mq_tag_to_rq(blk_mq_tags*, unsigned int)
    function void blk_mq_tagset_busy_iter(blk_mq_tag_set*, busy_tag_iter_fn*, void*)
    function void blk_mq_unfreeze_queue(request_queue*)
    function u32 blk_mq_unique_tag(request*)
    function void blk_mq_unquiesce_queue(request_queue*)
    function void blk_mq_update_nr_hw_queues(blk_mq_tag_set*, int)
    function int blk_mq_virtio_map_queues(blk_mq_tag_set*, virtio_device*, int)
    function request* blk_peek_request(request_queue*)
    function void blk_pm_runtime_init(request_queue*, device*)
    function bool blk_poll(request_queue*, blk_qc_t)
    function void blk_post_runtime_resume(request_queue*, int)
    function void blk_post_runtime_suspend(request_queue*, int)
    function void blk_pre_runtime_resume(request_queue*)
    function int blk_pre_runtime_suspend(request_queue*)
    function void blk_put_queue(request_queue*)
    function void blk_put_request(request*)
    function void blk_queue_alignment_offset(request_queue*, unsigned int)
    function void blk_queue_bounce_limit(request_queue*, u64)
    function void blk_queue_bypass_end(request_queue*)
    function void blk_queue_bypass_start(request_queue*)
    function void blk_queue_chunk_sectors(request_queue*, unsigned int)
    function void blk_queue_dma_alignment(request_queue*, int)
    function int blk_queue_dma_drain(request_queue*, dma_drain_needed_fn*, void*, unsigned int)
    function void blk_queue_dma_pad(request_queue*, unsigned int)
    function request* blk_queue_find_tag(request_queue*, int)
    function void blk_queue_flag_clear(unsigned int, request_queue*)
    function void blk_queue_flag_set(unsigned int, request_queue*)
    function bool blk_queue_flag_test_and_clear(unsigned int, request_queue*)
    function bool blk_queue_flag_test_and_set(unsigned int, request_queue*)
    function void blk_queue_flush_queueable(request_queue*, bool)
    function void blk_queue_free_tags(request_queue*)
    function int blk_queue_init_tags(request_queue*, int, blk_queue_tag*, int)
    function void blk_queue_io_min(request_queue*, unsigned int)
    function void blk_queue_io_opt(request_queue*, unsigned int)
    function void blk_queue_lld_busy(request_queue*, lld_busy_fn*)
    function void blk_queue_logical_block_size(request_queue*, unsigned int)
    function void blk_queue_make_request(request_queue*, make_request_fn*)
    function void blk_queue_max_discard_sectors(request_queue*, unsigned int)
    function void blk_queue_max_discard_segments(request_queue*, unsigned short int)
    function void blk_queue_max_hw_sectors(request_queue*, unsigned int)
    function void blk_queue_max_segment_size(request_queue*, unsigned int)
    function void blk_queue_max_segments(request_queue*, unsigned short int)
    function void blk_queue_max_write_same_sectors(request_queue*, unsigned int)
    function void blk_queue_max_write_zeroes_sectors(request_queue*, unsigned int)
    function void blk_queue_physical_block_size(request_queue*, unsigned int)
    function void blk_queue_prep_rq(request_queue*, prep_rq_fn*)
    function int blk_queue_resize_tags(request_queue*, int)
    function void blk_queue_rq_timed_out(request_queue*, rq_timed_out_fn*)
    function void blk_queue_rq_timeout(request_queue*, unsigned int)
    function void blk_queue_segment_boundary(request_queue*, unsigned long int)
    function void blk_queue_softirq_done(request_queue*, softirq_done_fn*)
    function void blk_queue_split(request_queue*, bio**)
    function void blk_queue_stack_limits(request_queue*, request_queue*)
    function int blk_queue_start_tag(request_queue*, request*)
    function void blk_queue_unprep_rq(request_queue*, unprep_rq_fn*)
    function void blk_queue_update_dma_alignment(request_queue*, int)
    function void blk_queue_update_dma_pad(request_queue*, unsigned int)
    function void blk_queue_virt_boundary(request_queue*, unsigned long int)
    function void blk_queue_write_cache(request_queue*, bool, bool)
    function void blk_recount_segments(request_queue*, bio*)
    function int blk_register_queue(gendisk*)
    function void blk_register_region(dev_t, unsigned long int, module*, void ()*, void ()*, void*)
    function void blk_requeue_request(request_queue*, request*)
    function int blk_rq_append_bio(request*, bio**)
    function unsigned int blk_rq_err_bytes(const request*)
    function void blk_rq_init(request_queue*, request*)
    function int blk_rq_map_kern(request_queue*, request*, void*, unsigned int, gfp_t)
    function int blk_rq_map_sg(request_queue*, request*, scatterlist*)
    function int blk_rq_map_user(request_queue*, request*, rq_map_data*, void*, unsigned long int, gfp_t)
    function int blk_rq_map_user_iov(request_queue*, request*, rq_map_data*, const iov_iter*, gfp_t)
    function int blk_rq_prep_clone(request*, request*, bio_set*, gfp_t, void ()*, void*)
    function int blk_rq_unmap_user(bio*)
    function void blk_rq_unprep_clone(request*)
    function void blk_run_queue(request_queue*)
    function void blk_run_queue_async(request_queue*)
    function void blk_set_pm_only(request_queue*)
    function void blk_set_queue_depth(request_queue*, unsigned int)
    function void blk_set_queue_dying(request_queue*)
    function void blk_set_runtime_active(request_queue*)
    function void blk_start_queue(request_queue*)
    function void blk_start_queue_async(request_queue*)
    function void blk_start_request(request*)
    function void blk_stat_add_callback(request_queue*, blk_stat_callback*)
    function blk_stat_callback* blk_stat_alloc_callback(void ()*, void ()*, unsigned int, void*)
    function void blk_stat_remove_callback(request_queue*, blk_stat_callback*)
    function void blk_steal_bios(bio_list*, request*)
    function void blk_stop_queue(request_queue*)
    function void blk_sync_queue(request_queue*)
    function void blk_unprep_request(request*)
    function bool blk_update_request(request*, blk_status_t, unsigned int)
    function int blkcg_activate_policy(request_queue*, const blkcg_policy*)
    function void blkcg_add_delay(blkcg_gq*, u64, u64)
    function void blkcg_deactivate_policy(request_queue*, const blkcg_policy*)
    function int blkcg_policy_register(blkcg_policy*)
    function void blkcg_policy_unregister(blkcg_policy*)
    function void blkcg_print_blkgs(seq_file*, blkcg*, void ()*, const blkcg_policy*, int, bool)
    function void blkcg_schedule_throttle(request_queue*, bool)
    function int blkcipher_aead_walk_virt_block(blkcipher_desc*, blkcipher_walk*, crypto_aead*, unsigned int)
    function int blkdev_fsync(file*, loff_t, loff_t, int)
    function int blkdev_get(block_device*, fmode_t, void*)
    function block_device* blkdev_get_by_dev(dev_t, fmode_t, void*)
    function block_device* blkdev_get_by_path(const char*, fmode_t, void*)
    function int blkdev_ioctl(block_device*, fmode_t, unsigned int, unsigned long int)
    function int blkdev_issue_discard(block_device*, sector_t, sector_t, gfp_t, unsigned long int)
    function int blkdev_issue_flush(block_device*, gfp_t, sector_t*)
    function int blkdev_issue_write_same(block_device*, sector_t, sector_t, gfp_t, page*)
    function int blkdev_issue_zeroout(block_device*, sector_t, sector_t, gfp_t, unsigned int)
    function void blkdev_put(block_device*, fmode_t)
    function int blkdev_reread_part(block_device*)
    function void blkg_conf_finish(blkg_conf_ctx*)
    function int blkg_conf_prep(blkcg*, const blkcg_policy*, char*, blkg_conf_ctx*)
    function const char* blkg_dev_name(blkcg_gq*)
    function blkcg_gq* blkg_lookup_slowpath(blkcg*, request_queue*, bool)
    function u64 blkg_prfill_rwstat(seq_file*, blkg_policy_data*, int)
    function u64 blkg_prfill_stat(seq_file*, blkg_policy_data*, int)
    function blkg_rwstat blkg_rwstat_recursive_sum(blkcg_gq*, blkcg_policy*, int)
    function u64 blkg_stat_recursive_sum(blkcg_gq*, blkcg_policy*, int)
    function int block_page_mkwrite(vm_area_struct*, vm_fault*, get_block_t*)
    function int block_read_full_page(page*, get_block_t*)
    function int block_truncate_page(address_space*, loff_t, get_block_t*)
    function int block_write_begin(address_space*, loff_t, unsigned int, unsigned int, page**, get_block_t*)
    function int block_write_end(file*, address_space*, loff_t, unsigned int, unsigned int, page*, void*)
    function int block_write_full_page(page*, get_block_t*, writeback_control*)
    function int blowfish_setkey(crypto_tfm*, const u8*, unsigned int)
    function sector_t bmap(inode*, sector_t)
    function u64 bpf_event_output(bpf_map*, u64, void*, u64, void*, u64, bpf_ctx_copy_t)
    function bpf_map* bpf_map_inc(bpf_map*, bool)
    function void bpf_map_put(bpf_map*)
    function bool bpf_offload_dev_match(bpf_prog*, net_device*)
    function int bpf_offload_dev_netdev_register(bpf_offload_dev*, net_device*)
    function void bpf_offload_dev_netdev_unregister(bpf_offload_dev*, net_device*)
    function int bprm_change_interp(const char*, linux_binprm*)
    function int br_dev_queue_push_xmit(net*, sock*, sk_buff*)
    function net_device* br_fdb_find_port(const net_device*, const unsigned char*, __u16)
    function void br_forward(const net_bridge_port*, sk_buff*, bool, bool)
    function int br_forward_finish(net*, sock*, sk_buff*)
    function int br_handle_frame_finish(net*, sock*, sk_buff*)
    function bool br_multicast_enabled(const net_device*)
    function bool br_multicast_has_querier_adjacent(net_device*, int)
    function bool br_multicast_has_querier_anywhere(net_device*, int)
    function int br_multicast_list_adjacent(net_device*, list_head*)
    function bool br_multicast_router(const net_device*)
    function int bsg_scsi_register_queue(request_queue*, device*)
    function void bsg_unregister_queue(request_queue*)
    function sock* bt_accept_dequeue(sock*, socket*)
    function void bt_accept_enqueue(sock*, sock*, bool)
    function void bt_accept_unlink(sock*)
    function int bt_sock_ioctl(socket*, unsigned int, unsigned long int)
    function void bt_sock_link(bt_sock_list*, sock*)
    function __poll_t bt_sock_poll(file*, socket*, poll_table*)
    function void bt_sock_reclassify_lock(sock*, int)
    function int bt_sock_recvmsg(socket*, msghdr*, size_t, int)
    function int bt_sock_register(int, const net_proto_family*)
    function int bt_sock_stream_recvmsg(socket*, msghdr*, size_t, int)
    function void bt_sock_unlink(bt_sock_list*, sock*)
    function int bt_sock_wait_ready(sock*, unsigned long int)
    function int bt_sock_wait_state(sock*, int, unsigned long int)
    function int bus_create_file(bus_type*, bus_attribute*)
    function device* bus_find_device(bus_type*, device*, void*, void ()*)
    function device* bus_find_device_by_name(bus_type*, device*, const char*)
    function int bus_for_each_dev(bus_type*, device*, void*, void ()*)
    function int bus_for_each_drv(bus_type*, device_driver*, void*, void ()*)
    function klist* bus_get_device_klist(bus_type*)
    function kset* bus_get_kset(bus_type*)
    function int bus_register(bus_type*)
    function int bus_register_notifier(bus_type*, notifier_block*)
    function void bus_remove_file(bus_type*, bus_attribute*)
    function int bus_rescan_devices(bus_type*)
    function int bus_set_iommu(bus_type*, const iommu_ops*)
    function void bus_sort_breadthfirst(bus_type*, void ()*)
    function void bus_unregister(bus_type*)
    function int bus_unregister_notifier(bus_type*, notifier_block*)
    function int call_netdevice_notifiers(unsigned long int, net_device*)
    function int call_usermodehelper_exec(subprocess_info*, int)
    function subprocess_info* call_usermodehelper_setup(const char*, char**, char**, gfp_t, void ()*, void ()*, void*)
    function bool capable_wrt_inode_uidgid(const inode*, int)
    function int cdc_parse_cdc_header(usb_cdc_parsed_header*, usb_interface*, u8*, int)
    function int cdev_add(cdev*, dev_t, unsigned int)
    function cdev* cdev_alloc()
    function void cdev_del(cdev*)
    function int cdev_device_add(cdev*, device*)
    function void cdev_device_del(cdev*, device*)
    function void cdev_init(cdev*, const file_operations*)
    function void cdev_set_parent(cdev*, kobject*)
    function int ce_aes_setkey(crypto_tfm*, const u8*, unsigned int)
    function void cfb_copyarea(fb_info*, const fb_copyarea*)
    function void cfb_fillrect(fb_info*, const fb_fillrect*)
    function void cfb_imageblit(fb_info*, const fb_image*)
    function void cfg80211_abandon_assoc(net_device*, cfg80211_bss*)
    function void cfg80211_assoc_timeout(net_device*, cfg80211_bss*)
    function void cfg80211_auth_timeout(net_device*, const u8*)
    function void cfg80211_cac_event(net_device*, const cfg80211_chan_def*, nl80211_radar_event, gfp_t)
    function void cfg80211_ch_switch_notify(net_device*, cfg80211_chan_def*)
    function void cfg80211_ch_switch_started_notify(net_device*, cfg80211_chan_def*, u8)
    function int cfg80211_chandef_dfs_required(wiphy*, const cfg80211_chan_def*, nl80211_iftype)
    function bool cfg80211_chandef_usable(wiphy*, const cfg80211_chan_def*, u32)
    function int cfg80211_check_combinations(wiphy*, iface_combination_params*)
    function int cfg80211_check_station_change(wiphy*, station_parameters*, cfg80211_station_type)
    function void cfg80211_conn_failed(net_device*, const u8*, nl80211_connect_failed_reason, gfp_t)
    function void cfg80211_connect_done(net_device*, cfg80211_connect_resp_params*, gfp_t)
    function void cfg80211_cqm_beacon_loss_notify(net_device*, gfp_t)
    function void cfg80211_cqm_pktloss_notify(net_device*, const u8*, u32, gfp_t)
    function void cfg80211_cqm_rssi_notify(net_device*, nl80211_cqm_rssi_threshold_event, s32, gfp_t)
    function void cfg80211_cqm_txe_notify(net_device*, const u8*, u32, u32, u32, gfp_t)
    function void cfg80211_crit_proto_stopped(wireless_dev*, gfp_t)
    function void cfg80211_del_sta_sinfo(net_device*, const u8*, station_info*, gfp_t)
    function void cfg80211_disconnected(net_device*, u16, const u8*, size_t, bool, gfp_t)
    function int cfg80211_external_auth_request(net_device*, cfg80211_external_auth_params*, gfp_t)
    function void cfg80211_ft_event(net_device*, cfg80211_ft_event_params*)
    function cfg80211_bss* cfg80211_get_bss(wiphy*, ieee80211_channel*, const u8*, const u8*, size_t, ieee80211_bss_type, ieee80211_privacy)
    function int cfg80211_get_station(net_device*, const u8*, station_info*)
    function void cfg80211_gtk_rekey_notify(net_device*, const u8*, const u8*, gfp_t)
    function void cfg80211_ibss_joined(net_device*, const u8*, ieee80211_channel*, gfp_t)
    function bool cfg80211_iftype_allowed(wiphy*, nl80211_iftype, bool, u8)
    function cfg80211_bss* cfg80211_inform_bss_data(wiphy*, cfg80211_inform_bss*, cfg80211_bss_frame_type, const u8*, u64, u16, u16, const u8*, size_t, gfp_t)
    function cfg80211_bss* cfg80211_inform_bss_frame_data(wiphy*, cfg80211_inform_bss*, ieee80211_mgmt*, size_t, gfp_t)
    function int cfg80211_iter_combinations(wiphy*, iface_combination_params*, void ()*, void*)
    function void cfg80211_mgmt_tx_status(wireless_dev*, u64, const u8*, size_t, bool, gfp_t)
    function void cfg80211_michael_mic_failure(net_device*, const u8*, nl80211_key_type, int, const u8*, gfp_t)
    function void cfg80211_nan_func_terminated(wireless_dev*, u8, nl80211_nan_func_term_reason, u64, gfp_t)
    function void cfg80211_nan_match(wireless_dev*, cfg80211_nan_match_params*, gfp_t)
    function void cfg80211_new_sta(net_device*, const u8*, station_info*, gfp_t)
    function void cfg80211_notify_new_peer_candidate(net_device*, const u8*, const u8*, u8, gfp_t)
    function void cfg80211_pmksa_candidate_notify(net_device*, int, const u8*, bool, gfp_t)
    function void cfg80211_port_authorized(net_device*, const u8*, gfp_t)
    function void cfg80211_probe_status(net_device*, const u8*, u64, bool, s32, bool, gfp_t)
    function void cfg80211_put_bss(wiphy*, cfg80211_bss*)
    function void cfg80211_radar_event(wiphy*, cfg80211_chan_def*, gfp_t)
    function void cfg80211_ready_on_channel(wireless_dev*, u64, ieee80211_channel*, unsigned int, gfp_t)
    function void cfg80211_ref_bss(wiphy*, cfg80211_bss*)
    function bool cfg80211_reg_can_beacon(wiphy*, cfg80211_chan_def*, nl80211_iftype)
    function bool cfg80211_reg_can_beacon_relax(wiphy*, cfg80211_chan_def*, nl80211_iftype)
    function void cfg80211_remain_on_channel_expired(wireless_dev*, u64, ieee80211_channel*, gfp_t)
    function void cfg80211_report_obss_beacon(wiphy*, const u8*, size_t, int, int)
    function void cfg80211_report_wowlan_wakeup(wireless_dev*, cfg80211_wowlan_wakeup*, gfp_t)
    function void cfg80211_roamed(net_device*, cfg80211_roam_info*, gfp_t)
    function void cfg80211_rx_assoc_resp(net_device*, cfg80211_bss*, const u8*, size_t, int)
    function bool cfg80211_rx_control_port(net_device*, sk_buff*, bool)
    function bool cfg80211_rx_mgmt(wireless_dev*, int, int, const u8*, size_t, u32)
    function void cfg80211_rx_mlme_mgmt(net_device*, const u8*, size_t)
    function bool cfg80211_rx_spurious_frame(net_device*, const u8*, gfp_t)
    function bool cfg80211_rx_unexpected_4addr_frame(net_device*, const u8*, gfp_t)
    function void cfg80211_rx_unprot_mlme_mgmt(net_device*, const u8*, size_t)
    function void cfg80211_scan_done(cfg80211_scan_request*, cfg80211_scan_info*)
    function void cfg80211_sched_scan_results(wiphy*, u64)
    function void cfg80211_sched_scan_stopped(wiphy*, u64)
    function void cfg80211_sched_scan_stopped_rtnl(wiphy*, u64)
    function void cfg80211_send_layer2_update(net_device*, const u8*)
    function void cfg80211_shutdown_all_interfaces(wiphy*)
    function void cfg80211_sta_opmode_change_notify(net_device*, const u8*, sta_opmode_info*, gfp_t)
    function void cfg80211_stop_iface(wiphy*, wireless_dev*, gfp_t)
    function void cfg80211_tdls_oper_request(net_device*, const u8*, nl80211_tdls_operation, u16, gfp_t)
    function void cfg80211_tx_mlme_mgmt(net_device*, const u8*, size_t)
    function void cfg80211_unlink_bss(wiphy*, cfg80211_bss*)
    function void cfg80211_unregister_wdev(wireless_dev*)
    function cgroup* cgroup_get_from_fd(int)
    function cgroup* cgroup_get_from_path(const char*)
    function int cgroup_path_ns(cgroup*, char*, size_t, cgroup_namespace*)
    function void cgroup_rstat_updated(cgroup*, int)
    function int check_disk_change(block_device*)
    function int class_compat_create_link(class_compat*, device*, device*)
    function class_compat* class_compat_register(const char*)
    function void class_compat_remove_link(class_compat*, device*, device*)
    function void class_compat_unregister(class_compat*)
    function int class_create_file_ns(class*, const class_attribute*, void*)
    function void class_destroy(class*)
    function void class_dev_iter_exit(class_dev_iter*)
    function void class_dev_iter_init(class_dev_iter*, class*, device*, const device_type*)
    function device* class_dev_iter_next(class_dev_iter*)
    function device* class_find_device(class*, device*, void*, void ()*)
    function int class_for_each_device(class*, device*, void*, void ()*)
    function int class_interface_register(class_interface*)
    function void class_interface_unregister(class_interface*)
    function void class_remove_file_ns(class*, const class_attribute*, void*)
    function void class_unregister(class*)
    function void clean_bdev_aliases(block_device*, sector_t, sector_t)
    function void clear_inode(inode*)
    function void clear_nlink(inode*)
    function int clk_add_alias(const char*, const char*, const char*, device*)
    function int clk_bulk_get(device*, int, clk_bulk_data*)
    function clk* clk_get(device*, const char*)
    function int clk_hw_register(device*, clk_hw*)
    function clk_hw* clk_hw_register_fixed_factor(device*, const char*, const char*, unsigned long int, unsigned int, unsigned int)
    function clk_hw* clk_hw_register_fixed_rate(device*, const char*, const char*, unsigned long int, unsigned long int)
    function clk_hw* clk_hw_register_fixed_rate_with_accuracy(device*, const char*, const char*, unsigned long int, unsigned long int, unsigned long int)
    function clk_hw* clk_hw_register_fractional_divider(device*, const char*, const char*, unsigned long int, void*, u8, u8, u8, u8, u8, spinlock_t*)
    function clk_hw* clk_hw_register_gpio_gate(device*, const char*, const char*, gpio_desc*, unsigned long int)
    function clk_hw* clk_hw_register_gpio_mux(device*, const char*, const char* const*, u8, gpio_desc*, unsigned long int)
    function clk* clk_register(device*, clk_hw*)
    function clk* clk_register_fixed_factor(device*, const char*, const char*, unsigned long int, unsigned int, unsigned int)
    function clk* clk_register_fixed_rate(device*, const char*, const char*, unsigned long int, unsigned long int)
    function clk* clk_register_fixed_rate_with_accuracy(device*, const char*, const char*, unsigned long int, unsigned long int, unsigned long int)
    function clk* clk_register_fractional_divider(device*, const char*, const char*, unsigned long int, void*, u8, u8, u8, u8, u8, spinlock_t*)
    function clk* clk_register_gpio_gate(device*, const char*, const char*, gpio_desc*, unsigned long int)
    function clk* clk_register_gpio_mux(device*, const char*, const char* const*, u8, gpio_desc*, unsigned long int)
    function clk* clk_register_hisi_phase(device*, const hisi_phase_clock*, void*, spinlock_t*)
    function void clk_sync_state(device*)
    function u64 clockevent_delta2ns(unsigned long int, clock_event_device*)
    function void clockevents_config_and_register(clock_event_device*, u32, unsigned long int, unsigned long int)
    function void clockevents_register_device(clock_event_device*)
    function int clockevents_unbind_device(clock_event_device*, int)
    function void clocksource_change_rating(clocksource*, int)
    function int clocksource_unregister(clocksource*)
    function vfsmount* clone_private_mount(const path*)
    function int compat_ip_getsockopt(sock*, int, int, char*, int*)
    function int compat_ip_setsockopt(sock*, int, int, char*, unsigned int)
    function int compat_ipv6_getsockopt(sock*, int, int, char*, int*)
    function int compat_ipv6_setsockopt(sock*, int, int, char*, unsigned int)
    function int compat_mc_getsockopt(sock*, int, int, char*, int*, void ()*)
    function int compat_mc_setsockopt(sock*, int, int, char*, unsigned int, void ()*)
    function int compat_nf_getsockopt(sock*, u_int8_t, int, char*, int*)
    function int compat_nf_setsockopt(sock*, u_int8_t, int, char*, unsigned int)
    function int compat_sock_common_getsockopt(socket*, int, int, char*, int*)
    function int compat_sock_common_setsockopt(socket*, int, int, char*, unsigned int)
    function int compat_sock_get_timestamp(sock*, timeval*)
    function int compat_sock_get_timestampns(sock*, timespec*)
    function int compat_tcp_getsockopt(sock*, int, int, char*, int*)
    function int compat_tcp_setsockopt(sock*, int, int, char*, unsigned int)
    function int component_add(device*, const component_ops*)
    function int component_bind_all(device*, void*)
    function void component_del(device*, const component_ops*)
    function int component_master_add_with_match(device*, const component_master_ops*, component_match*)
    function void component_master_del(device*, const component_master_ops*)
    function void component_match_add_release(device*, component_match**, void ()*, void ()*, void*)
    function void component_unbind_all(device*, void*)
    function int config_ep_by_speed(usb_gadget*, usb_function*, usb_ep*)
    function config_item* config_group_find_item(config_group*, const char*)
    function void config_group_init_type_name(config_group*, const char*, const config_item_type*)
    function config_item* config_item_get(config_item*)
    function config_item* config_item_get_unless_zero(config_item*)
    function void config_item_init_type_name(config_item*, const char*, const config_item_type*)
    function void config_item_put(config_item*)
    function int config_item_set_name(config_item*, const char*, ...)
    function int configfs_depend_item(configfs_subsystem*, config_item*)
    function int configfs_depend_item_unlocked(configfs_subsystem*, config_item*)
    function config_group* configfs_register_default_group(config_group*, const char*, const config_item_type*)
    function void configfs_undepend_item(config_item*)
    function void console_start(console*)
    function void console_stop(console*)
    function int cont_write_begin(file*, address_space*, loff_t, unsigned int, unsigned int, page**, void**, get_block_t*, loff_t*)
    function int copy_strings_kernel(int, const char* const*, linux_binprm*)
    function void coresight_disable(coresight_device*)
    function int coresight_enable(coresight_device*)
    function coresight_device* coresight_register(coresight_desc*)
    function void coresight_unregister(coresight_device*)
    function device* cpu_device_create(device*, void*, const attribute_group**, const char*, ...)
    function thermal_cooling_device* cpufreq_cooling_register(cpufreq_policy*)
    function void cpufreq_cooling_unregister(thermal_cooling_device*)
    function cpufreq_policy* cpufreq_cpu_get(unsigned int)
    function cpufreq_policy* cpufreq_cpu_get_raw(unsigned int)
    function void cpufreq_cpu_put(cpufreq_policy*)
    function void cpufreq_dbs_governor_exit(cpufreq_policy*)
    function int cpufreq_dbs_governor_init(cpufreq_policy*)
    function void cpufreq_dbs_governor_limits(cpufreq_policy*)
    function int cpufreq_dbs_governor_start(cpufreq_policy*)
    function void cpufreq_dbs_governor_stop(cpufreq_policy*)
    function void cpufreq_disable_fast_switch(cpufreq_policy*)
    function unsigned int cpufreq_driver_fast_switch(cpufreq_policy*, unsigned int)
    function unsigned int cpufreq_driver_resolve_freq(cpufreq_policy*, unsigned int)
    function int cpufreq_driver_target(cpufreq_policy*, unsigned int, unsigned int)
    function void cpufreq_enable_fast_switch(cpufreq_policy*)
    function void cpufreq_freq_transition_begin(cpufreq_policy*, cpufreq_freqs*)
    function void cpufreq_freq_transition_end(cpufreq_policy*, cpufreq_freqs*, int)
    function int cpufreq_frequency_table_get_index(cpufreq_policy*, unsigned int)
    function int cpufreq_frequency_table_verify(cpufreq_policy*, cpufreq_frequency_table*)
    function int cpufreq_generic_frequency_table_verify(cpufreq_policy*)
    function int cpufreq_generic_init(cpufreq_policy*, cpufreq_frequency_table*, unsigned int)
    function int cpufreq_generic_suspend(cpufreq_policy*)
    function int cpufreq_get_policy(cpufreq_policy*, unsigned int)
    function unsigned int cpufreq_policy_transition_delay_us(cpufreq_policy*)
    function int cpufreq_register_driver(cpufreq_driver*)
    function int cpufreq_register_governor(cpufreq_governor*)
    function int cpufreq_table_index_unsorted(cpufreq_policy*, unsigned int, unsigned int)
    function int cpufreq_unregister_driver(cpufreq_driver*)
    function void cpufreq_unregister_governor(cpufreq_governor*)
    function cpuidle_driver* cpuidle_get_cpu_driver(cpuidle_device*)
    function cpuidle_driver* cpuidle_get_driver()
    function int cpuidle_register(cpuidle_driver*, const cpumask* const)
    function int cpuidle_register_driver(cpuidle_driver*)
    function void cpuidle_unregister(cpuidle_driver*)
    function void cpuidle_unregister_driver(cpuidle_driver*)
    function device* create_function_device(char*)
    function crypto_blkcipher* cryptd_ablkcipher_child(cryptd_ablkcipher*)
    function bool cryptd_ablkcipher_queued(cryptd_ablkcipher*)
    function crypto_aead* cryptd_aead_child(cryptd_aead*)
    function bool cryptd_aead_queued(cryptd_aead*)
    function crypto_shash* cryptd_ahash_child(cryptd_ahash*)
    function bool cryptd_ahash_queued(cryptd_ahash*)
    function cryptd_ablkcipher* cryptd_alloc_ablkcipher(const char*, u32, u32)
    function cryptd_aead* cryptd_alloc_aead(const char*, u32, u32)
    function cryptd_ahash* cryptd_alloc_ahash(const char*, u32, u32)
    function cryptd_skcipher* cryptd_alloc_skcipher(const char*, u32, u32)
    function void cryptd_free_ablkcipher(cryptd_ablkcipher*)
    function void cryptd_free_aead(cryptd_aead*)
    function void cryptd_free_ahash(cryptd_ahash*)
    function void cryptd_free_skcipher(cryptd_skcipher*)
    function shash_desc* cryptd_shash_desc(ahash_request*)
    function crypto_skcipher* cryptd_skcipher_child(cryptd_skcipher*)
    function bool cryptd_skcipher_queued(cryptd_skcipher*)
    function int crypto_aead_setauthsize(crypto_aead*, unsigned int)
    function int crypto_aead_setkey(crypto_aead*, const u8*, unsigned int)
    function int crypto_aes_set_key(crypto_tfm*, const u8*, unsigned int)
    function int crypto_ahash_setkey(crypto_ahash*, const u8*, unsigned int)
    function unsigned int crypto_alg_extsize(crypto_alg*)
    function crypto_alg* crypto_alg_mod_lookup(const char*, u32, u32)
    function crypto_acomp* crypto_alloc_acomp(const char*, u32, u32)
    function crypto_aead* crypto_alloc_aead(const char*, u32, u32)
    function crypto_ahash* crypto_alloc_ahash(const char*, u32, u32)
    function crypto_akcipher* crypto_alloc_akcipher(const char*, u32, u32)
    function crypto_tfm* crypto_alloc_base(const char*, u32, u32)
    function crypto_instance* crypto_alloc_instance(const char*, crypto_alg*)
    function void* crypto_alloc_instance2(const char*, crypto_alg*, unsigned int)
    function crypto_kpp* crypto_alloc_kpp(const char*, u32, u32)
    function crypto_rng* crypto_alloc_rng(const char*, u32, u32)
    function crypto_shash* crypto_alloc_shash(const char*, u32, u32)
    function crypto_skcipher* crypto_alloc_skcipher(const char*, u32, u32)
    function crypto_alg* crypto_attr_alg2(rtattr*, const crypto_type*, u32, u32)
    function int crypto_chacha12_setkey(crypto_skcipher*, const u8*, unsigned int)
    function int crypto_chacha20_setkey(crypto_skcipher*, const u8*, unsigned int)
    function void* crypto_create_tfm(crypto_alg*, const crypto_type*)
    function void crypto_destroy_tfm(void*, crypto_tfm*)
    function void crypto_drop_spawn(crypto_spawn*)
    function crypto_engine* crypto_engine_alloc_init(device*, bool)
    function int crypto_engine_exit(crypto_engine*)
    function int crypto_engine_start(crypto_engine*)
    function int crypto_engine_stop(crypto_engine*)
    function void crypto_finalize_ablkcipher_request(crypto_engine*, ablkcipher_request*, int)
    function void crypto_finalize_aead_request(crypto_engine*, aead_request*, int)
    function void crypto_finalize_akcipher_request(crypto_engine*, akcipher_request*, int)
    function void crypto_finalize_hash_request(crypto_engine*, ahash_request*, int)
    function void crypto_finalize_skcipher_request(crypto_engine*, skcipher_request*, int)
    function crypto_alg* crypto_find_alg(const char*, const crypto_type*, u32, u32)
    function crypto_skcipher* crypto_get_default_null_skcipher()
    function int crypto_grab_aead(crypto_aead_spawn*, const char*, u32, u32)
    function int crypto_grab_akcipher(crypto_akcipher_spawn*, const char*, u32, u32)
    function int crypto_grab_skcipher(crypto_skcipher_spawn*, const char*, u32, u32)
    function int crypto_grab_spawn(crypto_spawn*, const char*, u32, u32)
    function bool crypto_hash_alg_has_setkey(hash_alg_common*)
    function int crypto_init_ahash_spawn(crypto_ahash_spawn*, hash_alg_common*, crypto_instance*)
    function int crypto_init_shash_spawn(crypto_shash_spawn*, shash_alg*, crypto_instance*)
    function int crypto_init_spawn(crypto_spawn*, crypto_alg*, crypto_instance*, u32)
    function int crypto_init_spawn2(crypto_spawn*, crypto_alg*, crypto_instance*, const crypto_type*)
    function int crypto_inst_setname(crypto_instance*, const char*, crypto_alg*)
    function crypto_larval* crypto_larval_alloc(const char*, u32, u32)
    function void crypto_larval_kill(crypto_alg*)
    function crypto_template* crypto_lookup_template(const char*)
    function crypto_alg* crypto_mod_get(crypto_alg*)
    function void crypto_mod_put(crypto_alg*)
    function int crypto_nhpoly1305_final(shash_desc*, u8*)
    function int crypto_nhpoly1305_final_helper(shash_desc*, u8*, nh_t)
    function int crypto_nhpoly1305_init(shash_desc*)
    function int crypto_nhpoly1305_setkey(crypto_shash*, const u8*, unsigned int)
    function int crypto_nhpoly1305_update(shash_desc*, const u8*, unsigned int)
    function int crypto_nhpoly1305_update_helper(shash_desc*, const u8*, unsigned int, nh_t)
    function int crypto_poly1305_final(shash_desc*, u8*)
    function int crypto_poly1305_init(shash_desc*)
    function int crypto_poly1305_update(shash_desc*, const u8*, unsigned int)
    function int crypto_register_acomp(acomp_alg*)
    function int crypto_register_acomps(acomp_alg*, int)
    function int crypto_register_aead(aead_alg*)
    function int crypto_register_aeads(aead_alg*, int)
    function int crypto_register_ahash(ahash_alg*)
    function int crypto_register_ahashes(ahash_alg*, int)
    function int crypto_register_akcipher(akcipher_alg*)
    function int crypto_register_alg(crypto_alg*)
    function int crypto_register_algs(crypto_alg*, int)
    function int crypto_register_instance(crypto_template*, crypto_instance*)
    function int crypto_register_kpp(kpp_alg*)
    function int crypto_register_rng(rng_alg*)
    function int crypto_register_rngs(rng_alg*, int)
    function int crypto_register_scomp(scomp_alg*)
    function int crypto_register_scomps(scomp_alg*, int)
    function int crypto_register_shash(shash_alg*)
    function int crypto_register_shashes(shash_alg*, int)
    function int crypto_register_skcipher(skcipher_alg*)
    function int crypto_register_skciphers(skcipher_alg*, int)
    function int crypto_register_template(crypto_template*)
    function void crypto_remove_spawns(crypto_alg*, list_head*, crypto_alg*)
    function int crypto_rng_reset(crypto_rng*, const u8*, unsigned int)
    function int crypto_sha1_finup(shash_desc*, const u8*, unsigned int, u8*)
    function int crypto_sha1_update(shash_desc*, const u8*, unsigned int)
    function int crypto_sha256_finup(shash_desc*, const u8*, unsigned int, u8*)
    function int crypto_sha256_update(shash_desc*, const u8*, unsigned int)
    function int crypto_sha512_finup(shash_desc*, const u8*, unsigned int, u8*)
    function int crypto_sha512_update(shash_desc*, const u8*, unsigned int)
    function int crypto_shash_digest(shash_desc*, const u8*, unsigned int, u8*)
    function int crypto_shash_final(shash_desc*, u8*)
    function int crypto_shash_finup(shash_desc*, const u8*, unsigned int, u8*)
    function int crypto_shash_setkey(crypto_shash*, const u8*, unsigned int)
    function int crypto_shash_update(shash_desc*, const u8*, unsigned int)
    function void crypto_shoot_alg(crypto_alg*)
    function crypto_tfm* crypto_spawn_tfm(crypto_spawn*, u32, u32)
    function void* crypto_spawn_tfm2(crypto_spawn*)
    function int crypto_tfm_in_queue(crypto_queue*, crypto_tfm*)
    function int crypto_transfer_ablkcipher_request_to_engine(crypto_engine*, ablkcipher_request*)
    function int crypto_transfer_aead_request_to_engine(crypto_engine*, aead_request*)
    function int crypto_transfer_akcipher_request_to_engine(crypto_engine*, akcipher_request*)
    function int crypto_transfer_hash_request_to_engine(crypto_engine*, ahash_request*)
    function int crypto_transfer_skcipher_request_to_engine(crypto_engine*, skcipher_request*)
    function int crypto_unregister_acomp(acomp_alg*)
    function void crypto_unregister_acomps(acomp_alg*, int)
    function void crypto_unregister_aead(aead_alg*)
    function void crypto_unregister_aeads(aead_alg*, int)
    function int crypto_unregister_ahash(ahash_alg*)
    function void crypto_unregister_ahashes(ahash_alg*, int)
    function void crypto_unregister_akcipher(akcipher_alg*)
    function int crypto_unregister_alg(crypto_alg*)
    function int crypto_unregister_algs(crypto_alg*, int)
    function int crypto_unregister_instance(crypto_instance*)
    function void crypto_unregister_kpp(kpp_alg*)
    function void crypto_unregister_rng(rng_alg*)
    function void crypto_unregister_rngs(rng_alg*, int)
    function int crypto_unregister_scomp(scomp_alg*)
    function void crypto_unregister_scomps(scomp_alg*, int)
    function int crypto_unregister_shash(shash_alg*)
    function int crypto_unregister_shashes(shash_alg*, int)
    function void crypto_unregister_skcipher(skcipher_alg*)
    function void crypto_unregister_skciphers(skcipher_alg*, int)
    function void crypto_unregister_template(crypto_template*)
    function timespec64 current_time(inode*)
    function void d_add(dentry*, inode*)
    function dentry* d_add_ci(dentry*, inode*, qstr*)
    function dentry* d_alloc(dentry*, const qstr*)
    function dentry* d_alloc_anon(super_block*)
    function dentry* d_alloc_name(dentry*, const char*)
    function dentry* d_alloc_parallel(dentry*, const qstr*, wait_queue_head_t*)
    function dentry* d_alloc_pseudo(super_block*, const qstr*)
    function void d_delete(dentry*)
    function void d_drop(dentry*)
    function dentry* d_exact_alias(dentry*, inode*)
    function dentry* d_find_alias(inode*)
    function dentry* d_find_any_alias(inode*)
    function void d_genocide(dentry*)
    function dentry* d_hash_and_lookup(dentry*, qstr*)
    function void d_instantiate(dentry*, inode*)
    function dentry* d_instantiate_anon(dentry*, inode*)
    function void d_instantiate_new(dentry*, inode*)
    function void d_invalidate(dentry*)
    function dentry* d_lookup(const dentry*, const qstr*)
    function dentry* d_make_root(inode*)
    function void d_move(dentry*, dentry*)
    function dentry* d_obtain_alias(inode*)
    function dentry* d_obtain_root(inode*)
    function void d_prune_aliases(inode*)
    function void d_rehash(dentry*)
    function void d_set_d_op(dentry*, const dentry_operations*)
    function void d_set_fallthru(dentry*)
    function dentry* d_splice_alias(inode*, dentry*)
    function void d_tmpfile(dentry*, inode*)
    function int dapm_clock_event(snd_soc_dapm_widget*, snd_kcontrol*, int)
    function unsigned int dapm_kcontrol_get_value(const snd_kcontrol*)
    function void dapm_mark_endpoints_dirty(snd_soc_card*)
    function int dapm_pinctrl_event(snd_soc_dapm_widget*, snd_kcontrol*, int)
    function int dapm_regulator_event(snd_soc_dapm_widget*, snd_kcontrol*, int)
    function __poll_t datagram_poll(file*, socket*, poll_table*)
    function unsigned int dbs_update(cpufreq_policy*)
    function int dcache_dir_close(inode*, file*)
    function loff_t dcache_dir_lseek(file*, loff_t, int)
    function int dcache_dir_open(inode*, file*)
    function int dcache_readdir(file*, dir_context*)
    function void deactivate_locked_super(super_block*)
    function void deactivate_super(super_block*)
    function ssize_t debugfs_attr_read(file*, char*, size_t, loff_t*)
    function ssize_t debugfs_attr_write(file*, const char*, size_t, loff_t*)
    function dentry* debugfs_create_atomic_t(const char*, umode_t, dentry*, atomic_t*)
    function dentry* debugfs_create_automount(const char*, dentry*, debugfs_automount_t, void*)
    function dentry* debugfs_create_blob(const char*, umode_t, dentry*, debugfs_blob_wrapper*)
    function dentry* debugfs_create_bool(const char*, umode_t, dentry*, bool*)
    function dentry* debugfs_create_devm_seqfile(device*, const char*, dentry*, void ()*)
    function dentry* debugfs_create_dir(const char*, dentry*)
    function dentry* debugfs_create_file(const char*, umode_t, dentry*, void*, const file_operations*)
    function dentry* debugfs_create_file_size(const char*, umode_t, dentry*, void*, const file_operations*, loff_t)
    function dentry* debugfs_create_file_unsafe(const char*, umode_t, dentry*, void*, const file_operations*)
    function dentry* debugfs_create_regset32(const char*, umode_t, dentry*, debugfs_regset32*)
    function dentry* debugfs_create_size_t(const char*, umode_t, dentry*, size_t*)
    function dentry* debugfs_create_symlink(const char*, dentry*, const char*)
    function dentry* debugfs_create_u16(const char*, umode_t, dentry*, u16*)
    function dentry* debugfs_create_u32(const char*, umode_t, dentry*, u32*)
    function dentry* debugfs_create_u32_array(const char*, umode_t, dentry*, u32*, u32)
    function dentry* debugfs_create_u64(const char*, umode_t, dentry*, u64*)
    function dentry* debugfs_create_u8(const char*, umode_t, dentry*, u8*)
    function dentry* debugfs_create_ulong(const char*, umode_t, dentry*, unsigned long int*)
    function dentry* debugfs_create_x16(const char*, umode_t, dentry*, u16*)
    function dentry* debugfs_create_x32(const char*, umode_t, dentry*, u32*)
    function dentry* debugfs_create_x64(const char*, umode_t, dentry*, u64*)
    function dentry* debugfs_create_x8(const char*, umode_t, dentry*, u8*)
    function int debugfs_file_get(dentry*)
    function void debugfs_file_put(dentry*)
    function dentry* debugfs_lookup(const char*, dentry*)
    function ssize_t debugfs_read_file_bool(file*, char*, size_t, loff_t*)
    function const file_operations* debugfs_real_fops(const file*)
    function void debugfs_remove(dentry*)
    function void debugfs_remove_recursive(dentry*)
    function dentry* debugfs_rename(dentry*, dentry*, dentry*, const char*)
    function ssize_t debugfs_write_file_bool(file*, const char*, size_t, loff_t*)
    function loff_t default_llseek(file*, loff_t, int)
    function void del_gendisk(gendisk*)
    function void del_random_ready_callback(random_ready_callback*)
    function file* dentry_open(const path*, int, const cred*)
    function char* dentry_path_raw(dentry*, char*, int)
    function int desc_to_gpio(const gpio_desc*)
    function void dev_activate(net_device*)
    function void dev_add_pack(packet_type*)
    function int dev_addr_add(net_device*, const unsigned char*, unsigned char)
    function int dev_addr_del(net_device*, const unsigned char*, unsigned char)
    function void dev_addr_flush(net_device*)
    function int dev_addr_init(net_device*)
    function int dev_alloc_name(net_device*, const char*)
    function int dev_change_carrier(net_device*, bool)
    function int dev_change_flags(net_device*, unsigned int)
    function int dev_change_net_namespace(net_device*, net*, const char*)
    function int dev_change_proto_down(net_device*, bool)
    function void dev_close(net_device*)
    function void dev_deactivate(net_device*)
    function void dev_disable_lro(net_device*)
    function const char* dev_driver_string(const device*)
    function int dev_fill_metadata_dst(net_device*, sk_buff*)
    function int dev_forward_skb(net_device*, sk_buff*)
    function fwnode_handle* dev_fwnode(device*)
    function net_device* dev_get_by_index(net*, int)
    function net_device* dev_get_by_index_rcu(net*, int)
    function net_device* dev_get_by_name(net*, const char*)
    function net_device* dev_get_by_name_rcu(net*, const char*)
    function net_device* dev_get_by_napi_id(unsigned int)
    function unsigned int dev_get_flags(const net_device*)
    function int dev_get_iflink(const net_device*)
    function int dev_get_nest_level(net_device*)
    function int dev_get_phys_port_id(net_device*, netdev_phys_item_id*)
    function int dev_get_phys_port_name(net_device*, char*, size_t)
    function regmap* dev_get_regmap(device*, const char*)
    function rtnl_link_stats64* dev_get_stats(net_device*, rtnl_link_stats64*)
    function int dev_get_valid_name(net*, net_device*, const char*)
    function net_device* dev_getbyhwaddr_rcu(net*, unsigned short int, const char*)
    function net_device* dev_getfirstbyhwtype(net*, unsigned short int)
    function Qdisc* dev_graft_qdisc(netdev_queue*, Qdisc*)
    function int dev_loopback_xmit(net*, sock*, sk_buff*)
    function int dev_mc_add(net_device*, const unsigned char*)
    function int dev_mc_add_excl(net_device*, const unsigned char*)
    function int dev_mc_add_global(net_device*, const unsigned char*)
    function int dev_mc_del(net_device*, const unsigned char*)
    function int dev_mc_del_global(net_device*, const unsigned char*)
    function void dev_mc_flush(net_device*)
    function void dev_mc_init(net_device*)
    function int dev_mc_sync(net_device*, net_device*)
    function int dev_mc_sync_multiple(net_device*, net_device*)
    function void dev_mc_unsync(net_device*, net_device*)
    function int dev_open(net_device*)
    function u16 dev_pick_tx_cpu_id(net_device*, sk_buff*, net_device*, select_queue_fallback_t)
    function u16 dev_pick_tx_zero(net_device*, sk_buff*, net_device*, select_queue_fallback_t)
    function void dev_pm_clear_wake_irq(device*)
    function void dev_pm_disable_wake_irq(device*)
    function int dev_pm_domain_attach(device*, bool)
    function device* dev_pm_domain_attach_by_id(device*, unsigned int)
    function device* dev_pm_domain_attach_by_name(device*, char*)
    function void dev_pm_domain_detach(device*, bool)
    function void dev_pm_domain_set(device*, dev_pm_domain*)
    function void dev_pm_enable_wake_irq(device*)
    function int dev_pm_genpd_set_performance_state(device*, unsigned int)
    function int dev_pm_get_subsys_data(device*)
    function int dev_pm_opp_add(device*, unsigned long int, unsigned long int)
    function int dev_pm_opp_disable(device*, unsigned long int)
    function int dev_pm_opp_enable(device*, unsigned long int)
    function dev_pm_opp* dev_pm_opp_find_freq_ceil(device*, unsigned long int*)
    function dev_pm_opp* dev_pm_opp_find_freq_exact(device*, unsigned long int, bool)
    function dev_pm_opp* dev_pm_opp_find_freq_floor(device*, unsigned long int*)
    function void dev_pm_opp_free_cpufreq_table(device*, cpufreq_frequency_table**)
    function unsigned long int dev_pm_opp_get_freq(dev_pm_opp*)
    function unsigned long int dev_pm_opp_get_max_clock_latency(device*)
    function unsigned long int dev_pm_opp_get_max_transition_latency(device*)
    function unsigned long int dev_pm_opp_get_max_volt_latency(device*)
    function device_node* dev_pm_opp_get_of_node(dev_pm_opp*)
    function int dev_pm_opp_get_opp_count(device*)
    function opp_table* dev_pm_opp_get_opp_table(device*)
    function int dev_pm_opp_get_sharing_cpus(device*, cpumask*)
    function unsigned long int dev_pm_opp_get_suspend_opp_freq(device*)
    function unsigned long int dev_pm_opp_get_voltage(dev_pm_opp*)
    function int dev_pm_opp_init_cpufreq_table(device*, cpufreq_frequency_table**)
    function bool dev_pm_opp_is_turbo(dev_pm_opp*)
    function int dev_pm_opp_of_add_table(device*)
    function int dev_pm_opp_of_add_table_indexed(device*, int)
    function device_node* dev_pm_opp_of_get_opp_desc_node(device*)
    function int dev_pm_opp_of_get_sharing_cpus(device*, cpumask*)
    function void dev_pm_opp_of_remove_table(device*)
    function void dev_pm_opp_put(dev_pm_opp*)
    function void dev_pm_opp_put_clkname(opp_table*)
    function void dev_pm_opp_put_opp_table(opp_table*)
    function void dev_pm_opp_put_prop_name(opp_table*)
    function void dev_pm_opp_put_regulators(opp_table*)
    function void dev_pm_opp_put_supported_hw(opp_table*)
    function int dev_pm_opp_register_notifier(device*, notifier_block*)
    function opp_table* dev_pm_opp_register_set_opp_helper(device*, void ()*)
    function void dev_pm_opp_remove(device*, unsigned long int)
    function void dev_pm_opp_remove_table(device*)
    function opp_table* dev_pm_opp_set_clkname(device*, const char*)
    function opp_table* dev_pm_opp_set_prop_name(device*, const char*)
    function int dev_pm_opp_set_rate(device*, unsigned long int)
    function opp_table* dev_pm_opp_set_regulators(device*, const char* const*, unsigned int)
    function int dev_pm_opp_set_sharing_cpus(device*, const cpumask*)
    function opp_table* dev_pm_opp_set_supported_hw(device*, const u32*, unsigned int)
    function int dev_pm_opp_unregister_notifier(device*, notifier_block*)
    function void dev_pm_opp_unregister_set_opp_helper(opp_table*)
    function void dev_pm_put_subsys_data(device*)
    function int dev_pm_qos_add_ancestor_request(device*, dev_pm_qos_request*, dev_pm_qos_req_type, s32)
    function int dev_pm_qos_add_notifier(device*, notifier_block*)
    function int dev_pm_qos_add_request(device*, dev_pm_qos_request*, dev_pm_qos_req_type, s32)
    function int dev_pm_qos_expose_flags(device*, s32)
    function int dev_pm_qos_expose_latency_limit(device*, s32)
    function int dev_pm_qos_expose_latency_tolerance(device*)
    function pm_qos_flags_status dev_pm_qos_flags(device*, s32)
    function void dev_pm_qos_hide_flags(device*)
    function void dev_pm_qos_hide_latency_limit(device*)
    function void dev_pm_qos_hide_latency_tolerance(device*)
    function int dev_pm_qos_remove_notifier(device*, notifier_block*)
    function int dev_pm_qos_remove_request(dev_pm_qos_request*)
    function int dev_pm_qos_update_request(dev_pm_qos_request*, s32)
    function int dev_pm_qos_update_user_latency_tolerance(device*, s32)
    function int dev_pm_set_dedicated_wake_irq(device*, int)
    function int dev_pm_set_wake_irq(device*, int)
    function void dev_printk(const char*, const device*, const char*, ...)
    function int dev_printk_emit(int, const device*, const char*, ...)
    function int dev_queue_xmit_accel(sk_buff*, net_device*)
    function void dev_queue_xmit_nit(sk_buff*, net_device*)
    function void dev_remove_pack(packet_type*)
    function int dev_set_alias(net_device*, const char*, size_t)
    function int dev_set_allmulti(net_device*, int)
    function void dev_set_group(net_device*, int)
    function int dev_set_mac_address(net_device*, sockaddr*)
    function int dev_set_mtu(net_device*, int)
    function int dev_set_name(device*, const char*, ...)
    function int dev_set_promiscuity(net_device*, int)
    function unsigned long int dev_trans_start(net_device*)
    function int dev_uc_add(net_device*, const unsigned char*)
    function int dev_uc_add_excl(net_device*, const unsigned char*)
    function int dev_uc_del(net_device*, const unsigned char*)
    function void dev_uc_flush(net_device*)
    function void dev_uc_init(net_device*)
    function int dev_uc_sync(net_device*, net_device*)
    function int dev_uc_sync_multiple(net_device*, net_device*)
    function void dev_uc_unsync(net_device*, net_device*)
    function int dev_vprintk_emit(int, const device*, const char*, va_list)
    function devfreq* devfreq_add_device(device*, devfreq_dev_profile*, const char*, void*)
    function thermal_cooling_device* devfreq_cooling_register(devfreq*)
    function void devfreq_cooling_unregister(thermal_cooling_device*)
    function devfreq* devfreq_get_devfreq_by_phandle(device*, int)
    function void devfreq_interval_update(devfreq*, unsigned int*)
    function void devfreq_monitor_resume(devfreq*)
    function void devfreq_monitor_start(devfreq*)
    function void devfreq_monitor_stop(devfreq*)
    function void devfreq_monitor_suspend(devfreq*)
    function dev_pm_opp* devfreq_recommended_opp(device*, unsigned long int*, u32)
    function int devfreq_register_notifier(devfreq*, notifier_block*, unsigned int)
    function int devfreq_register_opp_notifier(device*, devfreq*)
    function int devfreq_remove_device(devfreq*)
    function int devfreq_resume_device(devfreq*)
    function int devfreq_suspend_device(devfreq*)
    function int devfreq_unregister_notifier(devfreq*, notifier_block*, unsigned int)
    function int devfreq_unregister_opp_notifier(device*, devfreq*)
    function int devfreq_update_status(devfreq*, unsigned long int)
    function int device_add(device*)
    function void device_add_disk(device*, gendisk*)
    function void device_add_disk_no_queue_reg(device*, gendisk*)
    function int device_add_groups(device*, const attribute_group**)
    function int device_add_properties(device*, const property_entry*)
    function int device_attach(device*)
    function int device_bind_driver(device*)
    function device* device_connection_find(device*, const char*)
    function void* device_connection_find_match(device*, const char*, void*, void ()*)
    function device* device_create(class*, device*, dev_t, void*, const char*, ...)
    function int device_create_bin_file(device*, const bin_attribute*)
    function int device_create_file(device*, const device_attribute*)
    function device* device_create_vargs(class*, device*, dev_t, void*, const char*, va_list)
    function device* device_create_with_groups(class*, device*, dev_t, void*, const attribute_group**, const char*, ...)
    function void device_del(device*)
    function void device_destroy(class*, dev_t)
    function bool device_dma_supported(device*)
    function device* device_find_child(device*, void*, void ()*)
    function int device_for_each_child(device*, void*, void ()*)
    function int device_for_each_child_reverse(device*, void*, void ()*)
    function unsigned int device_get_child_node_count(device*)
    function dev_dma_attr device_get_dma_attr(device*)
    function void* device_get_mac_address(device*, char*, int)
    function void* device_get_match_data(device*)
    function fwnode_handle* device_get_named_child_node(device*, const char*)
    function fwnode_handle* device_get_next_child_node(device*, fwnode_handle*)
    function int device_get_phy_mode(device*)
    function int device_init_wakeup(device*, bool)
    function void device_initialize(device*)
    function device_link* device_link_add(device*, device*, u32)
    function void device_link_del(device_link*)
    function void device_link_remove(void*, device*)
    function int device_move(device*, device*, dpm_order)
    function int device_pm_wait_for_dev(device*, device*)
    function int device_property_match_string(device*, const char*, const char*)
    function bool device_property_present(device*, const char*)
    function int device_property_read_string(device*, const char*, const char**)
    function int device_property_read_string_array(device*, const char*, const char**, size_t)
    function int device_property_read_u16_array(device*, const char*, u16*, size_t)
    function int device_property_read_u32_array(device*, const char*, u32*, size_t)
    function int device_property_read_u64_array(device*, const char*, u64*, size_t)
    function int device_property_read_u8_array(device*, const char*, u8*, size_t)
    function int device_register(device*)
    function void device_release_driver(device*)
    function void device_remove_bin_file(device*, const bin_attribute*)
    function void device_remove_file(device*, const device_attribute*)
    function bool device_remove_file_self(device*, const device_attribute*)
    function void device_remove_groups(device*, const attribute_group**)
    function void device_remove_properties(device*)
    function int device_rename(device*, const char*)
    function int device_reprobe(device*)
    function void device_set_of_node_from_dev(device*, const device*)
    function void device_set_wakeup_capable(device*, bool)
    function int device_set_wakeup_enable(device*, bool)
    function ssize_t device_show_bool(device*, device_attribute*, char*)
    function ssize_t device_show_int(device*, device_attribute*, char*)
    function ssize_t device_show_ulong(device*, device_attribute*, char*)
    function ssize_t device_store_bool(device*, device_attribute*, const char*, size_t)
    function ssize_t device_store_int(device*, device_attribute*, const char*, size_t)
    function ssize_t device_store_ulong(device*, device_attribute*, const char*, size_t)
    function void device_unregister(device*)
    function int device_wakeup_disable(device*)
    function int device_wakeup_enable(device*)
    function int devm_add_action(device*, void ()*, void*)
    function net_device* devm_alloc_etherdev_mqs(device*, int, unsigned int, unsigned int)
    function int devm_clk_bulk_get(device*, int, clk_bulk_data*)
    function clk* devm_clk_get(device*, const char*)
    function int devm_clk_hw_register(device*, clk_hw*)
    function void devm_clk_hw_unregister(device*, clk_hw*)
    function void devm_clk_put(device*, clk*)
    function clk* devm_clk_register(device*, clk_hw*)
    function void devm_clk_unregister(device*, clk*)
    function devfreq* devm_devfreq_add_device(device*, devfreq_dev_profile*, const char*, void*)
    function int devm_devfreq_register_notifier(device*, devfreq*, notifier_block*, unsigned int)
    function int devm_devfreq_register_opp_notifier(device*, devfreq*)
    function void devm_devfreq_remove_device(device*, devfreq*)
    function void devm_devfreq_unregister_notifier(device*, devfreq*, notifier_block*, unsigned int)
    function void devm_devfreq_unregister_opp_notifier(device*, devfreq*)
    function int devm_device_add_group(device*, const attribute_group*)
    function int devm_device_add_groups(device*, const attribute_group**)
    function void devm_device_remove_group(device*, const attribute_group*)
    function void devm_device_remove_groups(device*, const attribute_group**)
    function drm_bridge* devm_drm_panel_bridge_add(device*, drm_panel*, u32)
    function extcon_dev* devm_extcon_dev_allocate(device*, const unsigned int*)
    function void devm_extcon_dev_free(device*, extcon_dev*)
    function int devm_extcon_dev_register(device*, extcon_dev*)
    function void devm_extcon_dev_unregister(device*, extcon_dev*)
    function int devm_extcon_register_notifier(device*, extcon_dev*, unsigned int, notifier_block*)
    function int devm_extcon_register_notifier_all(device*, extcon_dev*, notifier_block*)
    function void devm_extcon_unregister_notifier(device*, extcon_dev*, unsigned int, notifier_block*)
    function void devm_extcon_unregister_notifier_all(device*, extcon_dev*, notifier_block*)
    function void devm_free_irq(device*, unsigned int, void*)
    function void devm_free_pages(device*, unsigned long int)
    function void devm_free_percpu(device*, void*)
    function gpio_desc* devm_fwnode_get_index_gpiod_from_child(device*, const char*, int, fwnode_handle*, gpiod_flags, const char*)
    function gen_pool* devm_gen_pool_create(device*, int, int, const char*)
    function clk* devm_get_clk_from_child(device*, device_node*, const char*)
    function unsigned long int devm_get_free_pages(device*, gfp_t, unsigned int)
    function void devm_gpio_free(device*, unsigned int)
    function int devm_gpio_request(device*, unsigned int, const char*)
    function int devm_gpio_request_one(device*, unsigned int, unsigned long int, const char*)
    function int devm_gpiochip_add_data(device*, gpio_chip*, void*)
    function void devm_gpiochip_remove(device*, gpio_chip*)
    function gpio_desc* devm_gpiod_get(device*, const char*, gpiod_flags)
    function gpio_descs* devm_gpiod_get_array(device*, const char*, gpiod_flags)
    function gpio_descs* devm_gpiod_get_array_optional(device*, const char*, gpiod_flags)
    function gpio_desc* devm_gpiod_get_from_of_node(device*, device_node*, const char*, int, gpiod_flags, const char*)
    function gpio_desc* devm_gpiod_get_index(device*, const char*, unsigned int, gpiod_flags)
    function gpio_desc* devm_gpiod_get_index_optional(device*, const char*, unsigned int, gpiod_flags)
    function gpio_desc* devm_gpiod_get_optional(device*, const char*, gpiod_flags)
    function void devm_gpiod_put(device*, gpio_desc*)
    function void devm_gpiod_put_array(device*, gpio_descs*)
    function int devm_hwrng_register(device*, hwrng*)
    function void devm_hwrng_unregister(device*, hwrng*)
    function int devm_hwspin_lock_free(device*, hwspinlock*)
    function int devm_hwspin_lock_register(device*, hwspinlock_device*, const hwspinlock_ops*, int, int)
    function hwspinlock* devm_hwspin_lock_request(device*)
    function hwspinlock* devm_hwspin_lock_request_specific(device*, unsigned int)
    function int devm_hwspin_lock_unregister(device*, hwspinlock_device*)
    function iio_channel* devm_iio_channel_get(device*, const char*)
    function iio_channel* devm_iio_channel_get_all(device*)
    function void devm_iio_channel_release(device*, iio_channel*)
    function void devm_iio_channel_release_all(device*, iio_channel*)
    function iio_dev* devm_iio_device_alloc(device*, int)
    function void devm_iio_device_free(device*, iio_dev*)
    function int devm_iio_device_match(device*, void*, void*)
    function void devm_iio_device_unregister(device*, iio_dev*)
    function int devm_init_badblocks(device*, badblocks*)
    function input_dev* devm_input_allocate_device(device*)
    function void* devm_ioport_map(device*, unsigned long int, unsigned int)
    function void devm_ioport_unmap(device*, void*)
    function void* devm_ioremap(device*, resource_size_t, resource_size_t)
    function void* devm_ioremap_nocache(device*, resource_size_t, resource_size_t)
    function void* devm_ioremap_resource(device*, resource*)
    function void* devm_ioremap_wc(device*, resource_size_t, resource_size_t)
    function void devm_iounmap(device*, void*)
    function char* devm_kasprintf(device*, gfp_t, const char*, ...)
    function void devm_kfree(device*, void*)
    function void* devm_kmalloc(device*, size_t, gfp_t)
    function void* devm_kmemdup(device*, void*, size_t, gfp_t)
    function char* devm_kstrdup(device*, const char*, gfp_t)
    function char* devm_kvasprintf(device*, gfp_t, const char*, va_list)
    function void devm_led_classdev_unregister(device*, led_classdev*)
    function int devm_led_trigger_register(device*, led_trigger*)
    function mii_bus* devm_mdiobus_alloc_size(device*, int)
    function void devm_mdiobus_free(device*, mii_bus*)
    function void* devm_memremap(device*, resource_size_t, size_t, unsigned long int)
    function void devm_memunmap(device*, void*)
    function int devm_mfd_add_devices(device*, int, const mfd_cell*, int, resource*, int, irq_domain*)
    function nvmem_cell* devm_nvmem_cell_get(device*, const char*)
    function void devm_nvmem_cell_put(device*, nvmem_cell*)
    function nvmem_device* devm_nvmem_device_get(device*, const char*)
    function void devm_nvmem_device_put(device*, nvmem_device*)
    function nvmem_device* devm_nvmem_register(device*, const nvmem_config*)
    function int devm_nvmem_unregister(device*, nvmem_device*)
    function int devm_of_clk_add_hw_provider(device*, void ()*, void*)
    function void devm_of_clk_del_provider(device*)
    function void* devm_of_iomap(device*, device_node*, int, resource_size_t*)
    function int devm_of_led_classdev_register(device*, device_node*, led_classdev*)
    function int devm_of_pci_get_host_bridge_resources(device*, unsigned char, unsigned char, list_head*, resource_size_t*)
    function phy* devm_of_phy_get(device*, device_node*, const char*)
    function phy* devm_of_phy_get_by_index(device*, device_node*, int)
    function void devm_of_phy_provider_unregister(device*, phy_provider*)
    function void devm_of_platform_depopulate(device*)
    function int devm_of_platform_populate(device*)
    function pwm_device* devm_of_pwm_get(device*, device_node*, const char*)
    function pci_host_bridge* devm_pci_alloc_host_bridge(device*, size_t)
    function void* devm_pci_remap_cfg_resource(device*, resource*)
    function void* devm_pci_remap_cfgspace(device*, resource_size_t, resource_size_t)
    function int devm_pci_remap_iospace(device*, const resource*, phys_addr_t)
    function phy* devm_phy_create(device*, device_node*, const phy_ops*)
    function void devm_phy_destroy(device*, phy*)
    function phy* devm_phy_get(device*, const char*)
    function phy* devm_phy_optional_get(device*, const char*)
    function void devm_phy_put(device*, phy*)
    function pinctrl* devm_pinctrl_get(device*)
    function void devm_pinctrl_put(pinctrl*)
    function pinctrl_dev* devm_pinctrl_register(device*, pinctrl_desc*, void*)
    function int devm_pinctrl_register_and_init(device*, pinctrl_desc*, void*, pinctrl_dev**)
    function void devm_pinctrl_unregister(device*, pinctrl_dev*)
    function power_supply* devm_power_supply_get_by_phandle(device*, const char*)
    function power_supply* devm_power_supply_register(device*, const power_supply_desc*, const power_supply_config*)
    function power_supply* devm_power_supply_register_no_ws(device*, const power_supply_desc*, const power_supply_config*)
    function pwm_device* devm_pwm_get(device*, const char*)
    function void devm_pwm_put(device*, pwm_device*)
    function int devm_register_reboot_notifier(device*, notifier_block*)
    function int devm_regmap_add_irq_chip(device*, regmap*, int, int, int, const regmap_irq_chip*, regmap_irq_chip_data**)
    function void devm_regmap_del_irq_chip(device*, int, regmap_irq_chip_data*)
    function regmap_field* devm_regmap_field_alloc(device*, regmap*, reg_field)
    function void devm_regmap_field_free(device*, regmap_field*)
    function int devm_regulator_bulk_get(device*, int, regulator_bulk_data*)
    function int devm_regulator_bulk_register_supply_alias(device*, const char* const*, device*, const char* const*, int)
    function void devm_regulator_bulk_unregister_supply_alias(device*, const char* const*, int)
    function regulator* devm_regulator_get(device*, const char*)
    function regulator* devm_regulator_get_exclusive(device*, const char*)
    function regulator* devm_regulator_get_optional(device*, const char*)
    function void devm_regulator_put(regulator*)
    function regulator_dev* devm_regulator_register(device*, const regulator_desc*, const regulator_config*)
    function int devm_regulator_register_notifier(regulator*, notifier_block*)
    function int devm_regulator_register_supply_alias(device*, const char*, device*, const char*)
    function void devm_regulator_unregister(device*, regulator_dev*)
    function void devm_regulator_unregister_notifier(regulator*, notifier_block*)
    function void devm_regulator_unregister_supply_alias(device*, const char*)
    function void devm_release_resource(device*, resource*)
    function void devm_remove_action(device*, void ()*, void*)
    function int devm_request_any_context_irq(device*, unsigned int, irq_handler_t, unsigned long int, const char*, void*)
    function int devm_request_pci_bus_resources(device*, list_head*)
    function int devm_request_resource(device*, resource*, resource*)
    function int devm_request_threaded_irq(device*, unsigned int, irq_handler_t, irq_handler_t, unsigned long int, const char*, void*)
    function reset_control* devm_reset_control_array_get(device*, bool, bool)
    function int devm_reset_controller_register(device*, reset_controller_dev*)
    function rtc_device* devm_rtc_allocate_device(device*)
    function rtc_device* devm_rtc_device_register(device*, const char*, const rtc_class_ops*, module*)
    function void devm_rtc_device_unregister(device*, rtc_device*)
    function int devm_serdev_device_open(device*, serdev_device*)
    function int devm_snd_dmaengine_pcm_register(device*, const snd_dmaengine_pcm_config*, unsigned int)
    function int devm_snd_soc_register_card(device*, snd_soc_card*)
    function int devm_snd_soc_register_component(device*, const snd_soc_component_driver*, snd_soc_dai_driver*, int)
    function int devm_spi_register_controller(device*, spi_controller*)
    function thermal_zone_device* devm_thermal_zone_of_sensor_register(device*, int, void*, const thermal_zone_of_device_ops*)
    function void devm_thermal_zone_of_sensor_unregister(device*, thermal_zone_device*)
    function usb_phy* devm_usb_get_phy(device*, usb_phy_type)
    function usb_phy* devm_usb_get_phy_by_node(device*, device_node*, notifier_block*)
    function usb_phy* devm_usb_get_phy_by_phandle(device*, const char*, u8)
    function void devm_usb_put_phy(device*, usb_phy*)
    function int devm_watchdog_register_device(device*, watchdog_device*)
    function void devres_add(device*, void*)
    function void devres_close_group(device*, void*)
    function int devres_destroy(device*, dr_release_t, dr_match_t, void*)
    function void* devres_find(device*, dr_release_t, dr_match_t, void*)
    function void devres_for_each_res(device*, dr_release_t, dr_match_t, void*, void ()*, void*)
    function void* devres_get(device*, void*, dr_match_t, void*)
    function void* devres_open_group(device*, void*, gfp_t)
    function int devres_release(device*, dr_release_t, dr_match_t, void*)
    function int devres_release_group(device*, void*)
    function void* devres_remove(device*, dr_release_t, dr_match_t, void*)
    function void devres_remove_group(device*, void*)
    function dentry* dget_parent(dentry*)
    function void dio_end_io(bio*)
    function blk_qc_t direct_make_request(bio*)
    function void discard_new_inode(inode*)
    function hd_struct* disk_get_part(gendisk*, int)
    function hd_struct* disk_map_sector_rcu(gendisk*, sector_t)
    function void disk_part_iter_exit(disk_part_iter*)
    function void disk_part_iter_init(disk_part_iter*, gendisk*, unsigned int)
    function hd_struct* disk_part_iter_next(disk_part_iter*)
    function void disk_stack_limits(gendisk*, block_device*, sector_t)
    function void dm_accept_partial_bio(bio*, unsigned int)
    function bio* dm_bio_from_per_bio_data(void*, size_t)
    function unsigned int dm_bio_get_target_bio_nr(const bio*)
    function dm_bufio_client* dm_bufio_client_create(block_device*, unsigned int, unsigned int, unsigned int, void ()*, void ()*)
    function void dm_bufio_client_destroy(dm_bufio_client*)
    function void dm_bufio_forget(dm_bufio_client*, sector_t)
    function void* dm_bufio_get(dm_bufio_client*, sector_t, dm_buffer**)
    function void* dm_bufio_get_aux_data(dm_buffer*)
    function void* dm_bufio_get_block_data(dm_buffer*)
    function sector_t dm_bufio_get_block_number(dm_buffer*)
    function unsigned int dm_bufio_get_block_size(dm_bufio_client*)
    function dm_bufio_client* dm_bufio_get_client(dm_buffer*)
    function sector_t dm_bufio_get_device_size(dm_bufio_client*)
    function int dm_bufio_issue_flush(dm_bufio_client*)
    function void dm_bufio_mark_buffer_dirty(dm_buffer*)
    function void dm_bufio_mark_partial_buffer_dirty(dm_buffer*, unsigned int, unsigned int)
    function void* dm_bufio_new(dm_bufio_client*, sector_t, dm_buffer**)
    function void dm_bufio_prefetch(dm_bufio_client*, sector_t, unsigned int)
    function void* dm_bufio_read(dm_bufio_client*, sector_t, dm_buffer**)
    function void dm_bufio_release(dm_buffer*)
    function void dm_bufio_release_move(dm_buffer*, sector_t)
    function void dm_bufio_set_minimum_buffers(dm_bufio_client*, unsigned int)
    function void dm_bufio_set_sector_offset(dm_bufio_client*, sector_t)
    function int dm_bufio_write_dirty_buffers(dm_bufio_client*)
    function void dm_bufio_write_dirty_buffers_async(dm_bufio_client*)
    function const char* dm_device_name(mapped_device*)
    function gendisk* dm_disk(mapped_device*)
    function int dm_exception_store_create(dm_target*, int, char**, dm_snapshot*, unsigned int*, dm_exception_store**)
    function void dm_exception_store_destroy(dm_exception_store*)
    function int dm_exception_store_type_register(dm_exception_store_type*)
    function int dm_exception_store_type_unregister(dm_exception_store_type*)
    function int dm_get_device(dm_target*, const char*, fmode_t, dm_dev**)
    function mapped_device* dm_get_md(dev_t)
    function queue_limits* dm_get_queue_limits(mapped_device*)
    function int dm_get_table_device(mapped_device*, dev_t, fmode_t, dm_dev**)
    function int dm_hold(mapped_device*)
    function void dm_internal_resume(mapped_device*)
    function void dm_internal_resume_fast(mapped_device*)
    function void dm_internal_suspend_fast(mapped_device*)
    function void dm_internal_suspend_noflush(mapped_device*)
    function int dm_io(dm_io_request*, unsigned int, dm_io_region*, unsigned long int*)
    function dm_io_client* dm_io_client_create()
    function void dm_io_client_destroy(dm_io_client*)
    function dm_kcopyd_client* dm_kcopyd_client_create(dm_kcopyd_throttle*)
    function void dm_kcopyd_client_destroy(dm_kcopyd_client*)
    function void dm_kcopyd_copy(dm_kcopyd_client*, dm_io_region*, unsigned int, dm_io_region*, unsigned int, dm_kcopyd_notify_fn, void*)
    function void* dm_kcopyd_prepare_callback(dm_kcopyd_client*, dm_kcopyd_notify_fn, void*)
    function void dm_kcopyd_zero(dm_kcopyd_client*, unsigned int, dm_io_region*, unsigned int, dm_kcopyd_notify_fn, void*)
    function void dm_kobject_release(kobject*)
    function void dm_mq_kick_requeue_list(mapped_device*)
    function int dm_noflush_suspending(dm_target*)
    function void dm_path_uevent(dm_uevent_type, dm_target*, const char*, unsigned int)
    function void* dm_per_bio_data(bio*, size_t)
    function void dm_put(mapped_device*)
    function void dm_put_device(dm_target*, dm_dev*)
    function void dm_put_table_device(mapped_device*, dm_dev*)
    function int dm_register_target(target_type*)
    function void dm_remap_zone_report(dm_target*, bio*, sector_t)
    function void dm_send_uevents(list_head*, kobject*)
    function int dm_set_target_max_io_len(dm_target*, sector_t)
    function dm_dev* dm_snap_cow(dm_snapshot*)
    function dm_dev* dm_snap_origin(dm_snapshot*)
    function int dm_suspended(dm_target*)
    function mapped_device* dm_table_get_md(dm_table*)
    function void dm_unregister_target(target_type*)
    function bool dm_use_blk_mq(mapped_device*)
    function int dma_alloc_from_dev_coherent(device*, ssize_t, dma_addr_t*, void**)
    function int dma_async_device_register(dma_device*)
    function void dma_async_device_unregister(dma_device*)
    function void dma_async_tx_descriptor_init(dma_async_tx_descriptor*, dma_chan*)
    function dma_buf_attachment* dma_buf_attach(dma_buf*, device*)
    function int dma_buf_begin_cpu_access(dma_buf*, dma_data_direction)
    function void dma_buf_detach(dma_buf*, dma_buf_attachment*)
    function int dma_buf_end_cpu_access(dma_buf*, dma_data_direction)
    function dma_buf* dma_buf_export(const dma_buf_export_info*)
    function int dma_buf_fd(dma_buf*, int)
    function dma_buf* dma_buf_get(int)
    function void* dma_buf_kmap(dma_buf*, unsigned long int)
    function void dma_buf_kunmap(dma_buf*, unsigned long int, void*)
    function sg_table* dma_buf_map_attachment(dma_buf_attachment*, dma_data_direction)
    function int dma_buf_mmap(dma_buf*, vm_area_struct*, unsigned long int)
    function void dma_buf_put(dma_buf*)
    function void dma_buf_unmap_attachment(dma_buf_attachment*, sg_table*, dma_data_direction)
    function void* dma_buf_vmap(dma_buf*)
    function void dma_buf_vunmap(dma_buf*, void*)
    function int dma_common_get_sgtable(device*, sg_table*, void*, dma_addr_t, size_t)
    function int dma_common_mmap(device*, vm_area_struct*, void*, dma_addr_t, size_t)
    function int dma_declare_coherent_memory(device*, phys_addr_t, dma_addr_t, size_t, int)
    function dma_chan* dma_find_channel(dma_transaction_type)
    function dma_chan* dma_get_any_slave_channel(dma_device*)
    function u64 dma_get_required_mask(device*)
    function int dma_get_slave_caps(dma_chan*, dma_slave_caps*)
    function dma_chan* dma_get_slave_channel(dma_chan*)
    function void* dma_mark_declared_memory_occupied(device*, dma_addr_t, size_t)
    function int dma_mmap_from_dev_coherent(device*, vm_area_struct*, void*, size_t, int*)
    function void* dma_pool_alloc(dma_pool*, gfp_t, dma_addr_t*)
    function dma_pool* dma_pool_create(const char*, device*, size_t, size_t, size_t)
    function void dma_pool_destroy(dma_pool*)
    function void dma_pool_free(dma_pool*, void*, dma_addr_t)
    function void dma_release_channel(dma_chan*)
    function void dma_release_declared_memory(device*)
    function int dma_release_from_dev_coherent(device*, int, void*)
    function dma_chan* dma_request_chan(device*, const char*)
    function dma_chan* dma_request_chan_by_mask(const dma_cap_mask_t*)
    function dma_chan* dma_request_slave_channel(device*, const char*)
    function void dma_run_dependencies(dma_async_tx_descriptor*)
    function dma_status dma_sync_wait(dma_chan*, dma_cookie_t)
    function dma_status dma_wait_for_async_tx(dma_async_tx_descriptor*)
    function dmaengine_unmap_data* dmaengine_get_unmap_data(device*, int, gfp_t)
    function void dmaengine_unmap_put(dmaengine_unmap_data*)
    function int dmaenginem_async_device_register(dma_device*)
    function void* dmam_alloc_attrs(device*, size_t, dma_addr_t*, gfp_t, unsigned long int)
    function void* dmam_alloc_coherent(device*, size_t, dma_addr_t*, gfp_t)
    function int dmam_declare_coherent_memory(device*, phys_addr_t, dma_addr_t, size_t, int)
    function void dmam_free_coherent(device*, size_t, void*, dma_addr_t)
    function dma_pool* dmam_pool_create(const char*, device*, size_t, size_t, size_t)
    function void dmam_pool_destroy(dma_pool*)
    function void dmam_release_declared_memory(device*)
    function void do_SAK(tty_struct*)
    function int do_clone_file_range(file*, loff_t, file*, loff_t, u64)
    function long int do_splice_direct(file*, loff_t*, file*, loff_t*, size_t, unsigned int)
    function ssize_t do_tcp_sendpages(sock*, page*, int, size_t, int)
    function void done_path_create(path*, dentry*)
    function int dpcm_be_dai_trigger(snd_soc_pcm_runtime*, int, int)
    function void dpm_for_each_dev(void*, void ()*)
    function void dput(dentry*)
    function dquot* dqget(super_block*, kqid)
    function void dqput(dquot*)
    function int dquot_acquire(dquot*)
    function dquot* dquot_alloc(super_block*, int)
    function int dquot_alloc_inode(inode*)
    function int dquot_claim_space_nodirty(inode*, qsize_t)
    function int dquot_commit(dquot*)
    function int dquot_commit_info(super_block*, int)
    function void dquot_destroy(dquot*)
    function int dquot_disable(super_block*, int, unsigned int)
    function void dquot_drop(inode*)
    function int dquot_enable(inode*, int, int, unsigned int)
    function int dquot_file_open(inode*, file*)
    function void dquot_free_inode(inode*)
    function int dquot_get_dqblk(super_block*, kqid, qc_dqblk*)
    function int dquot_get_next_dqblk(super_block*, kqid*, qc_dqblk*)
    function int dquot_get_next_id(super_block*, kqid*)
    function int dquot_get_state(super_block*, qc_state*)
    function int dquot_initialize(inode*)
    function bool dquot_initialize_needed(inode*)
    function int dquot_mark_dquot_dirty(dquot*)
    function int dquot_quota_off(super_block*, int)
    function int dquot_quota_on(super_block*, int, int, const path*)
    function int dquot_quota_on_mount(super_block*, char*, int, int)
    function int dquot_quota_sync(super_block*, int)
    function void dquot_reclaim_space_nodirty(inode*, qsize_t)
    function int dquot_release(dquot*)
    function int dquot_resume(super_block*, int)
    function int dquot_scan_active(super_block*, void ()*, unsigned long int)
    function int dquot_set_dqblk(super_block*, kqid, qc_dqblk*)
    function int dquot_set_dqinfo(super_block*, int, qc_info*)
    function int dquot_transfer(inode*, iattr*)
    function int dquot_writeback_dquots(super_block*, int)
    function int driver_attach(device_driver*)
    function int driver_create_file(device_driver*, const driver_attribute*)
    function device_driver* driver_find(const char*, bus_type*)
    function device* driver_find_device(device_driver*, device*, void*, void ()*)
    function int driver_for_each_device(device_driver*, device*, void*, void ()*)
    function int driver_register(device_driver*)
    function void driver_remove_file(device_driver*, const driver_attribute*)
    function void driver_unregister(device_driver*)
    function int drm_add_edid_modes(drm_connector*, edid*)
    function int drm_add_modes_noedid(drm_connector*, int, int)
    function int drm_add_override_edid_modes(drm_connector*)
    function int drm_ati_pcigart_cleanup(drm_device*, drm_ati_pcigart_info*)
    function int drm_ati_pcigart_init(drm_device*, drm_ati_pcigart_info*)
    function int drm_atomic_add_affected_connectors(drm_atomic_state*, drm_crtc*)
    function int drm_atomic_add_affected_planes(drm_atomic_state*, drm_crtc*)
    function int drm_atomic_check_only(drm_atomic_state*)
    function int drm_atomic_commit(drm_atomic_state*)
    function int drm_atomic_crtc_set_property(drm_crtc*, drm_crtc_state*, drm_property*, uint64_t)
    function drm_connector_state* drm_atomic_get_connector_state(drm_atomic_state*, drm_connector*)
    function drm_crtc_state* drm_atomic_get_crtc_state(drm_atomic_state*, drm_crtc*)
    function drm_dp_mst_topology_state* drm_atomic_get_mst_topology_state(drm_atomic_state*, drm_dp_mst_topology_mgr*)
    function drm_plane_state* drm_atomic_get_plane_state(drm_atomic_state*, drm_plane*)
    function drm_private_state* drm_atomic_get_private_obj_state(drm_atomic_state*, drm_private_obj*)
    function int drm_atomic_helper_async_check(drm_device*, drm_atomic_state*)
    function void drm_atomic_helper_async_commit(drm_device*, drm_atomic_state*)
    function drm_encoder* drm_atomic_helper_best_encoder(drm_connector*)
    function int drm_atomic_helper_check(drm_device*, drm_atomic_state*)
    function int drm_atomic_helper_check_modeset(drm_device*, drm_atomic_state*)
    function int drm_atomic_helper_check_plane_state(drm_plane_state*, const drm_crtc_state*, int, int, bool, bool)
    function int drm_atomic_helper_check_planes(drm_device*, drm_atomic_state*)
    function void drm_atomic_helper_cleanup_planes(drm_device*, drm_atomic_state*)
    function int drm_atomic_helper_commit(drm_device*, drm_atomic_state*, bool)
    function void drm_atomic_helper_commit_cleanup_done(drm_atomic_state*)
    function int drm_atomic_helper_commit_duplicated_state(drm_atomic_state*, drm_modeset_acquire_ctx*)
    function void drm_atomic_helper_commit_hw_done(drm_atomic_state*)
    function void drm_atomic_helper_commit_modeset_disables(drm_device*, drm_atomic_state*)
    function void drm_atomic_helper_commit_modeset_enables(drm_device*, drm_atomic_state*)
    function void drm_atomic_helper_commit_planes(drm_device*, drm_atomic_state*, uint32_t)
    function void drm_atomic_helper_commit_planes_on_crtc(drm_crtc_state*)
    function void drm_atomic_helper_commit_tail(drm_atomic_state*)
    function void drm_atomic_helper_commit_tail_rpm(drm_atomic_state*)
    function void drm_atomic_helper_connector_destroy_state(drm_connector*, drm_connector_state*)
    function drm_connector_state* drm_atomic_helper_connector_duplicate_state(drm_connector*)
    function void drm_atomic_helper_connector_reset(drm_connector*)
    function void drm_atomic_helper_crtc_destroy_state(drm_crtc*, drm_crtc_state*)
    function drm_crtc_state* drm_atomic_helper_crtc_duplicate_state(drm_crtc*)
    function void drm_atomic_helper_crtc_reset(drm_crtc*)
    function int drm_atomic_helper_disable_all(drm_device*, drm_modeset_acquire_ctx*)
    function int drm_atomic_helper_disable_plane(drm_plane*, drm_modeset_acquire_ctx*)
    function void drm_atomic_helper_disable_planes_on_crtc(drm_crtc_state*, bool)
    function drm_atomic_state* drm_atomic_helper_duplicate_state(drm_device*, drm_modeset_acquire_ctx*)
    function void drm_atomic_helper_fake_vblank(drm_atomic_state*)
    function int drm_atomic_helper_legacy_gamma_set(drm_crtc*, u16*, u16*, u16*, uint32_t, drm_modeset_acquire_ctx*)
    function int drm_atomic_helper_page_flip(drm_crtc*, drm_framebuffer*, drm_pending_vblank_event*, uint32_t, drm_modeset_acquire_ctx*)
    function int drm_atomic_helper_page_flip_target(drm_crtc*, drm_framebuffer*, drm_pending_vblank_event*, uint32_t, uint32_t, drm_modeset_acquire_ctx*)
    function void drm_atomic_helper_plane_destroy_state(drm_plane*, drm_plane_state*)
    function drm_plane_state* drm_atomic_helper_plane_duplicate_state(drm_plane*)
    function void drm_atomic_helper_plane_reset(drm_plane*)
    function int drm_atomic_helper_prepare_planes(drm_device*, drm_atomic_state*)
    function int drm_atomic_helper_resume(drm_device*, drm_atomic_state*)
    function int drm_atomic_helper_set_config(drm_mode_set*, drm_modeset_acquire_ctx*)
    function int drm_atomic_helper_setup_commit(drm_atomic_state*, bool)
    function void drm_atomic_helper_shutdown(drm_device*)
    function drm_atomic_state* drm_atomic_helper_suspend(drm_device*)
    function int drm_atomic_helper_swap_state(drm_atomic_state*, bool)
    function void drm_atomic_helper_update_legacy_modeset_state(drm_device*, drm_atomic_state*)
    function int drm_atomic_helper_update_plane(drm_plane*, drm_crtc*, drm_framebuffer*, int, int, unsigned int, unsigned int, uint32_t, uint32_t, uint32_t, uint32_t, drm_modeset_acquire_ctx*)
    function void drm_atomic_helper_wait_for_dependencies(drm_atomic_state*)
    function int drm_atomic_helper_wait_for_fences(drm_device*, drm_atomic_state*, bool)
    function void drm_atomic_helper_wait_for_flip_done(drm_device*, drm_atomic_state*)
    function void drm_atomic_helper_wait_for_vblanks(drm_device*, drm_atomic_state*)
    function int drm_atomic_nonblocking_commit(drm_atomic_state*)
    function int drm_atomic_normalize_zpos(drm_device*, drm_atomic_state*)
    function void drm_atomic_private_obj_fini(drm_private_obj*)
    function void drm_atomic_private_obj_init(drm_private_obj*, drm_private_state*, const drm_private_state_funcs*)
    function int drm_atomic_set_crtc_for_connector(drm_connector_state*, drm_crtc*)
    function int drm_atomic_set_crtc_for_plane(drm_plane_state*, drm_crtc*)
    function void drm_atomic_set_fb_for_plane(drm_plane_state*, drm_framebuffer*)
    function void drm_atomic_set_fence_for_plane(drm_plane_state*, dma_fence*)
    function int drm_atomic_set_mode_for_crtc(drm_crtc_state*, const drm_display_mode*)
    function int drm_atomic_set_mode_prop_for_crtc(drm_crtc_state*, drm_property_blob*)
    function int drm_atomic_set_writeback_fb_for_connector(drm_connector_state*, drm_framebuffer*)
    function drm_atomic_state* drm_atomic_state_alloc(drm_device*)
    function void drm_atomic_state_clear(drm_atomic_state*)
    function void drm_atomic_state_default_clear(drm_atomic_state*)
    function void drm_atomic_state_default_release(drm_atomic_state*)
    function int drm_atomic_state_init(drm_device*, drm_atomic_state*)
    function int drm_av_sync_delay(drm_connector*, const drm_display_mode*)
    function void drm_bridge_add(drm_bridge*)
    function int drm_bridge_attach(drm_encoder*, drm_bridge*, drm_bridge*)
    function void drm_bridge_disable(drm_bridge*)
    function void drm_bridge_enable(drm_bridge*)
    function bool drm_bridge_mode_fixup(drm_bridge*, const drm_display_mode*, drm_display_mode*)
    function void drm_bridge_mode_set(drm_bridge*, drm_display_mode*, drm_display_mode*)
    function drm_mode_status drm_bridge_mode_valid(drm_bridge*, const drm_display_mode*)
    function void drm_bridge_post_disable(drm_bridge*)
    function void drm_bridge_pre_enable(drm_bridge*)
    function void drm_bridge_remove(drm_bridge*)
    function void drm_calc_timestamping_constants(drm_crtc*, const drm_display_mode*)
    function bool drm_calc_vbltimestamp_from_scanoutpos(drm_device*, unsigned int, int*, ktime_t*, bool)
    function int drm_class_device_register(device*)
    function void drm_class_device_unregister(device*)
    function void drm_client_add(drm_client_dev*)
    function void drm_client_dev_hotplug(drm_device*)
    function drm_client_buffer* drm_client_framebuffer_create(drm_client_dev*, u32, u32, u32)
    function void drm_client_framebuffer_delete(drm_client_buffer*)
    function int drm_client_init(drm_device*, drm_client_dev*, const char*, const drm_client_funcs*)
    function void drm_client_release(drm_client_dev*)
    function long int drm_compat_ioctl(file*, unsigned int, unsigned long int)
    function int drm_connector_attach_content_protection_property(drm_connector*)
    function int drm_connector_attach_content_type_property(drm_connector*)
    function void drm_connector_attach_edid_property(drm_connector*)
    function int drm_connector_attach_encoder(drm_connector*, drm_encoder*)
    function int drm_connector_attach_scaling_mode_property(drm_connector*, u32)
    function void drm_connector_cleanup(drm_connector*)
    function bool drm_connector_has_possible_encoder(drm_connector*, drm_encoder*)
    function int drm_connector_init(drm_device*, drm_connector*, const drm_connector_funcs*, int)
    function int drm_connector_init_panel_orientation_property(drm_connector*, int, int)
    function void drm_connector_list_iter_begin(drm_device*, drm_connector_list_iter*)
    function void drm_connector_list_iter_end(drm_connector_list_iter*)
    function drm_connector* drm_connector_list_iter_next(drm_connector_list_iter*)
    function void drm_connector_list_update(drm_connector*)
    function int drm_connector_register(drm_connector*)
    function void drm_connector_set_link_status_property(drm_connector*, uint64_t)
    function int drm_connector_set_path_property(drm_connector*, const char*)
    function int drm_connector_set_tile_property(drm_connector*)
    function void drm_connector_unregister(drm_connector*)
    function int drm_connector_update_edid_property(drm_connector*, const edid*)
    function u64 drm_crtc_accurate_vblank_count(drm_crtc*)
    function int drm_crtc_add_crc_entry(drm_crtc*, bool, uint32_t, uint32_t*)
    function void drm_crtc_arm_vblank_event(drm_crtc*, drm_pending_vblank_event*)
    function int drm_crtc_check_viewport(const drm_crtc*, int, int, const drm_display_mode*, const drm_framebuffer*)
    function void drm_crtc_cleanup(drm_crtc*)
    function void drm_crtc_enable_color_mgmt(drm_crtc*, uint, bool, uint)
    function int drm_crtc_force_disable(drm_crtc*)
    function int drm_crtc_force_disable_all(drm_device*)
    function drm_crtc* drm_crtc_from_index(drm_device*, int)
    function bool drm_crtc_handle_vblank(drm_crtc*)
    function int drm_crtc_helper_set_config(drm_mode_set*, drm_modeset_acquire_ctx*)
    function bool drm_crtc_helper_set_mode(drm_crtc*, drm_display_mode*, int, int, drm_framebuffer*)
    function int drm_crtc_init(drm_device*, drm_crtc*, const drm_crtc_funcs*)
    function int drm_crtc_init_with_planes(drm_device*, drm_crtc*, drm_plane*, drm_plane*, const drm_crtc_funcs*, const char*, ...)
    function void drm_crtc_send_vblank_event(drm_crtc*, drm_pending_vblank_event*)
    function void drm_crtc_set_max_vblank_count(drm_crtc*, u32)
    function u64 drm_crtc_vblank_count(drm_crtc*)
    function u64 drm_crtc_vblank_count_and_time(drm_crtc*, ktime_t*)
    function int drm_crtc_vblank_get(drm_crtc*)
    function void drm_crtc_vblank_off(drm_crtc*)
    function void drm_crtc_vblank_on(drm_crtc*)
    function void drm_crtc_vblank_put(drm_crtc*)
    function void drm_crtc_vblank_reset(drm_crtc*)
    function void drm_crtc_vblank_restore(drm_crtc*)
    function wait_queue_head_t* drm_crtc_vblank_waitqueue(drm_crtc*)
    function void drm_crtc_wait_one_vblank(drm_crtc*)
    function drm_display_mode* drm_cvt_mode(drm_device*, int, int, int, bool, bool, bool)
    function int drm_debugfs_create_files(const drm_info_list*, int, dentry*, drm_minor*)
    function int drm_debugfs_remove_files(const drm_info_list*, int, drm_minor*)
    function drm_device* drm_dev_alloc(drm_driver*, device*)
    function void drm_dev_dbg(const device*, unsigned int, const char*, ...)
    function bool drm_dev_enter(drm_device*, int*)
    function void drm_dev_fini(drm_device*)
    function void drm_dev_get(drm_device*)
    function int drm_dev_init(drm_device*, drm_driver*, device*)
    function void drm_dev_printk(const device*, const char*, const char*, ...)
    function void drm_dev_put(drm_device*)
    function int drm_dev_register(drm_device*, unsigned long int)
    function int drm_dev_set_unique(drm_device*, const char*)
    function void drm_dev_unplug(drm_device*)
    function void drm_dev_unref(drm_device*)
    function void drm_dev_unregister(drm_device*)
    function edid* drm_do_get_edid(drm_connector*, void ()*, void*)
    function int drm_dp_atomic_find_vcpi_slots(drm_atomic_state*, drm_dp_mst_topology_mgr*, drm_dp_mst_port*, int)
    function int drm_dp_atomic_release_vcpi_slots(drm_atomic_state*, drm_dp_mst_topology_mgr*, int)
    function void drm_dp_aux_init(drm_dp_aux*)
    function int drm_dp_aux_register(drm_dp_aux*)
    function void drm_dp_aux_unregister(drm_dp_aux*)
    function int drm_dp_check_act_status(drm_dp_mst_topology_mgr*)
    function void drm_dp_downstream_debug(seq_file*, const u8*, const u8*, drm_dp_aux*)
    function int drm_dp_downstream_id(drm_dp_aux*, char*)
    function ssize_t drm_dp_dpcd_read(drm_dp_aux*, unsigned int, void*, size_t)
    function int drm_dp_dpcd_read_link_status(drm_dp_aux*, u8*)
    function ssize_t drm_dp_dpcd_write(drm_dp_aux*, unsigned int, void*, size_t)
    function drm_dp_dual_mode_type drm_dp_dual_mode_detect(i2c_adapter*)
    function int drm_dp_dual_mode_get_tmds_output(drm_dp_dual_mode_type, i2c_adapter*, bool*)
    function int drm_dp_dual_mode_max_tmds_clock(drm_dp_dual_mode_type, i2c_adapter*)
    function ssize_t drm_dp_dual_mode_read(i2c_adapter*, u8, void*, size_t)
    function int drm_dp_dual_mode_set_tmds_output(drm_dp_dual_mode_type, i2c_adapter*, bool)
    function ssize_t drm_dp_dual_mode_write(i2c_adapter*, u8, void*, size_t)
    function int drm_dp_find_vcpi_slots(drm_dp_mst_topology_mgr*, int)
    function int drm_dp_link_configure(drm_dp_aux*, drm_dp_link*)
    function int drm_dp_link_power_down(drm_dp_aux*, drm_dp_link*)
    function int drm_dp_link_power_up(drm_dp_aux*, drm_dp_link*)
    function int drm_dp_link_probe(drm_dp_aux*, drm_dp_link*)
    function bool drm_dp_mst_allocate_vcpi(drm_dp_mst_topology_mgr*, drm_dp_mst_port*, int, int)
    function void drm_dp_mst_deallocate_vcpi(drm_dp_mst_topology_mgr*, drm_dp_mst_port*)
    function drm_connector_status drm_dp_mst_detect_port(drm_connector*, drm_dp_mst_topology_mgr*, drm_dp_mst_port*)
    function void drm_dp_mst_dump_topology(seq_file*, drm_dp_mst_topology_mgr*)
    function edid* drm_dp_mst_get_edid(drm_connector*, drm_dp_mst_topology_mgr*, drm_dp_mst_port*)
    function int drm_dp_mst_get_vcpi_slots(drm_dp_mst_topology_mgr*, drm_dp_mst_port*)
    function int drm_dp_mst_hpd_irq(drm_dp_mst_topology_mgr*, u8*, bool*)
    function bool drm_dp_mst_port_has_audio(drm_dp_mst_topology_mgr*, drm_dp_mst_port*)
    function void drm_dp_mst_reset_vcpi_slots(drm_dp_mst_topology_mgr*, drm_dp_mst_port*)
    function void drm_dp_mst_topology_mgr_destroy(drm_dp_mst_topology_mgr*)
    function int drm_dp_mst_topology_mgr_init(drm_dp_mst_topology_mgr*, drm_device*, drm_dp_aux*, int, int, int)
    function int drm_dp_mst_topology_mgr_resume(drm_dp_mst_topology_mgr*)
    function int drm_dp_mst_topology_mgr_set_mst(drm_dp_mst_topology_mgr*, bool)
    function void drm_dp_mst_topology_mgr_suspend(drm_dp_mst_topology_mgr*)
    function int drm_dp_read_desc(drm_dp_aux*, drm_dp_desc*, bool)
    function int drm_dp_send_power_updown_phy(drm_dp_mst_topology_mgr*, drm_dp_mst_port*, bool)
    function int drm_dp_start_crc(drm_dp_aux*, drm_crtc*)
    function int drm_dp_stop_crc(drm_dp_aux*)
    function int drm_dp_update_payload_part1(drm_dp_mst_topology_mgr*)
    function int drm_dp_update_payload_part2(drm_dp_mst_topology_mgr*)
    function void drm_encoder_cleanup(drm_encoder*)
    function int drm_encoder_init(drm_device*, drm_encoder*, const drm_encoder_funcs*, int, const char*, ...)
    function void drm_event_cancel_free(drm_device*, drm_pending_event*)
    function int drm_event_reserve_init(drm_device*, drm_file*, drm_pending_event*, drm_event*)
    function int drm_event_reserve_init_locked(drm_device*, drm_file*, drm_pending_event*, drm_event*)
    function void drm_fb_cma_fbdev_fini(drm_device*)
    function int drm_fb_cma_fbdev_init(drm_device*, unsigned int, unsigned int)
    function dma_addr_t drm_fb_cma_get_gem_addr(drm_framebuffer*, drm_plane_state*, unsigned int)
    function drm_gem_cma_object* drm_fb_cma_get_gem_obj(drm_framebuffer*, unsigned int)
    function void drm_fbdev_cma_fini(drm_fbdev_cma*)
    function void drm_fbdev_cma_hotplug_event(drm_fbdev_cma*)
    function drm_fbdev_cma* drm_fbdev_cma_init(drm_device*, unsigned int, unsigned int)
    function void drm_fbdev_cma_restore_mode(drm_fbdev_cma*)
    function void drm_fbdev_cma_set_suspend(drm_fbdev_cma*, bool)
    function void drm_fbdev_cma_set_suspend_unlocked(drm_fbdev_cma*, bool)
    function void drm_framebuffer_cleanup(drm_framebuffer*)
    function int drm_framebuffer_init(drm_device*, drm_framebuffer*, const drm_framebuffer_funcs*)
    function drm_framebuffer* drm_framebuffer_lookup(drm_device*, drm_file*, uint32_t)
    function int drm_framebuffer_plane_height(int, const drm_framebuffer*, int)
    function int drm_framebuffer_plane_width(int, const drm_framebuffer*, int)
    function void drm_framebuffer_remove(drm_framebuffer*)
    function void drm_framebuffer_unregister_private(drm_framebuffer*)
    function drm_gem_cma_object* drm_gem_cma_create(drm_device*, size_t)
    function int drm_gem_cma_dumb_create(drm_file*, drm_device*, drm_mode_create_dumb*)
    function int drm_gem_cma_dumb_create_internal(drm_file*, drm_device*, drm_mode_create_dumb*)
    function void drm_gem_cma_free_object(drm_gem_object*)
    function int drm_gem_cma_mmap(file*, vm_area_struct*)
    function sg_table* drm_gem_cma_prime_get_sg_table(drm_gem_object*)
    function drm_gem_object* drm_gem_cma_prime_import_sg_table(drm_device*, dma_buf_attachment*, sg_table*)
    function int drm_gem_cma_prime_mmap(drm_gem_object*, vm_area_struct*)
    function void* drm_gem_cma_prime_vmap(drm_gem_object*)
    function void drm_gem_cma_prime_vunmap(drm_gem_object*, void*)
    function void drm_gem_cma_print_info(drm_printer*, unsigned int, const drm_gem_object*)
    function int drm_gem_create_mmap_offset(drm_gem_object*)
    function int drm_gem_create_mmap_offset_size(drm_gem_object*, size_t)
    function dma_buf* drm_gem_dmabuf_export(drm_device*, dma_buf_export_info*)
    function void* drm_gem_dmabuf_kmap(dma_buf*, unsigned long int)
    function void drm_gem_dmabuf_kunmap(dma_buf*, unsigned long int, void*)
    function int drm_gem_dmabuf_mmap(dma_buf*, vm_area_struct*)
    function void drm_gem_dmabuf_release(dma_buf*)
    function void* drm_gem_dmabuf_vmap(dma_buf*)
    function void drm_gem_dmabuf_vunmap(dma_buf*, void*)
    function int drm_gem_dumb_destroy(drm_file*, drm_device*, uint32_t)
    function int drm_gem_dumb_map_offset(drm_file*, drm_device*, u32, u64*)
    function drm_framebuffer* drm_gem_fb_create(drm_device*, drm_file*, const drm_mode_fb_cmd2*)
    function int drm_gem_fb_create_handle(drm_framebuffer*, drm_file*, unsigned int*)
    function drm_framebuffer* drm_gem_fb_create_with_funcs(drm_device*, drm_file*, const drm_mode_fb_cmd2*, const drm_framebuffer_funcs*)
    function void drm_gem_fb_destroy(drm_framebuffer*)
    function drm_gem_object* drm_gem_fb_get_obj(drm_framebuffer*, unsigned int)
    function int drm_gem_fb_prepare_fb(drm_plane*, drm_plane_state*)
    function int drm_gem_fb_simple_display_pipe_prepare_fb(drm_simple_display_pipe*, drm_plane_state*)
    function drm_framebuffer* drm_gem_fbdev_fb_create(drm_device*, drm_fb_helper_surface_size*, unsigned int, drm_gem_object*, const drm_framebuffer_funcs*)
    function void drm_gem_free_mmap_offset(drm_gem_object*)
    function page** drm_gem_get_pages(drm_gem_object*)
    function int drm_gem_handle_create(drm_file*, drm_gem_object*, u32*)
    function int drm_gem_handle_delete(drm_file*, u32)
    function int drm_gem_map_attach(dma_buf*, dma_buf_attachment*)
    function void drm_gem_map_detach(dma_buf*, dma_buf_attachment*)
    function sg_table* drm_gem_map_dma_buf(dma_buf_attachment*, dma_data_direction)
    function int drm_gem_mmap(file*, vm_area_struct*)
    function int drm_gem_mmap_obj(drm_gem_object*, unsigned long int, vm_area_struct*)
    function int drm_gem_object_init(drm_device*, drm_gem_object*, size_t)
    function drm_gem_object* drm_gem_object_lookup(drm_file*, u32)
    function void drm_gem_object_put(drm_gem_object*)
    function void drm_gem_object_put_unlocked(drm_gem_object*)
    function void drm_gem_object_release(drm_gem_object*)
    function dma_buf* drm_gem_prime_export(drm_device*, drm_gem_object*, int)
    function int drm_gem_prime_fd_to_handle(drm_device*, drm_file*, int, uint32_t*)
    function int drm_gem_prime_handle_to_fd(drm_device*, drm_file*, uint32_t, uint32_t, int*)
    function drm_gem_object* drm_gem_prime_import(drm_device*, dma_buf*)
    function drm_gem_object* drm_gem_prime_import_dev(drm_device*, dma_buf*, device*)
    function int drm_gem_prime_mmap(drm_gem_object*, vm_area_struct*)
    function void drm_gem_private_object_init(drm_device*, drm_gem_object*, size_t)
    function void drm_gem_put_pages(drm_gem_object*, page**, bool, bool)
    function void drm_gem_unmap_dma_buf(dma_buf_attachment*, sg_table*, dma_data_direction)
    function edid* drm_get_edid(drm_connector*, i2c_adapter*)
    function edid* drm_get_edid_switcheroo(drm_connector*, i2c_adapter*)
    function const drm_format_info* drm_get_format_info(drm_device*, const drm_mode_fb_cmd2*)
    function int drm_get_pci_dev(pci_dev*, const pci_device_id*, drm_driver*)
    function drm_display_mode* drm_gtf_mode(drm_device*, int, int, int, bool, int)
    function drm_display_mode* drm_gtf_mode_complex(drm_device*, int, int, int, bool, int, int, int, int, int)
    function bool drm_handle_vblank(drm_device*, unsigned int)
    function void drm_hdmi_avi_infoframe_content_type(hdmi_avi_infoframe*, const drm_connector_state*)
    function int drm_hdmi_vendor_infoframe_from_display_mode(hdmi_vendor_infoframe*, drm_connector*, const drm_display_mode*)
    function int drm_helper_connector_dpms(drm_connector*, int)
    function bool drm_helper_crtc_in_use(drm_crtc*)
    function int drm_helper_crtc_mode_set(drm_crtc*, drm_display_mode*, drm_display_mode*, int, int, drm_framebuffer*)
    function int drm_helper_crtc_mode_set_base(drm_crtc*, int, int, drm_framebuffer*)
    function void drm_helper_disable_unused_functions(drm_device*)
    function bool drm_helper_encoder_in_use(drm_encoder*)
    function bool drm_helper_hpd_irq_event(drm_device*)
    function void drm_helper_mode_fill_fb_struct(drm_device*, drm_framebuffer*, const drm_mode_fb_cmd2*)
    function void drm_helper_move_panel_connectors_to_head(drm_device*)
    function int drm_helper_probe_detect(drm_connector*, drm_modeset_acquire_ctx*, bool)
    function int drm_helper_probe_single_connector_modes(drm_connector*, uint32_t, uint32_t)
    function void drm_helper_resume_force_mode(drm_device*)
    function void drm_i2c_encoder_commit(drm_encoder*)
    function void drm_i2c_encoder_destroy(drm_encoder*)
    function drm_connector_status drm_i2c_encoder_detect(drm_encoder*, drm_connector*)
    function void drm_i2c_encoder_dpms(drm_encoder*, int)
    function int drm_i2c_encoder_init(drm_device*, drm_encoder_slave*, i2c_adapter*, const i2c_board_info*)
    function bool drm_i2c_encoder_mode_fixup(drm_encoder*, const drm_display_mode*, drm_display_mode*)
    function void drm_i2c_encoder_mode_set(drm_encoder*, drm_display_mode*, drm_display_mode*)
    function void drm_i2c_encoder_prepare(drm_encoder*)
    function void drm_i2c_encoder_restore(drm_encoder*)
    function void drm_i2c_encoder_save(drm_encoder*)
    function int drm_invalid_op(drm_device*, void*, drm_file*)
    function long int drm_ioctl(file*, unsigned int, unsigned long int)
    function long int drm_ioctl_kernel(file*, drm_ioctl_t*, void*, u32)
    function int drm_ioctl_permit(u32, drm_file*)
    function int drm_irq_install(drm_device*, int)
    function int drm_irq_uninstall(drm_device*)
    function bool drm_is_current_master(drm_file*)
    function void drm_kms_helper_hotplug_event(drm_device*)
    function void drm_kms_helper_poll_disable(drm_device*)
    function void drm_kms_helper_poll_enable(drm_device*)
    function void drm_kms_helper_poll_fini(drm_device*)
    function void drm_kms_helper_poll_init(drm_device*)
    function uint32_t drm_lease_filter_crtcs(drm_file*, uint32_t)
    function bool drm_lease_held(drm_file*, int)
    function drm_master* drm_lease_owner(drm_master*)
    function int drm_legacy_addbufs_pci(drm_device*, drm_buf_desc*)
    function int drm_legacy_addmap(drm_device*, resource_size_t, unsigned int, drm_map_type, drm_map_flags, drm_local_map**)
    function drm_local_map* drm_legacy_getsarea(drm_device*)
    function void drm_legacy_idlelock_release(drm_lock_data*)
    function void drm_legacy_idlelock_take(drm_lock_data*)
    function void drm_legacy_ioremap(drm_local_map*, drm_device*)
    function void drm_legacy_ioremap_wc(drm_local_map*, drm_device*)
    function void drm_legacy_ioremapfree(drm_local_map*, drm_device*)
    function void drm_legacy_pci_exit(drm_driver*, pci_driver*)
    function int drm_legacy_pci_init(drm_driver*, pci_driver*)
    function void drm_legacy_rmmap(drm_device*, drm_local_map*)
    function int drm_legacy_rmmap_locked(drm_device*, drm_local_map*)
    function int drm_lspcon_get_mode(i2c_adapter*, drm_lspcon_mode*)
    function int drm_lspcon_set_mode(i2c_adapter*, drm_lspcon_mode)
    function drm_master* drm_master_get(drm_master*)
    function void drm_master_put(drm_master**)
    function void drm_mode_config_cleanup(drm_device*)
    function int drm_mode_config_helper_resume(drm_device*)
    function int drm_mode_config_helper_suspend(drm_device*)
    function void drm_mode_config_init(drm_device*)
    function void drm_mode_config_reset(drm_device*)
    function drm_display_mode* drm_mode_create(drm_device*)
    function int drm_mode_create_aspect_ratio_property(drm_device*)
    function int drm_mode_create_content_type_property(drm_device*)
    function int drm_mode_create_dvi_i_properties(drm_device*)
    function drm_display_mode* drm_mode_create_from_cmdline_mode(drm_device*, drm_cmdline_mode*)
    function int drm_mode_create_scaling_mode_property(drm_device*)
    function int drm_mode_create_suggested_offset_properties(drm_device*)
    function drm_tile_group* drm_mode_create_tile_group(drm_device*, char*)
    function int drm_mode_create_tv_properties(drm_device*, unsigned int, const char* const*)
    function int drm_mode_crtc_set_gamma_size(drm_crtc*, int)
    function void drm_mode_destroy(drm_device*, drm_display_mode*)
    function drm_display_mode* drm_mode_duplicate(drm_device*, const drm_display_mode*)
    function drm_display_mode* drm_mode_find_dmt(drm_device*, int, int, int, bool)
    function drm_tile_group* drm_mode_get_tile_group(drm_device*, char*)
    function drm_mode_object* drm_mode_object_find(drm_device*, drm_file*, uint32_t, uint32_t)
    function bool drm_mode_parse_command_line_for_connector(const char*, drm_connector*, drm_cmdline_mode*)
    function int drm_mode_plane_set_obj_prop(drm_plane*, drm_property*, uint64_t)
    function void drm_mode_probed_add(drm_connector*, drm_display_mode*)
    function void drm_mode_prune_invalid(drm_device*, list_head*, bool)
    function void drm_mode_put_tile_group(drm_device*, drm_tile_group*)
    function int drm_mode_set_config_internal(drm_mode_set*)
    function drm_mode_status drm_mode_validate_driver(drm_device*, const drm_display_mode*)
    function drm_mode_status drm_mode_validate_ycbcr420(const drm_display_mode*, drm_connector*)
    function void drm_modeset_lock_all(drm_device*)
    function int drm_modeset_lock_all_ctx(drm_device*, drm_modeset_acquire_ctx*)
    function void drm_modeset_unlock_all(drm_device*)
    function int drm_noop(drm_device*, void*, drm_file*)
    function void drm_object_attach_property(drm_mode_object*, drm_property*, uint64_t)
    function int drm_object_property_get_value(drm_mode_object*, drm_property*, uint64_t*)
    function int drm_object_property_set_value(drm_mode_object*, drm_property*, uint64_t)
    function void drm_of_component_match_add(device*, component_match**, void ()*, device_node*)
    function int drm_of_component_probe(device*, void ()*, const component_master_ops*)
    function uint32_t drm_of_crtc_port_mask(drm_device*, device_node*)
    function int drm_of_encoder_active_endpoint(device_node*, drm_encoder*, of_endpoint*)
    function int drm_of_find_panel_or_bridge(const device_node*, int, int, drm_panel**, drm_bridge**)
    function uint32_t drm_of_find_possible_crtcs(drm_device*, device_node*)
    function int drm_open(inode*, file*)
    function int drm_panel_add(drm_panel*)
    function int drm_panel_attach(drm_panel*, drm_connector*)
    function drm_bridge* drm_panel_bridge_add(drm_panel*, u32)
    function void drm_panel_bridge_remove(drm_bridge*)
    function int drm_panel_detach(drm_panel*)
    function void drm_panel_init(drm_panel*)
    function void drm_panel_remove(drm_panel*)
    function drm_dma_handle* drm_pci_alloc(drm_device*, size_t, size_t)
    function void drm_pci_free(drm_device*, drm_dma_handle_t*)
    function void drm_plane_cleanup(drm_plane*)
    function int drm_plane_create_alpha_property(drm_plane*)
    function int drm_plane_create_color_properties(drm_plane*, u32, u32, drm_color_encoding, drm_color_range)
    function int drm_plane_create_rotation_property(drm_plane*, unsigned int, unsigned int)
    function int drm_plane_create_zpos_immutable_property(drm_plane*, unsigned int)
    function int drm_plane_create_zpos_property(drm_plane*, unsigned int, unsigned int, unsigned int)
    function void drm_plane_force_disable(drm_plane*)
    function drm_plane* drm_plane_from_index(drm_device*, int)
    function int drm_plane_helper_check_update(drm_plane*, drm_crtc*, drm_framebuffer*, drm_rect*, drm_rect*, unsigned int, int, int, bool, bool, bool*)
    function int drm_plane_helper_disable(drm_plane*, drm_modeset_acquire_ctx*)
    function int drm_plane_helper_update(drm_plane*, drm_crtc*, drm_framebuffer*, int, int, unsigned int, unsigned int, uint32_t, uint32_t, uint32_t, uint32_t, drm_modeset_acquire_ctx*)
    function int drm_plane_init(drm_device*, drm_plane*, uint32_t, const drm_plane_funcs*, const uint32_t*, unsigned int, bool)
    function __poll_t drm_poll(file*, poll_table_struct*)
    function void drm_primary_helper_destroy(drm_plane*)
    function int drm_primary_helper_disable(drm_plane*, drm_modeset_acquire_ctx*)
    function int drm_primary_helper_update(drm_plane*, drm_crtc*, drm_framebuffer*, int, int, unsigned int, unsigned int, uint32_t, uint32_t, uint32_t, uint32_t, drm_modeset_acquire_ctx*)
    function void drm_prime_gem_destroy(drm_gem_object*, sg_table*)
    function bool drm_probe_ddc(i2c_adapter*)
    function int drm_property_add_enum(drm_property*, uint64_t, const char*)
    function drm_property_blob* drm_property_blob_get(drm_property_blob*)
    function void drm_property_blob_put(drm_property_blob*)
    function drm_property* drm_property_create(drm_device*, u32, const char*, int)
    function drm_property* drm_property_create_bitmask(drm_device*, u32, const char*, const drm_prop_enum_list*, int, uint64_t)
    function drm_property_blob* drm_property_create_blob(drm_device*, size_t, void*)
    function drm_property* drm_property_create_bool(drm_device*, u32, const char*)
    function drm_property* drm_property_create_enum(drm_device*, u32, const char*, const drm_prop_enum_list*, int)
    function drm_property* drm_property_create_object(drm_device*, u32, const char*, uint32_t)
    function drm_property* drm_property_create_range(drm_device*, u32, const char*, uint64_t, uint64_t)
    function drm_property* drm_property_create_signed_range(drm_device*, u32, const char*, int64_t, int64_t)
    function void drm_property_destroy(drm_device*, drm_property*)
    function drm_property_blob* drm_property_lookup_blob(drm_device*, uint32_t)
    function bool drm_property_replace_blob(drm_property_blob**, drm_property_blob*)
    function int drm_property_replace_global_blob(drm_device*, drm_property_blob**, size_t, void*, drm_mode_object*, drm_property*)
    function void drm_put_dev(drm_device*)
    function ssize_t drm_read(file*, char*, size_t, loff_t*)
    function int drm_release(inode*, file*)
    function bool drm_scdc_get_scrambling_status(i2c_adapter*)
    function ssize_t drm_scdc_read(i2c_adapter*, u8, void*, size_t)
    function bool drm_scdc_set_high_tmds_clock_ratio(i2c_adapter*, bool)
    function bool drm_scdc_set_scrambling(i2c_adapter*, bool)
    function ssize_t drm_scdc_write(i2c_adapter*, u8, void*, size_t)
    function void drm_send_event(drm_device*, drm_pending_event*)
    function void drm_send_event_locked(drm_device*, drm_pending_event*)
    function void drm_set_preferred_mode(drm_connector*, int, int)
    function int drm_simple_display_pipe_attach_bridge(drm_simple_display_pipe*, drm_bridge*)
    function int drm_simple_display_pipe_init(drm_device*, drm_simple_display_pipe*, const drm_simple_display_pipe_funcs*, const uint32_t*, unsigned int, const uint64_t*, drm_connector*)
    function void drm_state_dump(drm_device*, drm_printer*)
    function void drm_syncobj_add_callback(drm_syncobj*, drm_syncobj_cb*, drm_syncobj_func_t)
    function int drm_syncobj_create(drm_syncobj**, uint32_t, dma_fence*)
    function drm_syncobj* drm_syncobj_find(drm_file*, u32)
    function int drm_syncobj_find_fence(drm_file*, u32, dma_fence**)
    function int drm_syncobj_get_fd(drm_syncobj*, int*)
    function int drm_syncobj_get_handle(drm_file*, drm_syncobj*, u32*)
    function void drm_syncobj_remove_callback(drm_syncobj*, drm_syncobj_cb*)
    function void drm_syncobj_replace_fence(drm_syncobj*, dma_fence*)
    function void drm_sysfs_hotplug_event(drm_device*)
    function int drm_universal_plane_init(drm_device*, drm_plane*, uint32_t, const drm_plane_funcs*, const uint32_t*, unsigned int, const uint64_t*, drm_plane_type, const char*, ...)
    function int drm_vblank_init(drm_device*, unsigned int)
    function void drm_vblank_restore(drm_device*, unsigned int)
    function int drm_vma_node_allow(drm_vma_offset_node*, drm_file*)
    function bool drm_vma_node_is_allowed(drm_vma_offset_node*, drm_file*)
    function void drm_vma_node_revoke(drm_vma_offset_node*, drm_file*)
    function void drm_wait_one_vblank(drm_device*, unsigned int)
    function void drm_warn_on_modeset_not_all_locked(drm_device*)
    function int drm_writeback_connector_init(drm_device*, drm_writeback_connector*, const drm_connector_funcs*, const drm_encoder_helper_funcs*, const u32*, int)
    function dma_fence* drm_writeback_get_out_fence(drm_writeback_connector*)
    function void drm_writeback_queue_job(drm_writeback_connector*, drm_writeback_job*)
    function void drm_writeback_signal_completion(drm_writeback_connector*, int)
    function void drop_nlink(inode*)
    function void drop_super(super_block*)
    function void drop_super_exclusive(super_block*)
    function void* dst_alloc(dst_ops*, net_device*, int, int, unsigned short int)
    function dst_entry* dst_cache_get(dst_cache*)
    function rtable* dst_cache_get_ip4(dst_cache*, __be32*)
    function dst_entry* dst_cache_get_ip6(dst_cache*, in6_addr*)
    function void dst_cache_set_ip4(dst_cache*, dst_entry*, __be32)
    function void dst_cache_set_ip6(dst_cache*, dst_entry*, const in6_addr*)
    function u32* dst_cow_metrics_generic(dst_entry*, unsigned long int)
    function dst_entry* dst_destroy(dst_entry*)
    function void dst_dev_put(dst_entry*)
    function int dst_discard_out(net*, sock*, sk_buff*)
    function void dst_init(dst_entry*, dst_ops*, net_device*, int, int, unsigned short int)
    function void dst_release(dst_entry*)
    function void dst_release_immediate(dst_entry*)
    function int dt_init_idle_driver(cpuidle_driver*, const of_device_id*, unsigned int)
    function int dump_align(coredump_params*, int)
    function int dump_emit(coredump_params*, void*, int)
    function int dump_skip(coredump_params*, size_t)
    function void dump_truncate(coredump_params*)
    function bool each_symbol_section(void ()*, void*)
    function int edac_device_add_device(edac_device_ctl_info*)
    function edac_device_ctl_info* edac_device_alloc_ctl_info(unsigned int, char*, unsigned int, char*, unsigned int, unsigned int, edac_dev_sysfs_block_attribute*, unsigned int, int)
    function edac_device_ctl_info* edac_device_del_device(device*)
    function void edac_device_free_ctl_info(edac_device_ctl_info*)
    function void edac_device_handle_ce(edac_device_ctl_info*, int, int, const char*)
    function void edac_device_handle_ue(edac_device_ctl_info*, int, int, const char*)
    function bus_type* edac_get_sysfs_subsys()
    function int edac_mc_add_mc_with_groups(mem_ctl_info*, const attribute_group**)
    function mem_ctl_info* edac_mc_alloc(unsigned int, unsigned int, edac_mc_layer*, unsigned int)
    function mem_ctl_info* edac_mc_del_mc(device*)
    function mem_ctl_info* edac_mc_find(int)
    function int edac_mc_find_csrow_by_page(mem_ctl_info*, unsigned long int)
    function void edac_mc_free(mem_ctl_info*)
    function void edac_mc_handle_error(const hw_event_mc_err_type, mem_ctl_info*, const u16, const unsigned long int, const unsigned long int, const unsigned long int, const int, const int, const int, const char*, const char*)
    function int edac_pci_add_device(edac_pci_ctl_info*, int)
    function edac_pci_ctl_info* edac_pci_alloc_ctl_info(unsigned int, const char*)
    function edac_pci_ctl_info* edac_pci_create_generic_ctl(device*, const char*)
    function edac_pci_ctl_info* edac_pci_del_device(device*)
    function void edac_pci_free_ctl_info(edac_pci_ctl_info*)
    function void edac_pci_handle_npe(edac_pci_ctl_info*, const char*)
    function void edac_pci_handle_pe(edac_pci_ctl_info*, const char*)
    function void edac_pci_release_generic_ctl(edac_pci_ctl_info*)
    function void edac_raw_mc_handle_error(const hw_event_mc_err_type, mem_ctl_info*, edac_raw_error_desc*)
    function int efivar_entry_add(efivar_entry*, list_head*)
    function int efivar_entry_delete(efivar_entry*)
    function efivar_entry* efivar_entry_find(efi_char16_t*, efi_guid_t, list_head*, bool)
    function int efivar_entry_get(efivar_entry*, u32*, unsigned long int*, void*)
    function int efivar_entry_iter(void ()*, list_head*, void*)
    function int efivar_entry_remove(efivar_entry*)
    function int efivar_entry_set(efivar_entry*, u32, unsigned long int, void*, list_head*)
    function int efivar_entry_set_get_size(efivar_entry*, u32, unsigned long int*, void*, bool*)
    function int efivar_entry_size(efivar_entry*, unsigned long int*)
    function kobject* efivars_kobject()
    function int efivars_register(efivars*, const efivar_operations*, kobject*)
    function int efivars_unregister(efivars*)
    function elevator_queue* elevator_alloc(request_queue*, elevator_type*)
    function void elv_add_request(request_queue*, request*, int)
    function bool elv_bio_merge_ok(request*, bio*)
    function void elv_dispatch_add_tail(request_queue*, request*)
    function void elv_dispatch_sort(request_queue*, request*)
    function void elv_rb_add(rb_root*, request*)
    function void elv_rb_del(rb_root*, request*)
    function request* elv_rb_find(rb_root*, sector_t)
    function request* elv_rb_former_request(request_queue*, request*)
    function request* elv_rb_latter_request(request_queue*, request*)
    function int elv_register(elevator_type*)
    function void elv_rqhash_add(request_queue*, request*)
    function void elv_rqhash_del(request_queue*, request*)
    function void elv_unregister(elevator_type*)
    function void end_buffer_async_write(buffer_head*, int)
    function void end_buffer_read_sync(buffer_head*, int)
    function void end_buffer_write_sync(buffer_head*, int)
    function int esp6_output_head(xfrm_state*, sk_buff*, esp_info*)
    function int esp6_output_tail(xfrm_state*, sk_buff*, esp_info*)
    function int esp_output_head(xfrm_state*, sk_buff*, esp_info*)
    function int esp_output_tail(xfrm_state*, sk_buff*, esp_info*)
    function int eth_change_mtu(net_device*, int)
    function void eth_commit_mac_addr_change(net_device*, void*)
    function int eth_header(sk_buff*, net_device*, unsigned short int, void*, void*, unsigned int)
    function void eth_header_cache_update(hh_cache*, const net_device*, const unsigned char*)
    function int eth_mac_addr(net_device*, void*)
    function int eth_platform_get_mac_address(device*, u8*)
    function int eth_prepare_mac_addr_change(net_device*, void*)
    function __be16 eth_type_trans(sk_buff*, net_device*)
    function int eth_validate_addr(net_device*)
    function void ether_setup(net_device*)
    function u32 ethtool_op_get_link(net_device*)
    function int ethtool_op_get_ts_info(net_device*, ethtool_ts_info*)
    function event_trigger_type event_triggers_call(trace_event_file*, void*, ring_buffer_event*)
    function void event_triggers_post_call(trace_event_file*, event_trigger_type)
    function eventfd_ctx* eventfd_ctx_fileget(file*)
    function file* eventfd_fget(int)
    function void evict_inodes(super_block*)
    function dentry* exportfs_decode_fh(vfsmount*, fid*, int, int, void ()*, void*)
    function int exportfs_encode_fh(dentry*, fid*, int*, int)
    function int exportfs_encode_inode_fh(inode*, fid*, int*, inode*)
    function void extcon_dev_free(extcon_dev*)
    function int extcon_dev_register(extcon_dev*)
    function void extcon_dev_unregister(extcon_dev*)
    function extcon_dev* extcon_find_edev_by_node(device_node*)
    function extcon_dev* extcon_get_edev_by_phandle(device*, int)
    function extcon_dev* extcon_get_extcon_dev(const char*)
    function int extcon_get_property(extcon_dev*, unsigned int, unsigned int, extcon_property_value*)
    function int extcon_get_property_capability(extcon_dev*, unsigned int, unsigned int)
    function int extcon_get_state(extcon_dev*, const unsigned int)
    function int extcon_register_notifier(extcon_dev*, unsigned int, notifier_block*)
    function int extcon_register_notifier_all(extcon_dev*, notifier_block*)
    function int extcon_set_property(extcon_dev*, unsigned int, unsigned int, extcon_property_value)
    function int extcon_set_property_capability(extcon_dev*, unsigned int, unsigned int)
    function int extcon_set_property_sync(extcon_dev*, unsigned int, unsigned int, extcon_property_value)
    function int extcon_set_state(extcon_dev*, unsigned int, bool)
    function int extcon_set_state_sync(extcon_dev*, unsigned int, bool)
    function int extcon_sync(extcon_dev*, unsigned int)
    function int extcon_unregister_notifier(extcon_dev*, unsigned int, notifier_block*)
    function int extcon_unregister_notifier_all(extcon_dev*, notifier_block*)
    function int f_setown(file*, unsigned long int, int)
    function failover* failover_register(net_device*, failover_ops*)
    function int failover_slave_unregister(net_device*)
    function void failover_unregister(failover*)
    function int fasync_helper(int, file*, int, fasync_struct**)
    function int fat_add_entries(inode*, void*, int, fat_slot_info*)
    function int fat_alloc_new_dir(inode*, timespec64*)
    function void fat_attach(inode*, loff_t)
    function inode* fat_build_inode(super_block*, msdos_dir_entry*, loff_t)
    function void fat_detach(inode*)
    function int fat_dir_empty(inode*)
    function int fat_fill_super(super_block*, void*, int, int, void ()*)
    function int fat_flush_inodes(super_block*, inode*, inode*)
    function int fat_free_clusters(inode*, int)
    function int fat_get_dotdot_entry(inode*, buffer_head**, msdos_dir_entry**)
    function int fat_remove_entries(inode*, fat_slot_info*)
    function int fat_scan(inode*, const unsigned char*, fat_slot_info*)
    function int fat_search_long(inode*, const unsigned char*, int, fat_slot_info*)
    function int fat_setattr(dentry*, iattr*)
    function int fat_sync_inode(inode*)
    function void fat_time_unix2fat(msdos_sb_info*, timespec64*, __le16*, __le16*, u8*)
    function int fb_blank(fb_info*, int)
    function void fb_deferred_io_cleanup(fb_info*)
    function int fb_deferred_io_fsync(file*, loff_t, loff_t, int)
    function void fb_deferred_io_init(fb_info*)
    function int fb_deferred_io_mmap(fb_info*, vm_area_struct*)
    function void fb_deferred_io_open(fb_info*, inode*, file*)
    function int fb_find_mode(fb_var_screeninfo*, fb_info*, const char*, const fb_videomode*, unsigned int, const fb_videomode*, unsigned int)
    function const unsigned char* fb_firmware_edid(device*)
    function char* fb_get_buffer_offset(fb_info*, fb_pixmap*, u32)
    function int fb_get_mode(int, u32, fb_var_screeninfo*, fb_info*)
    function int fb_pan_display(fb_info*, fb_var_screeninfo*)
    function int fb_prepare_logo(fb_info*, int)
    function int fb_set_cmap(fb_cmap*, fb_info*)
    function void fb_set_suspend(fb_info*, int)
    function int fb_set_var(fb_info*, fb_var_screeninfo*)
    function int fb_show_logo(fb_info*, int)
    function ssize_t fb_sys_read(fb_info*, char*, size_t, loff_t*)
    function ssize_t fb_sys_write(fb_info*, const char*, size_t, loff_t*)
    function int fb_validate_mode(const fb_var_screeninfo*, fb_info*)
    function void fd_install(unsigned int, file*)
    function int ffs_name_dev(ffs_dev*, const char*)
    function int ffs_single_dev(ffs_dev*)
    function file* fget(unsigned int)
    function file* fget_raw(unsigned int)
    function int fib_default_rule_add(fib_rules_ops*, u32, u32, u32)
    function fib_notifier_ops* fib_notifier_ops_register(const fib_notifier_ops*, net*)
    function void fib_notifier_ops_unregister(fib_notifier_ops*)
    function int fib_rules_lookup(fib_rules_ops*, flowi*, int, fib_lookup_arg*)
    function fib_rules_ops* fib_rules_register(const fib_rules_ops*, net*)
    function void fib_rules_unregister(fib_rules_ops*)
    function int fib_table_lookup(fib_table*, const flowi4*, fib_result*, int)
    function Qdisc* fifo_create_dflt(Qdisc*, Qdisc_ops*, unsigned int, netlink_ext_ack*)
    function int file_check_and_advance_wb_err(file*)
    function int file_fdatawait_range(file*, loff_t, loff_t)
    function bool file_ns_capable(const file*, user_namespace*, int)
    function file* file_open_root(dentry*, vfsmount*, const char*, int, umode_t)
    function char* file_path(file*, char*, int)
    function int file_remove_privs(file*)
    function int file_update_time(file*)
    function int file_write_and_wait_range(file*, loff_t, loff_t)
    function vm_fault_t filemap_fault(vm_fault*)
    function void filemap_map_pages(vm_fault*, unsigned long int, unsigned long int)
    function vm_fault_t filemap_page_mkwrite(vm_fault*)
    function int filp_close(file*, fl_owner_t)
    function file* filp_open(const char*, int, umode_t)
    function void finalize_exec(linux_binprm*)
    function inode* find_inode_nowait(super_block*, unsigned long int, void ()*, void*)
    function mem_ctl_info* find_mci_by_dev(device*)
    function module* find_module(const char*)
    function pid* find_pid_ns(int, pid_namespace*)
    function const kernel_symbol* find_symbol(const char*, module**, const s32**, bool, bool)
    function int finish_no_open(file*, dentry*)
    function int finish_open(file*, dentry*, void ()*)
    function int firmware_request_cache(device*, const char*)
    function int firmware_request_nowarn(const firmware**, const char*, device*)
    function phy_device* fixed_phy_register(unsigned int, fixed_phy_status*, int, device_node*)
    function int fixed_phy_set_link_update(phy_device*, void ()*)
    function void fixed_phy_unregister(phy_device*)
    function loff_t fixed_size_llseek(file*, loff_t, int, loff_t)
    function ip6_flowlabel* fl6_sock_lookup(sock*, __be32)
    function int flush_old_exec(linux_binprm*)
    function void forget_all_cached_acls(inode*)
    function void forget_cached_acl(inode*, int)
    function int fork_usermode_blob(void*, size_t, umh_info*)
    function void fput(file*)
    function fb_info* framebuffer_alloc(size_t, device*)
    function void framebuffer_release(fb_info*)
    function void free_buffer_head(buffer_head*)
    function void free_fib_info(fib_info*)
    function void free_inode_nonrcu(inode*)
    function void free_netdev(net_device*)
    function super_block* freeze_bdev(block_device*)
    function int freeze_super(super_block*)
    function const ieee80211_reg_rule* freq_reg_info(wiphy*, u32)
    function void fscrypt_decrypt_bio(bio*)
    function int fscrypt_decrypt_block_inplace(const inode*, page*, unsigned int, unsigned int, u64)
    function int fscrypt_drop_inode(inode*)
    function int fscrypt_encrypt_block_inplace(const inode*, page*, unsigned int, unsigned int, u64, gfp_t)
    function int fscrypt_file_open(inode*, file*)
    function int fscrypt_fname_alloc_buffer(const inode*, u32, fscrypt_str*)
    function int fscrypt_fname_disk_to_usr(inode*, u32, u32, const fscrypt_str*, fscrypt_str*)
    function void fscrypt_free_inode(inode*)
    function int fscrypt_get_encryption_info(inode*)
    function const char* fscrypt_get_symlink(inode*, void*, unsigned int, delayed_call*)
    function int fscrypt_has_permitted_context(inode*, inode*)
    function int fscrypt_inherit_context(inode*, inode*, void*, bool)
    function int fscrypt_ioctl_add_key(file*, void*)
    function int fscrypt_ioctl_get_key_status(file*, void*)
    function int fscrypt_ioctl_get_policy(file*, void*)
    function int fscrypt_ioctl_get_policy_ex(file*, void*)
    function int fscrypt_ioctl_remove_key(file*, void*)
    function int fscrypt_ioctl_remove_key_all_users(file*, void*)
    function int fscrypt_ioctl_set_policy(file*, void*)
    function void fscrypt_put_encryption_info(inode*)
    function int fscrypt_setup_filename(inode*, const qstr*, int, fscrypt_name*)
    function int fscrypt_zeroout_range(const inode*, unsigned long int, sector_t, unsigned int)
    function int fsg_common_create_lun(fsg_common*, fsg_lun_config*, unsigned int, const char*, const char**)
    function int fsg_common_create_luns(fsg_common*, fsg_config*)
    function void fsg_common_free_buffers(fsg_common*)
    function void fsg_common_remove_lun(fsg_lun*)
    function void fsg_common_remove_luns(fsg_common*)
    function int fsg_common_set_cdev(fsg_common*, usb_composite_dev*, bool)
    function void fsg_common_set_inquiry_string(fsg_common*, const char*, const char*)
    function int fsg_common_set_num_buffers(fsg_common*, unsigned int)
    function void fsg_common_set_sysfs(fsg_common*, bool)
    function void fsg_lun_close(fsg_lun*)
    function int fsg_lun_fsync_sub(fsg_lun*)
    function int fsg_lun_open(fsg_lun*, const char*)
    function ssize_t fsg_show_cdrom(fsg_lun*, char*)
    function ssize_t fsg_show_file(fsg_lun*, rw_semaphore*, char*)
    function ssize_t fsg_show_inquiry_string(fsg_lun*, char*)
    function ssize_t fsg_show_nofua(fsg_lun*, char*)
    function ssize_t fsg_show_removable(fsg_lun*, char*)
    function ssize_t fsg_show_ro(fsg_lun*, char*)
    function ssize_t fsg_store_cdrom(fsg_lun*, rw_semaphore*, const char*, size_t)
    function ssize_t fsg_store_file(fsg_lun*, rw_semaphore*, const char*, size_t)
    function ssize_t fsg_store_inquiry_string(fsg_lun*, const char*, size_t)
    function ssize_t fsg_store_nofua(fsg_lun*, const char*, size_t)
    function ssize_t fsg_store_removable(fsg_lun*, const char*, size_t)
    function ssize_t fsg_store_ro(fsg_lun*, rw_semaphore*, const char*, size_t)
    function int fsl8250_handle_irq(uart_port*)
    function int fsnotify(inode*, __u32, void*, int, const unsigned char*, u32)
    function void fsstack_copy_attr_all(inode*, const inode*)
    function void fsstack_copy_inode_size(inode*, inode*)
    function int fsync_bdev(block_device*)
    function void fuse_abort_conn(fuse_conn*, bool)
    function fuse_conn* fuse_conn_get(fuse_conn*)
    function void fuse_conn_init(fuse_conn*, user_namespace*)
    function void fuse_conn_put(fuse_conn*)
    function fuse_dev* fuse_dev_alloc(fuse_conn*)
    function void fuse_dev_free(fuse_dev*)
    function int fuse_dev_release(inode*, file*)
    function long int fuse_do_ioctl(file*, unsigned int, unsigned long int, unsigned int)
    function int fuse_do_open(fuse_conn*, u64, file*, bool)
    function __poll_t fuse_file_poll(file*, poll_table*)
    function fuse_req* fuse_get_req(fuse_conn*, unsigned int)
    function fuse_req* fuse_get_req_for_background(fuse_conn*, unsigned int)
    function void fuse_put_request(fuse_conn*, fuse_req*)
    function fuse_req* fuse_request_alloc(unsigned int)
    function void fuse_request_send(fuse_conn*, fuse_req*)
    function void fuse_request_send_background(fuse_conn*, fuse_req*)
    function void fuse_sync_release(fuse_file*, int)
    function bool fwnode_device_is_available(const fwnode_handle*)
    function void* fwnode_get_mac_address(fwnode_handle*, char*, int)
    function fwnode_handle* fwnode_get_named_child_node(const fwnode_handle*, const char*)
    function gpio_desc* fwnode_get_named_gpiod(fwnode_handle*, const char*, int, gpiod_flags, const char*)
    function fwnode_handle* fwnode_get_next_available_child_node(const fwnode_handle*, fwnode_handle*)
    function fwnode_handle* fwnode_get_next_child_node(const fwnode_handle*, fwnode_handle*)
    function fwnode_handle* fwnode_get_next_parent(fwnode_handle*)
    function fwnode_handle* fwnode_get_parent(const fwnode_handle*)
    function int fwnode_get_phy_mode(fwnode_handle*)
    function fwnode_handle* fwnode_graph_get_next_endpoint(const fwnode_handle*, fwnode_handle*)
    function fwnode_handle* fwnode_graph_get_port_parent(const fwnode_handle*)
    function fwnode_handle* fwnode_graph_get_remote_endpoint(const fwnode_handle*)
    function fwnode_handle* fwnode_graph_get_remote_node(const fwnode_handle*, u32, u32)
    function fwnode_handle* fwnode_graph_get_remote_port(const fwnode_handle*)
    function fwnode_handle* fwnode_graph_get_remote_port_parent(const fwnode_handle*)
    function int fwnode_graph_parse_endpoint(const fwnode_handle*, fwnode_endpoint*)
    function fwnode_handle* fwnode_handle_get(fwnode_handle*)
    function void fwnode_handle_put(fwnode_handle*)
    function int fwnode_irq_get(fwnode_handle*, unsigned int)
    function int fwnode_property_get_reference_args(const fwnode_handle*, const char*, const char*, unsigned int, unsigned int, fwnode_reference_args*)
    function int fwnode_property_match_string(const fwnode_handle*, const char*, const char*)
    function bool fwnode_property_present(const fwnode_handle*, const char*)
    function int fwnode_property_read_string(const fwnode_handle*, const char*, const char**)
    function int fwnode_property_read_string_array(const fwnode_handle*, const char*, const char**, size_t)
    function int fwnode_property_read_u16_array(const fwnode_handle*, const char*, u16*, size_t)
    function int fwnode_property_read_u32_array(const fwnode_handle*, const char*, u32*, size_t)
    function int fwnode_property_read_u64_array(const fwnode_handle*, const char*, u64*, size_t)
    function int fwnode_property_read_u8_array(const fwnode_handle*, const char*, u8*, size_t)
    function usb_ep* gadget_find_ep_by_name(usb_gadget*, const char*)
    function int gen10g_config_aneg(phy_device*)
    function int gen10g_config_init(phy_device*)
    function int gen10g_no_soft_reset(phy_device*)
    function int gen10g_read_status(phy_device*)
    function int gen10g_resume(phy_device*)
    function int gen10g_suspend(phy_device*)
    function gen_pool* gen_pool_get(device*, const char*)
    function sector_t generic_block_bmap(address_space*, sector_t, get_block_t*)
    function int generic_block_fiemap(inode*, fiemap_extent_info*, u64, u64, get_block_t*)
    function int generic_cont_expand_simple(inode*, loff_t)
    function int generic_delete_inode(inode*)
    function void generic_end_io_acct(request_queue*, int, hd_struct*, unsigned long int)
    function dentry* generic_fh_to_dentry(super_block*, fid*, int, int, void ()*)
    function dentry* generic_fh_to_parent(super_block*, fid*, int, int, void ()*)
    function int generic_file_fsync(file*, loff_t, loff_t, int)
    function loff_t generic_file_llseek(file*, loff_t, int)
    function loff_t generic_file_llseek_size(file*, loff_t, int, loff_t, loff_t)
    function int generic_file_mmap(file*, vm_area_struct*)
    function int generic_file_open(inode*, file*)
    function int generic_file_readonly_mmap(file*, vm_area_struct*)
    function ssize_t generic_file_splice_read(file*, loff_t*, pipe_inode_info*, size_t, unsigned int)
    function void generic_fillattr(inode*, kstat*)
    function ssize_t generic_listxattr(dentry*, char*, size_t)
    function blk_qc_t generic_make_request(bio*)
    function int generic_mii_ioctl(mii_if_info*, mii_ioctl_data*, int, unsigned int*)
    function ssize_t generic_perform_write(file*, iov_iter*, loff_t)
    function int generic_permission(inode*, int)
    function ssize_t generic_read_dir(file*, char*, size_t, loff_t*)
    function int generic_setlease(file*, long int, file_lock**, void**)
    function void generic_shutdown_super(super_block*)
    function ssize_t generic_splice_sendpage(pipe_inode_info*, file*, loff_t*, size_t, unsigned int)
    function void generic_start_io_acct(request_queue*, int, unsigned long int, hd_struct*)
    function int generic_update_time(inode*, timespec64*, int)
    function int generic_write_end(file*, address_space*, loff_t, unsigned int, unsigned int, page*, void*)
    function int generic_writepages(address_space*, writeback_control*)
    function nlattr** genl_family_attrbuf(const genl_family*)
    function void genl_notify(const genl_family*, sk_buff*, genl_info*, u32, gfp_t)
    function int genl_register_family(genl_family*)
    function int genl_unregister_family(const genl_family*)
    function int genlmsg_multicast_allns(const genl_family*, sk_buff*, u32, unsigned int, gfp_t)
    function void* genlmsg_put(sk_buff*, u32, u32, const genl_family*, int, u8)
    function int genpd_dev_pm_attach(device*)
    function device* genpd_dev_pm_attach_by_id(device*, unsigned int)
    function int genphy_aneg_done(phy_device*)
    function int genphy_c45_an_disable_aneg(phy_device*)
    function int genphy_c45_aneg_done(phy_device*)
    function int genphy_c45_pma_setup_forced(phy_device*)
    function int genphy_c45_read_link(phy_device*, u32)
    function int genphy_c45_read_lpa(phy_device*)
    function int genphy_c45_read_mdix(phy_device*)
    function int genphy_c45_read_pma(phy_device*)
    function int genphy_c45_restart_aneg(phy_device*)
    function int genphy_config_aneg(phy_device*)
    function int genphy_config_init(phy_device*)
    function int genphy_loopback(phy_device*, bool)
    function int genphy_read_mmd_unsupported(phy_device*, int, u16)
    function int genphy_read_status(phy_device*)
    function int genphy_restart_aneg(phy_device*)
    function int genphy_resume(phy_device*)
    function int genphy_setup_forced(phy_device*)
    function int genphy_soft_reset(phy_device*)
    function int genphy_suspend(phy_device*)
    function int genphy_update_link(phy_device*)
    function int genphy_write_mmd_unsupported(phy_device*, int, u16, u16)
    function posix_acl* get_acl(inode*, int)
    function posix_acl* get_cached_acl(inode*, int)
    function posix_acl* get_cached_acl_rcu(inode*, int)
    function device* get_cpu_device(unsigned int)
    function tty_struct* get_current_tty()
    function device* get_device(device*)
    function int get_device_system_crosststamp(void ()*, void*, system_time_snapshot*, system_device_crosststamp*)
    function kobject* get_disk_and_module(gendisk*)
    function file_system_type* get_fs_type(const char*)
    function gendisk* get_gendisk(dev_t, int*)
    function kobject* get_governor_parent_kobj(cpufreq_policy*)
    function mem_cgroup* get_mem_cgroup_from_mm(mm_struct*)
    function mem_cgroup* get_mem_cgroup_from_page(page*)
    function file* get_mm_exe_file(mm_struct*)
    function phy_device* get_phy_device(mii_bus*, int, bool)
    function scpi_ops* get_scpi_ops()
    function super_block* get_super(block_device*)
    function super_block* get_super_exclusive_thawed(block_device*)
    function super_block* get_super_thawed(block_device*)
    function file* get_task_exe_file(task_struct*)
    function thermal_instance* get_thermal_instance(thermal_zone_device*, thermal_cooling_device*, int)
    function int get_tz_trend(thermal_zone_device*, int)
    function unsigned long int get_unmapped_area(file*, unsigned long int, unsigned long int, unsigned long int, unsigned long int)
    function void gether_cleanup(eth_dev*)
    function net_device* gether_connect(gether*)
    function void gether_disconnect(gether*)
    function int gether_get_dev_addr(net_device*, char*, int)
    function int gether_get_host_addr(net_device*, char*, int)
    function int gether_get_host_addr_cdc(net_device*, char*, int)
    function void gether_get_host_addr_u8(net_device*, u8*)
    function int gether_get_ifname(net_device*, char*, int)
    function unsigned int gether_get_qmult(net_device*)
    function int gether_register_netdev(net_device*)
    function int gether_set_dev_addr(net_device*, const char*)
    function void gether_set_gadget(net_device*, usb_gadget*)
    function int gether_set_host_addr(net_device*, const char*)
    function void gether_set_qmult(net_device*, unsigned int)
    function eth_dev* gether_setup_name(usb_gadget*, const char*, const char*, u8*, unsigned int, const char*)
    function net_device* gether_setup_name_default(const char*)
    function void gov_attr_set_get(gov_attr_set*, list_head*)
    function void gov_attr_set_init(gov_attr_set*, list_head*)
    function unsigned int gov_attr_set_put(gov_attr_set*, list_head*)
    function void gov_update_cpu_data(dbs_data*)
    function gpio_desc* gpio_to_desc(unsigned int)
    function int gpiochip_add_data_with_key(gpio_chip*, void*, lock_class_key*, lock_class_key*)
    function int gpiochip_add_pin_range(gpio_chip*, const char*, unsigned int, unsigned int, unsigned int)
    function int gpiochip_add_pingroup_range(gpio_chip*, pinctrl_dev*, unsigned int, const char*)
    function gpio_chip* gpiochip_find(void*, void ()*)
    function void gpiochip_free_own_desc(gpio_desc*)
    function int gpiochip_generic_config(gpio_chip*, unsigned int, unsigned long int)
    function void gpiochip_generic_free(gpio_chip*, unsigned int)
    function int gpiochip_generic_request(gpio_chip*, unsigned int)
    function void* gpiochip_get_data(gpio_chip*)
    function int gpiochip_irq_map(irq_domain*, unsigned int, irq_hw_number_t)
    function void gpiochip_irq_unmap(irq_domain*, unsigned int)
    function int gpiochip_irqchip_add_key(gpio_chip*, irq_chip*, unsigned int, irq_flow_handler_t, unsigned int, bool, lock_class_key*, lock_class_key*)
    function bool gpiochip_irqchip_irq_valid(const gpio_chip*, unsigned int)
    function const char* gpiochip_is_requested(gpio_chip*, unsigned int)
    function bool gpiochip_line_is_irq(gpio_chip*, unsigned int)
    function bool gpiochip_line_is_open_drain(gpio_chip*, unsigned int)
    function bool gpiochip_line_is_open_source(gpio_chip*, unsigned int)
    function bool gpiochip_line_is_persistent(gpio_chip*, unsigned int)
    function bool gpiochip_line_is_valid(const gpio_chip*, unsigned int)
    function int gpiochip_lock_as_irq(gpio_chip*, unsigned int)
    function void gpiochip_remove(gpio_chip*)
    function void gpiochip_remove_pin_ranges(gpio_chip*)
    function gpio_desc* gpiochip_request_own_desc(gpio_chip*, u16, const char*)
    function void gpiochip_set_chained_irqchip(gpio_chip*, irq_chip*, unsigned int, irq_flow_handler_t)
    function void gpiochip_set_nested_irqchip(gpio_chip*, irq_chip*, unsigned int)
    function void gpiochip_unlock_as_irq(gpio_chip*, unsigned int)
    function int gpiod_cansleep(const gpio_desc*)
    function int gpiod_count(device*, const char*)
    function int gpiod_direction_input(gpio_desc*)
    function int gpiod_direction_output(gpio_desc*, int)
    function int gpiod_direction_output_raw(gpio_desc*, int)
    function gpio_desc* gpiod_get(device*, const char*, gpiod_flags)
    function gpio_descs* gpiod_get_array(device*, const char*, gpiod_flags)
    function gpio_descs* gpiod_get_array_optional(device*, const char*, gpiod_flags)
    function int gpiod_get_array_value(unsigned int, gpio_desc**, int*)
    function int gpiod_get_array_value_cansleep(unsigned int, gpio_desc**, int*)
    function int gpiod_get_direction(gpio_desc*)
    function gpio_desc* gpiod_get_from_of_node(device_node*, const char*, int, gpiod_flags, const char*)
    function gpio_desc* gpiod_get_index(device*, const char*, unsigned int, gpiod_flags)
    function gpio_desc* gpiod_get_index_optional(device*, const char*, unsigned int, gpiod_flags)
    function gpio_desc* gpiod_get_optional(device*, const char*, gpiod_flags)
    function int gpiod_get_raw_array_value(unsigned int, gpio_desc**, int*)
    function int gpiod_get_raw_array_value_cansleep(unsigned int, gpio_desc**, int*)
    function int gpiod_get_raw_value(const gpio_desc*)
    function int gpiod_get_raw_value_cansleep(const gpio_desc*)
    function int gpiod_get_value(const gpio_desc*)
    function int gpiod_get_value_cansleep(const gpio_desc*)
    function int gpiod_is_active_low(const gpio_desc*)
    function void gpiod_put(gpio_desc*)
    function void gpiod_put_array(gpio_descs*)
    function void gpiod_set_array_value(unsigned int, gpio_desc**, int*)
    function void gpiod_set_array_value_cansleep(unsigned int, gpio_desc**, int*)
    function int gpiod_set_consumer_name(gpio_desc*, const char*)
    function int gpiod_set_debounce(gpio_desc*, unsigned int)
    function int gpiod_set_raw_array_value(unsigned int, gpio_desc**, int*)
    function int gpiod_set_raw_array_value_cansleep(unsigned int, gpio_desc**, int*)
    function void gpiod_set_raw_value(gpio_desc*, int)
    function void gpiod_set_raw_value_cansleep(gpio_desc*, int)
    function int gpiod_set_transitory(gpio_desc*, bool)
    function void gpiod_set_value(gpio_desc*, int)
    function void gpiod_set_value_cansleep(gpio_desc*, int)
    function gpio_chip* gpiod_to_chip(const gpio_desc*)
    function int gpiod_to_irq(const gpio_desc*)
    function void gro_cells_destroy(gro_cells*)
    function int gro_cells_init(gro_cells*, net_device*)
    function int gro_cells_receive(gro_cells*, sk_buff*)
    function int gserial_connect(gserial*, u8)
    function void gserial_disconnect(gserial*)
    function void handle_bad_irq(irq_desc*)
    function void handle_edge_irq(irq_desc*)
    function void handle_fasteoi_irq(irq_desc*)
    function void handle_level_irq(irq_desc*)
    function void handle_simple_irq(irq_desc*)
    function void handle_untracked_irq(irq_desc*)
    function hci_dev* hci_alloc_dev()
    function sk_buff* hci_cmd_sync(hci_dev*, u16, u32, void*, u32)
    function int hci_conn_check_secure(hci_conn*, __u8)
    function int hci_conn_security(hci_conn*, __u8, __u8, bool)
    function int hci_conn_switch_role(hci_conn*, __u8)
    function void hci_free_dev(hci_dev*)
    function hci_dev* hci_get_route(bdaddr_t*, bdaddr_t*, uint8_t)
    function int hci_mgmt_chan_register(hci_mgmt_chan*)
    function void hci_mgmt_chan_unregister(hci_mgmt_chan*)
    function int hci_recv_diag(hci_dev*, sk_buff*)
    function int hci_recv_frame(hci_dev*, sk_buff*)
    function int hci_register_cb(hci_cb*)
    function int hci_register_dev(hci_dev*)
    function int hci_reset_dev(hci_dev*)
    function int hci_resume_dev(hci_dev*)
    function void hci_set_fw_info(hci_dev*, const char*, ...)
    function void hci_set_hw_info(hci_dev*, const char*, ...)
    function int hci_suspend_dev(hci_dev*)
    function int hci_unregister_cb(hci_cb*)
    function void hci_unregister_dev(hci_dev*)
    function void hdmi_infoframe_log(const char*, device*, hdmi_infoframe*)
    function int hid_add_device(hid_device*)
    function u8* hid_alloc_report_buf(hid_report*, gfp_t)
    function hid_device* hid_allocate_device()
    function int hid_check_keys_pressed(hid_device*)
    function bool hid_compare_device_paths(hid_device*, hid_device*, char)
    function int hid_connect(hid_device*, unsigned int)
    function void hid_debug_event(hid_device*, char*)
    function void hid_destroy_device(hid_device*)
    function void hid_disconnect(hid_device*)
    function void hid_dump_device(hid_device*, seq_file*)
    function void hid_dump_field(hid_field*, int, seq_file*)
    function void hid_dump_input(hid_device*, hid_usage*, __s32)
    function void hid_dump_report(hid_device*, int, u8*, int)
    function __u32 hid_field_extract(const hid_device*, u8*, unsigned int, unsigned int)
    function void hid_hw_close(hid_device*)
    function int hid_hw_open(hid_device*)
    function int hid_hw_start(hid_device*, unsigned int)
    function void hid_hw_stop(hid_device*)
    function bool hid_ignore(hid_device*)
    function int hid_input_report(hid_device*, int, u8*, u32, int)
    function unsigned long int hid_lookup_quirk(const hid_device*)
    function const hid_device_id* hid_match_device(hid_device*, hid_driver*)
    function int hid_open_report(hid_device*)
    function void hid_output_report(hid_report*, __u8*)
    function int hid_parse_report(hid_device*, __u8*, unsigned int)
    function hid_report* hid_register_report(hid_device*, unsigned int, unsigned int, unsigned int)
    function int hid_report_raw_event(hid_device*, int, u8*, u32, int)
    function int hid_set_field(hid_field*, unsigned int, __s32)
    function void hid_unregister_driver(hid_driver*)
    function hid_report* hid_validate_values(hid_device*, unsigned int, unsigned int, unsigned int, unsigned int)
    function void hiddev_hid_event(hid_device*, hid_field*, hid_usage*, __s32)
    function __s32 hidinput_calc_abs_res(const hid_field*, __u16)
    function int hidinput_connect(hid_device*, unsigned int)
    function unsigned int hidinput_count_leds(hid_device*)
    function void hidinput_disconnect(hid_device*)
    function int hidinput_find_field(hid_device*, unsigned int, unsigned int, hid_field**)
    function hid_field* hidinput_get_led_field(hid_device*)
    function void hidinput_report_event(hid_device*, hid_report*)
    function int hidraw_connect(hid_device*)
    function void hidraw_disconnect(hid_device*)
    function int hidraw_report_event(hid_device*, u8*, int)
    function hisi_clock_data* hisi_clk_alloc(platform_device*, int)
    function hisi_clock_data* hisi_clk_init(device_node*, int)
    function int hisi_clk_register_phase(device*, const hisi_phase_clock*, int, hisi_clock_data*)
    function void hisi_reset_exit(hisi_reset_controller*)
    function hisi_reset_controller* hisi_reset_init(platform_device*)
    function hvc_struct* hvc_alloc(uint32_t, int, const hv_ops*, int)
    function int hvc_instantiate(uint32_t, int, const hv_ops*)
    function int hvc_poll(hvc_struct*)
    function int hvc_remove(hvc_struct*)
    function int hwspin_lock_register(hwspinlock_device*, device*, const hwspinlock_ops*, int, int)
    function int hwspin_lock_unregister(hwspinlock_device*)
    function unsigned int i2c_adapter_depth(i2c_adapter*)
    function int i2c_add_adapter(i2c_adapter*)
    function int i2c_add_numbered_adapter(i2c_adapter*)
    function int i2c_bit_add_bus(i2c_adapter*)
    function int i2c_bit_add_numbered_bus(i2c_adapter*)
    function void i2c_clients_command(i2c_adapter*, unsigned int, void*)
    function void i2c_del_adapter(i2c_adapter*)
    function void i2c_del_driver(i2c_driver*)
    function int i2c_for_each_dev(void*, void ()*)
    function int i2c_generic_scl_recovery(i2c_adapter*)
    function i2c_adapter* i2c_get_adapter(int)
    function int i2c_get_device_id(const i2c_client*, i2c_device_identity*)
    function int i2c_handle_smbus_host_notify(i2c_adapter*, unsigned short int)
    function const i2c_device_id* i2c_match_id(const i2c_device_id*, const i2c_client*)
    function int i2c_mux_add_adapter(i2c_mux_core*, u32, u32, unsigned int)
    function i2c_mux_core* i2c_mux_alloc(i2c_adapter*, device*, int, int, u32, void ()*, void ()*)
    function void i2c_mux_del_adapters(i2c_mux_core*)
    function i2c_client* i2c_new_device(i2c_adapter*, const i2c_board_info*)
    function i2c_client* i2c_new_dummy(i2c_adapter*, u16)
    function i2c_client* i2c_new_probed_device(i2c_adapter*, i2c_board_info*, const unsigned short int*, void ()*)
    function i2c_client* i2c_new_secondary_device(i2c_client*, const char*, u16)
    function const of_device_id* i2c_of_match_device(const of_device_id*, i2c_client*)
    function void i2c_parse_fw_timings(device*, i2c_timings*, bool)
    function int i2c_probe_func_quick_read(i2c_adapter*, unsigned short int)
    function void i2c_put_adapter(i2c_adapter*)
    function int i2c_recover_bus(i2c_adapter*)
    function int i2c_register_driver(module*, i2c_driver*)
    function void i2c_release_client(i2c_client*)
    function i2c_adapter* i2c_root_adapter(device*)
    function i2c_client* i2c_setup_smbus_alert(i2c_adapter*, i2c_smbus_alert_setup*)
    function s32 i2c_smbus_read_block_data(const i2c_client*, u8, u8*)
    function s32 i2c_smbus_read_byte(const i2c_client*)
    function s32 i2c_smbus_read_byte_data(const i2c_client*, u8)
    function s32 i2c_smbus_read_i2c_block_data(const i2c_client*, u8, u8, u8*)
    function s32 i2c_smbus_read_i2c_block_data_or_emulated(const i2c_client*, u8, u8, u8*)
    function s32 i2c_smbus_read_word_data(const i2c_client*, u8)
    function s32 i2c_smbus_write_block_data(const i2c_client*, u8, u8, const u8*)
    function s32 i2c_smbus_write_byte(const i2c_client*, u8)
    function s32 i2c_smbus_write_byte_data(const i2c_client*, u8, u8)
    function s32 i2c_smbus_write_i2c_block_data(const i2c_client*, u8, u8, const u8*)
    function s32 i2c_smbus_write_word_data(const i2c_client*, u8, u16)
    function s32 i2c_smbus_xfer(i2c_adapter*, u16, unsigned short int, char, u8, int, i2c_smbus_data*)
    function int i2c_transfer(i2c_adapter*, i2c_msg*, int)
    function int i2c_transfer_buffer_flags(const i2c_client*, char*, int, u16)
    function void i2c_unregister_device(i2c_client*)
    function i2c_client* i2c_use_client(i2c_client*)
    function i2c_adapter* i2c_verify_adapter(device*)
    function i2c_client* i2c_verify_client(device*)
    function ieee80211_hw* ieee80211_alloc_hw_nm(size_t, const ieee80211_ops*, const char*)
    function sk_buff* ieee80211_ap_probereq_get(ieee80211_hw*, ieee80211_vif*)
    function sk_buff* ieee80211_beacon_get_template(ieee80211_hw*, ieee80211_vif*, ieee80211_mutable_offsets*)
    function sk_buff* ieee80211_beacon_get_tim(ieee80211_hw*, ieee80211_vif*, u16*, u16*)
    function __le16 ieee80211_ctstoself_duration(ieee80211_hw*, ieee80211_vif*, size_t, const ieee80211_tx_info*)
    function void ieee80211_ctstoself_get(ieee80211_hw*, ieee80211_vif*, void*, size_t, const ieee80211_tx_info*, ieee80211_cts*)
    function ieee80211_sta* ieee80211_find_sta_by_ifaddr(ieee80211_hw*, const u8*, const u8*)
    function void ieee80211_free_hw(ieee80211_hw*)
    function void ieee80211_free_txskb(ieee80211_hw*, sk_buff*)
    function __le16 ieee80211_generic_frame_duration(ieee80211_hw*, ieee80211_vif*, nl80211_band, size_t, ieee80211_rate*)
    function sk_buff* ieee80211_get_buffered_bc(ieee80211_hw*, ieee80211_vif*)
    function ieee80211_channel* ieee80211_get_channel(wiphy*, int)
    function unsigned int ieee80211_get_num_supported_channels(wiphy*)
    function void ieee80211_iter_chan_contexts_atomic(ieee80211_hw*, void ()*, void*)
    function void ieee80211_iter_keys(ieee80211_hw*, ieee80211_vif*, void ()*, void*)
    function void ieee80211_iter_keys_rcu(ieee80211_hw*, ieee80211_vif*, void ()*, void*)
    function void ieee80211_iterate_active_interfaces_atomic(ieee80211_hw*, u32, void ()*, void*)
    function void ieee80211_iterate_active_interfaces_rtnl(ieee80211_hw*, u32, void ()*, void*)
    function void ieee80211_iterate_interfaces(ieee80211_hw*, u32, void ()*, void*)
    function void ieee80211_iterate_stations_atomic(ieee80211_hw*, void ()*, void*)
    function sk_buff* ieee80211_nullfunc_get(ieee80211_hw*, ieee80211_vif*, bool)
    function sk_buff* ieee80211_probereq_get(ieee80211_hw*, const u8*, const u8*, size_t, size_t)
    function sk_buff* ieee80211_proberesp_get(ieee80211_hw*, ieee80211_vif*)
    function sk_buff* ieee80211_pspoll_get(ieee80211_hw*, ieee80211_vif*)
    function void ieee80211_queue_delayed_work(ieee80211_hw*, delayed_work*, unsigned long int)
    function int ieee80211_queue_stopped(ieee80211_hw*, int)
    function void ieee80211_queue_work(ieee80211_hw*, work_struct*)
    function void ieee80211_radar_detected(ieee80211_hw*)
    function int ieee80211_rate_control_register(const rate_control_ops*)
    function void ieee80211_rate_control_unregister(const rate_control_ops*)
    function void ieee80211_ready_on_channel(ieee80211_hw*)
    function int ieee80211_register_hw(ieee80211_hw*)
    function void ieee80211_remain_on_channel_expired(ieee80211_hw*)
    function void ieee80211_restart_hw(ieee80211_hw*)
    function __le16 ieee80211_rts_duration(ieee80211_hw*, ieee80211_vif*, size_t, const ieee80211_tx_info*)
    function void ieee80211_rts_get(ieee80211_hw*, ieee80211_vif*, void*, size_t, const ieee80211_tx_info*, ieee80211_rts*)
    function void ieee80211_rx_irqsafe(ieee80211_hw*, sk_buff*)
    function void ieee80211_rx_napi(ieee80211_hw*, ieee80211_sta*, sk_buff*, napi_struct*)
    function void ieee80211_scan_completed(ieee80211_hw*, cfg80211_scan_info*)
    function void ieee80211_sched_scan_results(ieee80211_hw*)
    function void ieee80211_sched_scan_stopped(ieee80211_hw*)
    function void ieee80211_sta_block_awake(ieee80211_hw*, ieee80211_sta*, bool)
    function void ieee80211_stop_queue(ieee80211_hw*, int)
    function void ieee80211_stop_queues(ieee80211_hw*)
    function sk_buff* ieee80211_tx_dequeue(ieee80211_hw*, ieee80211_txq*)
    function bool ieee80211_tx_prepare_skb(ieee80211_hw*, ieee80211_vif*, sk_buff*, int, ieee80211_sta**)
    function void ieee80211_tx_status(ieee80211_hw*, sk_buff*)
    function void ieee80211_tx_status_ext(ieee80211_hw*, ieee80211_tx_status*)
    function void ieee80211_tx_status_irqsafe(ieee80211_hw*, sk_buff*)
    function void ieee80211_unregister_hw(ieee80211_hw*)
    function wireless_dev* ieee80211_vif_to_wdev(ieee80211_vif*)
    function void ieee80211_wake_queue(ieee80211_hw*, int)
    function void ieee80211_wake_queues(ieee80211_hw*)
    function inode* iget5_locked(super_block*, unsigned long int, void ()*, void ()*, void*)
    function void iget_failed(inode*)
    function inode* iget_locked(super_block*, unsigned long int)
    function inode* igrab(inode*)
    function void ihold(inode*)
    function iio_channel* iio_channel_get(device*, const char*)
    function iio_channel* iio_channel_get_all(device*)
    function void iio_channel_release(iio_channel*)
    function void iio_channel_release_all(iio_channel*)
    function int iio_convert_raw_to_processed(iio_channel*, int, int*, unsigned int)
    function iio_dev* iio_device_alloc(int)
    function int iio_device_claim_direct_mode(iio_dev*)
    function void iio_device_free(iio_dev*)
    function void iio_device_release_direct_mode(iio_dev*)
    function void iio_device_unregister(iio_dev*)
    function ssize_t iio_enum_available_read(iio_dev*, uintptr_t, const iio_chan_spec*, char*)
    function ssize_t iio_enum_read(iio_dev*, uintptr_t, const iio_chan_spec*, char*)
    function ssize_t iio_enum_write(iio_dev*, uintptr_t, const iio_chan_spec*, const char*, size_t)
    function unsigned int iio_get_channel_ext_info_count(iio_channel*)
    function int iio_get_channel_type(iio_channel*, iio_chan_type*)
    function s64 iio_get_time_ns(const iio_dev*)
    function unsigned int iio_get_time_res(const iio_dev*)
    function int iio_map_array_register(iio_dev*, iio_map*)
    function int iio_map_array_unregister(iio_dev*)
    function int iio_push_event(iio_dev*, u64, s64)
    function int iio_read_avail_channel_raw(iio_channel*, const int**, int*)
    function int iio_read_channel_attribute(iio_channel*, int*, int*, iio_chan_info_enum)
    function int iio_read_channel_average_raw(iio_channel*, int*)
    function ssize_t iio_read_channel_ext_info(iio_channel*, const char*, char*)
    function int iio_read_channel_offset(iio_channel*, int*, int*)
    function int iio_read_channel_processed(iio_channel*, int*)
    function int iio_read_channel_raw(iio_channel*, int*)
    function int iio_read_channel_scale(iio_channel*, int*, int*)
    function ssize_t iio_read_const_attr(device*, device_attribute*, char*)
    function int iio_read_max_channel_raw(iio_channel*, int*)
    function ssize_t iio_show_mount_matrix(iio_dev*, uintptr_t, const iio_chan_spec*, char*)
    function int iio_write_channel_attribute(iio_channel*, int, int, iio_chan_info_enum)
    function ssize_t iio_write_channel_ext_info(iio_channel*, const char*, const char*, size_t)
    function int iio_write_channel_raw(iio_channel*, int)
    function inode* ilookup(super_block*, unsigned long int)
    function inode* ilookup5(super_block*, unsigned long int, void ()*, void*)
    function inode* ilookup5_nowait(super_block*, unsigned long int, void ()*, void*)
    function void in6_dev_finish_destroy(inet6_dev*)
    function void in_dev_finish_destroy(in_device*)
    function void inc_nlink(inode*)
    function int inet6_bind(socket*, sockaddr*, int)
    function void inet6_csk_addr2sockaddr(sock*, sockaddr*)
    function dst_entry* inet6_csk_route_req(const sock*, flowi6*, const request_sock*, u8)
    function dst_entry* inet6_csk_update_pmtu(sock*, u32)
    function int inet6_csk_xmit(sock*, sk_buff*, flowi*)
    function void inet6_destroy_sock(sock*)
    function int inet6_getname(socket*, sockaddr*, int)
    function int inet6_hash(sock*)
    function int inet6_hash_connect(inet_timewait_death_row*, sock*)
    function int inet6_ioctl(socket*, unsigned int, unsigned long int)
    function sock* inet6_lookup(net*, inet_hashinfo*, sk_buff*, int, const in6_addr*, const __be16, const in6_addr*, const __be16, const int)
    function sock* inet6_lookup_listener(net*, inet_hashinfo*, sk_buff*, int, const in6_addr*, const __be16, const in6_addr*, const unsigned short int, const int, const int)
    function int inet6_register_protosw(inet_protosw*)
    function int inet6_release(socket*)
    function int inet6_sk_rebuild_header(sock*)
    function void inet6_unregister_protosw(inet_protosw*)
    function int inet_accept(socket*, socket*, int, bool)
    function unsigned int inet_addr_type_dev_table(net*, const net_device*, __be32)
    function int inet_bind(socket*, sockaddr*, int)
    function __be32 inet_confirm_addr(net*, in_device*, __be32, __be32, int)
    function sock* inet_csk_accept(sock*, int, int*, bool)
    function void inet_csk_addr2sockaddr(sock*, sockaddr*)
    function void inet_csk_clear_xmit_timers(sock*)
    function sock* inet_csk_clone_lock(const sock*, const request_sock*, const gfp_t)
    function int inet_csk_compat_getsockopt(sock*, int, int, char*, int*)
    function int inet_csk_compat_setsockopt(sock*, int, int, char*, unsigned int)
    function sock* inet_csk_complete_hashdance(sock*, sock*, request_sock*, bool)
    function void inet_csk_delete_keepalive_timer(sock*)
    function void inet_csk_destroy_sock(sock*)
    function int inet_csk_get_port(sock*, unsigned short int)
    function void inet_csk_init_xmit_timers(sock*, void ()*, void ()*, void ()*)
    function int inet_csk_listen_start(sock*, int)
    function void inet_csk_listen_stop(sock*)
    function void inet_csk_prepare_forced_close(sock*)
    function sock* inet_csk_reqsk_queue_add(sock*, request_sock*, sock*)
    function void inet_csk_reqsk_queue_drop(sock*, request_sock*)
    function void inet_csk_reqsk_queue_drop_and_put(sock*, request_sock*)
    function void inet_csk_reqsk_queue_hash_add(sock*, request_sock*, unsigned long int)
    function void inet_csk_reset_keepalive_timer(sock*, unsigned long int)
    function dst_entry* inet_csk_route_child_sock(const sock*, sock*, const request_sock*)
    function dst_entry* inet_csk_route_req(const sock*, flowi4*, const request_sock*)
    function dst_entry* inet_csk_update_pmtu(sock*, u32)
    function int inet_ctl_sock_create(sock**, unsigned short int, unsigned short int, unsigned char, net*)
    function unsigned int inet_dev_addr_type(net*, const net_device*, __be32)
    function int inet_dgram_connect(socket*, sockaddr*, int, int)
    function int inet_diag_bc_sk(const nlattr*, sock*)
    function void inet_diag_dump_icsk(inet_hashinfo*, sk_buff*, netlink_callback*, const inet_diag_req_v2*, nlattr*)
    function sock* inet_diag_find_one_icsk(net*, inet_hashinfo*, const inet_diag_req_v2*)
    function int inet_diag_msg_attrs_fill(sock*, sk_buff*, inet_diag_msg*, int, user_namespace*, bool)
    function void inet_diag_msg_common_fill(inet_diag_msg*, sock*)
    function int inet_diag_register(const inet_diag_handler*)
    function void inet_diag_unregister(const inet_diag_handler*)
    function bool inet_ehash_nolisten(sock*, sock*)
    function int inet_getname(socket*, sockaddr*, int)
    function int inet_hash(sock*)
    function int inet_hash_connect(inet_timewait_death_row*, sock*)
    function int inet_ioctl(socket*, unsigned int, unsigned long int)
    function int inet_listen(socket*, int)
    function void inet_put_port(sock*)
    function bool inet_rcv_saddr_equal(const sock*, const sock*, bool)
    function int inet_recvmsg(socket*, msghdr*, size_t, int)
    function void inet_register_protosw(inet_protosw*)
    function int inet_release(socket*)
    function request_sock* inet_reqsk_alloc(const request_sock_ops*, sock*, bool)
    function int inet_rtx_syn_ack(const sock*, request_sock*)
    function __be32 inet_select_addr(const net_device*, __be32, int)
    function int inet_sendmsg(socket*, msghdr*, size_t)
    function ssize_t inet_sendpage(socket*, page*, int, size_t, int)
    function int inet_shutdown(socket*, int)
    function int inet_sk_diag_fill(sock*, inet_connection_sock*, sk_buff*, const inet_diag_req_v2*, user_namespace*, u32, u32, u16, const nlmsghdr*, bool)
    function int inet_sk_rebuild_header(sock*)
    function void inet_sk_rx_dst_set(sock*, const sk_buff*)
    function void inet_sk_set_state(sock*, int)
    function void inet_sock_destruct(sock*)
    function int inet_stream_connect(socket*, sockaddr*, int, int)
    function inet_timewait_sock* inet_twsk_alloc(const sock*, inet_timewait_death_row*, const int)
    function void inet_twsk_deschedule_put(inet_timewait_sock*)
    function void inet_twsk_hashdance(inet_timewait_sock*, sock*, inet_hashinfo*)
    function void inet_twsk_put(inet_timewait_sock*)
    function void inet_unhash(sock*)
    function void inet_unregister_protosw(inet_protosw*)
    function in_device* inetdev_by_index(net*, int)
    function int init_dummy_netdev(net_device*)
    function void init_special_inode(inode*, umode_t, dev_t)
    function void inode_add_bytes(inode*, loff_t)
    function int inode_congested(inode*, int)
    function void inode_dio_wait(inode*)
    function loff_t inode_get_bytes(inode*)
    function int inode_init_always(super_block*, inode*)
    function void inode_init_once(inode*)
    function void inode_init_owner(inode*, const inode*, umode_t)
    function inode* inode_insert5(inode*, unsigned long int, void ()*, void ()*, void*)
    function int inode_needs_sync(inode*)
    function int inode_newsize_ok(const inode*, loff_t)
    function void inode_nohighmem(inode*)
    function bool inode_owner_or_capable(const inode*)
    function int inode_permission(inode*, int)
    function int inode_permission2(vfsmount*, inode*, int)
    function void inode_sb_list_add(inode*)
    function void inode_set_bytes(inode*, loff_t)
    function void inode_set_flags(inode*, unsigned int, unsigned int)
    function void inode_sub_bytes(inode*, loff_t)
    function void input_alloc_absinfo(input_dev*)
    function input_dev* input_allocate_device()
    function void input_close_device(input_handle*)
    function void input_enable_softrepeat(input_dev*, int, int)
    function void input_event(input_dev*, unsigned int, unsigned int, int)
    function int input_ff_create(input_dev*, unsigned int)
    function int input_ff_create_memless(input_dev*, void*, void ()*)
    function void input_ff_destroy(input_dev*)
    function int input_ff_erase(input_dev*, int, file*)
    function int input_ff_event(input_dev*, unsigned int, unsigned int, int)
    function int input_ff_flush(input_dev*, file*)
    function int input_ff_upload(input_dev*, ff_effect*, file*)
    function int input_flush_device(input_handle*, file*)
    function void input_free_device(input_dev*)
    function int input_get_keycode(input_dev*, input_keymap_entry*)
    function int input_grab_device(input_handle*)
    function int input_handler_for_each_handle(input_handler*, void*, void ()*)
    function void input_inject_event(input_handle*, unsigned int, unsigned int, int)
    function bool input_match_device_id(const input_dev*, const input_device_id*)
    function int input_mt_assign_slots(input_dev*, int*, const input_mt_pos*, int, int)
    function void input_mt_destroy_slots(input_dev*)
    function void input_mt_drop_unused(input_dev*)
    function int input_mt_get_slot_by_key(input_dev*, int)
    function int input_mt_init_slots(input_dev*, unsigned int, unsigned int)
    function void input_mt_report_finger_count(input_dev*, int)
    function void input_mt_report_pointer_emulation(input_dev*, bool)
    function bool input_mt_report_slot_state(input_dev*, unsigned int, bool)
    function void input_mt_sync_frame(input_dev*)
    function int input_open_device(input_handle*)
    function int input_register_device(input_dev*)
    function int input_register_handle(input_handle*)
    function int input_register_handler(input_handler*)
    function void input_release_device(input_handle*)
    function void input_reset_device(input_dev*)
    function void input_set_abs_params(input_dev*, unsigned int, int, int, int, int)
    function void input_set_capability(input_dev*, unsigned int, unsigned int)
    function int input_set_keycode(input_dev*, const input_keymap_entry*)
    function void input_unregister_device(input_dev*)
    function void input_unregister_handle(input_handle*)
    function void input_unregister_handler(input_handler*)
    function int insert_inode_locked(inode*)
    function int insert_inode_locked4(inode*, unsigned long int, void ()*, void*)
    function void install_exec_creds(linux_binprm*)
    function void invalidate_bdev(block_device*)
    function void invalidate_inode_buffers(inode*)
    function int invalidate_partition(gendisk*, int)
    function io_cq* ioc_lookup_icq(io_context*, request_queue*)
    function int ioctl_by_bdev(block_device*, unsigned int, unsigned long int)
    function sector_t iomap_bmap(address_space*, sector_t, const iomap_ops*)
    function ssize_t iomap_dio_rw(kiocb*, iov_iter*, const iomap_ops*, iomap_dio_end_io_t*)
    function int iomap_fiemap(inode*, fiemap_extent_info*, loff_t, loff_t, const iomap_ops*)
    function ssize_t iomap_file_buffered_write(kiocb*, iov_iter*, const iomap_ops*)
    function int iomap_file_dirty(inode*, loff_t, loff_t, const iomap_ops*)
    function int iomap_page_mkwrite(vm_fault*, const iomap_ops*)
    function int iomap_readpage(page*, const iomap_ops*)
    function int iomap_readpages(address_space*, list_head*, unsigned int, const iomap_ops*)
    function loff_t iomap_seek_data(inode*, loff_t, const iomap_ops*)
    function loff_t iomap_seek_hole(inode*, loff_t, const iomap_ops*)
    function int iomap_swapfile_activate(swap_info_struct*, file*, sector_t*, const iomap_ops*)
    function int iomap_truncate_page(inode*, loff_t, bool*, const iomap_ops*)
    function int iomap_zero_range(inode*, loff_t, loff_t, bool*, const iomap_ops*)
    function int iommu_attach_device(iommu_domain*, device*)
    function int iommu_attach_group(iommu_domain*, iommu_group*)
    function bool iommu_capable(bus_type*, iommu_cap)
    function void iommu_detach_device(iommu_domain*, device*)
    function void iommu_detach_group(iommu_domain*, iommu_group*)
    function void iommu_dma_get_resv_regions(device*, list_head*)
    function int iommu_dma_init_domain(iommu_domain*, dma_addr_t, u64, device*)
    function iommu_domain* iommu_domain_alloc(bus_type*)
    function void iommu_domain_free(iommu_domain*)
    function int iommu_domain_get_attr(iommu_domain*, iommu_attr, void*)
    function int iommu_domain_set_attr(iommu_domain*, iommu_attr, void*)
    function void iommu_domain_window_disable(iommu_domain*, u32)
    function int iommu_domain_window_enable(iommu_domain*, u32, phys_addr_t, u64, int)
    function int iommu_fwspec_add_ids(device*, u32*, int)
    function void iommu_fwspec_free(device*)
    function int iommu_fwspec_init(device*, fwnode_handle*, const iommu_ops*)
    function int iommu_get_dma_cookie(iommu_domain*)
    function iommu_domain* iommu_get_domain_for_dev(device*)
    function int iommu_get_msi_cookie(iommu_domain*, dma_addr_t)
    function int iommu_group_add_device(iommu_group*, device*)
    function int iommu_group_for_each_dev(iommu_group*, void*, void ()*)
    function iommu_group* iommu_group_get(device*)
    function void iommu_group_remove_device(device*)
    function phys_addr_t iommu_iova_to_phys(iommu_domain*, dma_addr_t)
    function int iommu_map(iommu_domain*, unsigned long int, phys_addr_t, size_t, int)
    function size_t iommu_map_sg(iommu_domain*, unsigned long int, scatterlist*, unsigned int, int)
    function bool iommu_present(bus_type*)
    function void iommu_put_dma_cookie(iommu_domain*)
    function void iommu_set_fault_handler(iommu_domain*, iommu_fault_handler_t, void*)
    function size_t iommu_unmap(iommu_domain*, unsigned long int, size_t)
    function size_t iommu_unmap_fast(iommu_domain*, unsigned long int, size_t)
    function int ip4_datagram_connect(sock*, sockaddr*, int)
    function void ip4_datagram_release_cb(sock*)
    function int ip6_append_data(sock*, void ()*, void*, int, int, ipcm6_cookie*, flowi6*, rt6_info*, unsigned int)
    function int ip6_datagram_connect(sock*, sockaddr*, int)
    function int ip6_datagram_connect_v6_only(sock*, sockaddr*, int)
    function void ip6_datagram_recv_ctl(sock*, msghdr*, sk_buff*)
    function void ip6_datagram_release_cb(sock*)
    function int ip6_datagram_send_ctl(net*, sock*, msghdr*, flowi6*, ipcm6_cookie*)
    function rt6_info* ip6_dst_alloc(net*, net_device*, int)
    function int ip6_dst_hoplimit(dst_entry*)
    function int ip6_dst_lookup(net*, sock*, dst_entry**, flowi6*)
    function dst_entry* ip6_dst_lookup_flow(const sock*, flowi6*, const in6_addr*)
    function void ip6_flush_pending_frames(sock*)
    function int ip6_local_out(net*, sock*, sk_buff*)
    function rt6_info* ip6_pol_route(net*, fib6_table*, int, flowi6*, const sk_buff*, int)
    function int ip6_push_pending_frames(sock*)
    function dst_entry* ip6_route_input_lookup(net*, net_device*, flowi6*, const sk_buff*, int)
    function dst_entry* ip6_route_lookup(net*, flowi6*, const sk_buff*, int)
    function dst_entry* ip6_route_output_flags(net*, const sock*, flowi6*, int)
    function dst_entry* ip6_sk_dst_lookup_flow(sock*, flowi6*, const in6_addr*, bool)
    function void ip6_sk_redirect(sk_buff*, sock*)
    function void ip6_sk_update_pmtu(sk_buff*, sock*, __be32)
    function int ip6_tnl_change_mtu(net_device*, int)
    function int ip6_tnl_get_iflink(const net_device*)
    function net* ip6_tnl_get_link_net(const net_device*)
    function int ip6_tnl_rcv(ip6_tnl*, sk_buff*, const tnl_ptk_info*, metadata_dst*, bool)
    function int ip6_tnl_xmit(sk_buff*, net_device*, __u8, flowi6*, int, __u32*, __u8)
    function int ip6_xmit(const sock*, sk_buff*, flowi6*, __u32, ipv6_txoptions*, int)
    function unsigned int ip6t_do_table(sk_buff*, const nf_hook_state*, xt_table*)
    function int ip6t_register_table(net*, const xt_table*, const ip6t_replace*, const nf_hook_ops*, xt_table**)
    function void ip6t_unregister_table(net*, xt_table*, const nf_hook_ops*)
    function int ip_build_and_send_pkt(sk_buff*, const sock*, __be32, __be32, ip_options_rcu*)
    function void ip_cmsg_recv_offset(msghdr*, sock*, sk_buff*, int, int)
    function int ip_do_fragment(net*, sock*, sk_buff*, void ()*)
    function int ip_getsockopt(sock*, int, int, char*, int*)
    function int ip_local_out(net*, sock*, sk_buff*)
    function void ip_mc_dec_group(in_device*, __be32)
    function void ip_mc_inc_group(in_device*, __be32)
    function int ip_mc_join_group(sock*, ip_mreqn*)
    function int ip_mc_leave_group(sock*, ip_mreqn*)
    function void ip_md_tunnel_xmit(sk_buff*, net_device*, u8)
    function int ip_options_rcv_srr(sk_buff*, net_device*)
    function int ip_route_input_noref(sk_buff*, __be32, __be32, u8, net_device*)
    function rtable* ip_route_output_flow(net*, flowi4*, const sock*)
    function rtable* ip_route_output_key_hash(net*, flowi4*, const sk_buff*)
    function int ip_setsockopt(sock*, int, int, char*, unsigned int)
    function int ip_tunnel_change_mtu(net_device*, int)
    function int ip_tunnel_changelink(net_device*, nlattr**, ip_tunnel_parm*, __u32)
    function void ip_tunnel_delete_nets(list_head*, unsigned int, rtnl_link_ops*)
    function void ip_tunnel_dellink(net_device*, list_head*)
    function int ip_tunnel_encap_setup(ip_tunnel*, ip_tunnel_encap*)
    function int ip_tunnel_get_iflink(const net_device*)
    function net* ip_tunnel_get_link_net(const net_device*)
    function void ip_tunnel_get_stats64(net_device*, rtnl_link_stats64*)
    function int ip_tunnel_init(net_device*)
    function int ip_tunnel_init_net(net*, unsigned int, rtnl_link_ops*, char*)
    function int ip_tunnel_ioctl(net_device*, ip_tunnel_parm*, int)
    function ip_tunnel* ip_tunnel_lookup(ip_tunnel_net*, int, __be16, __be32, __be32, __be32)
    function int ip_tunnel_newlink(net_device*, nlattr**, ip_tunnel_parm*, __u32)
    function int ip_tunnel_rcv(ip_tunnel*, sk_buff*, const tnl_ptk_info*, metadata_dst*, bool)
    function void ip_tunnel_setup(net_device*, unsigned int)
    function void ip_tunnel_uninit(net_device*)
    function void ip_tunnel_xmit(sk_buff*, net_device*, const iphdr*, u8)
    function void ipcomp_destroy(xfrm_state*)
    function int ipcomp_init_state(xfrm_state*)
    function int ipcomp_input(xfrm_state*, sk_buff*)
    function int ipcomp_output(xfrm_state*, sk_buff*)
    function unsigned int ipt_do_table(sk_buff*, const nf_hook_state*, xt_table*)
    function int ipt_register_table(net*, const xt_table*, const ipt_replace*, const nf_hook_ops*, xt_table**)
    function void ipt_unregister_table(net*, xt_table*, const nf_hook_ops*)
    function metadata_dst* iptunnel_metadata_reply(metadata_dst*, gfp_t)
    function void iptunnel_xmit(sock*, rtable*, sk_buff*, __be32, __be32, __u8, __u8, __u8, __be16, bool)
    function void iput(inode*)
    function void ipv4_sk_redirect(sk_buff*, sock*)
    function void ipv4_sk_update_pmtu(sk_buff*, sock*, u32)
    function int ipv6_chk_addr(net*, const in6_addr*, const net_device*, int)
    function int ipv6_chk_addr_and_flags(net*, const in6_addr*, const net_device*, bool, int, u32)
    function bool ipv6_chk_custom_prefix(const in6_addr*, const unsigned int, net_device*)
    function int ipv6_chk_prefix(const in6_addr*, net_device*)
    function int ipv6_dev_get_saddr(net*, const net_device*, const in6_addr*, unsigned int, in6_addr*)
    function ipv6_txoptions* ipv6_dup_options(sock*, ipv6_txoptions*)
    function int ipv6_getsockopt(sock*, int, int, char*, int*)
    function bool ipv6_opt_accepted(const sock*, const sk_buff*, const inet6_skb_parm*)
    function int ipv6_recv_error(sock*, msghdr*, int, int*)
    function int ipv6_setsockopt(sock*, int, int, char*, unsigned int)
    function int ipv6_sock_mc_drop(sock*, int, const in6_addr*)
    function int ipv6_sock_mc_join(sock*, int, const in6_addr*)
    function void irq_chip_ack_parent(irq_data*)
    function void irq_chip_disable_parent(irq_data*)
    function void irq_chip_enable_parent(irq_data*)
    function void irq_chip_eoi_parent(irq_data*)
    function void irq_chip_mask_parent(irq_data*)
    function int irq_chip_set_affinity_parent(irq_data*, const cpumask*, bool)
    function int irq_chip_set_type_parent(irq_data*, unsigned int)
    function void irq_chip_unmask_parent(irq_data*)
    function unsigned int irq_create_direct_mapping(irq_domain*)
    function unsigned int irq_create_fwspec_mapping(irq_fwspec*)
    function unsigned int irq_create_mapping(irq_domain*, irq_hw_number_t)
    function unsigned int irq_create_of_mapping(of_phandle_args*)
    function int irq_create_strict_mappings(irq_domain*, unsigned int, irq_hw_number_t, int)
    function irq_domain* irq_domain_add_legacy(device_node*, unsigned int, unsigned int, irq_hw_number_t, const irq_domain_ops*, void*)
    function irq_domain* irq_domain_add_simple(device_node*, unsigned int, unsigned int, const irq_domain_ops*, void*)
    function int irq_domain_alloc_irqs_parent(irq_domain*, unsigned int, unsigned int, void*)
    function int irq_domain_associate(irq_domain*, unsigned int, irq_hw_number_t)
    function void irq_domain_associate_many(irq_domain*, unsigned int, irq_hw_number_t, int)
    function irq_domain* irq_domain_create_hierarchy(irq_domain*, unsigned int, unsigned int, fwnode_handle*, const irq_domain_ops*, void*)
    function void irq_domain_free_fwnode(fwnode_handle*)
    function void irq_domain_free_irqs_common(irq_domain*, unsigned int, unsigned int)
    function void irq_domain_free_irqs_parent(irq_domain*, unsigned int, unsigned int)
    function irq_data* irq_domain_get_irq_data(irq_domain*, unsigned int)
    function int irq_domain_pop_irq(irq_domain*, int)
    function int irq_domain_push_irq(irq_domain*, int, void*)
    function void irq_domain_remove(irq_domain*)
    function void irq_domain_reset_irq_data(irq_data*)
    function int irq_domain_set_hwirq_and_chip(irq_domain*, unsigned int, irq_hw_number_t, irq_chip*, void*)
    function void irq_domain_set_info(irq_domain*, unsigned int, irq_hw_number_t, irq_chip*, void*, irq_flow_handler_t, void*, const char*)
    function int irq_domain_xlate_onecell(irq_domain*, device_node*, const u32*, unsigned int, unsigned long int*, unsigned int*)
    function int irq_domain_xlate_onetwocell(irq_domain*, device_node*, const u32*, unsigned int, unsigned long int*, unsigned int*)
    function int irq_domain_xlate_twocell(irq_domain*, device_node*, const u32*, unsigned int, irq_hw_number_t*, unsigned int*)
    function unsigned int irq_find_mapping(irq_domain*, irq_hw_number_t)
    function irq_domain* irq_find_matching_fwspec(irq_fwspec*, irq_domain_bus_token)
    function irq_data* irq_get_irq_data(unsigned int)
    function unsigned int irq_of_parse_and_map(device_node*, int)
    function void irq_set_chained_handler_and_data(unsigned int, irq_flow_handler_t, void*)
    function int irq_set_chip(unsigned int, irq_chip*)
    function void irq_set_chip_and_handler_name(unsigned int, irq_chip*, irq_flow_handler_t, const char*)
    function void irq_set_default_host(irq_domain*)
    function irq_desc* irq_to_desc(unsigned int)
    function bool is_bad_inode(inode*)
    function bool is_skb_forwardable(const net_device*, const sk_buff*)
    function bool is_subdir(dentry*, dentry*)
    function ssize_t iter_file_splice_write(pipe_inode_info*, file*, loff_t*, size_t, unsigned int)
    function int iterate_dir(file*, dir_context*)
    function int iterate_fd(files_struct*, unsigned int, void ()*, void*)
    function void iterate_supers_type(file_system_type*, void ()*, void*)
    function ino_t iunique(super_block*, ino_t)
    function int iw_handler_get_spy(net_device*, iw_request_info*, iwreq_data*, char*)
    function int iw_handler_get_thrspy(net_device*, iw_request_info*, iwreq_data*, char*)
    function int iw_handler_set_spy(net_device*, iw_request_info*, iwreq_data*, char*)
    function int iw_handler_set_thrspy(net_device*, iw_request_info*, iwreq_data*, char*)
    function int jbd2__journal_restart(handle_t*, int, gfp_t)
    function handle_t* jbd2__journal_start(journal_t*, int, int, gfp_t, unsigned int, unsigned int)
    function int jbd2_complete_transaction(journal_t*, tid_t)
    function void jbd2_journal_abort(journal_t*, int)
    function void jbd2_journal_ack_err(journal_t*)
    function int jbd2_journal_begin_ordered_truncate(journal_t*, jbd2_inode*, loff_t)
    function int jbd2_journal_blocks_per_page(inode*)
    function int jbd2_journal_check_available_features(journal_t*, unsigned long int, unsigned long int, unsigned long int)
    function int jbd2_journal_check_used_features(journal_t*, unsigned long int, unsigned long int, unsigned long int)
    function int jbd2_journal_clear_err(journal_t*)
    function void jbd2_journal_clear_features(journal_t*, unsigned long int, unsigned long int, unsigned long int)
    function int jbd2_journal_destroy(journal_t*)
    function int jbd2_journal_dirty_metadata(handle_t*, buffer_head*)
    function int jbd2_journal_errno(journal_t*)
    function int jbd2_journal_extend(handle_t*, int)
    function int jbd2_journal_flush(journal_t*)
    function int jbd2_journal_force_commit(journal_t*)
    function int jbd2_journal_force_commit_nested(journal_t*)
    function int jbd2_journal_forget(handle_t*, buffer_head*)
    function void jbd2_journal_free_reserved(handle_t*)
    function int jbd2_journal_get_create_access(handle_t*, buffer_head*)
    function int jbd2_journal_get_undo_access(handle_t*, buffer_head*)
    function int jbd2_journal_get_write_access(handle_t*, buffer_head*)
    function journal_t* jbd2_journal_init_dev(block_device*, block_device*, long long unsigned int, int, int)
    function journal_t* jbd2_journal_init_inode(inode*)
    function void jbd2_journal_init_jbd_inode(jbd2_inode*, inode*)
    function int jbd2_journal_inode_add_wait(handle_t*, jbd2_inode*)
    function int jbd2_journal_inode_add_write(handle_t*, jbd2_inode*)
    function int jbd2_journal_inode_ranged_wait(handle_t*, jbd2_inode*, loff_t, loff_t)
    function int jbd2_journal_inode_ranged_write(handle_t*, jbd2_inode*, loff_t, loff_t)
    function int jbd2_journal_invalidatepage(journal_t*, page*, unsigned int, unsigned int)
    function int jbd2_journal_load(journal_t*)
    function void jbd2_journal_lock_updates(journal_t*)
    function void jbd2_journal_release_jbd_inode(journal_t*, jbd2_inode*)
    function int jbd2_journal_restart(handle_t*, int)
    function int jbd2_journal_revoke(handle_t*, long long unsigned int, buffer_head*)
    function int jbd2_journal_set_features(journal_t*, unsigned long int, unsigned long int, unsigned long int)
    function void jbd2_journal_set_triggers(buffer_head*, jbd2_buffer_trigger_type*)
    function handle_t* jbd2_journal_start(journal_t*, int)
    function int jbd2_journal_start_commit(journal_t*, tid_t*)
    function int jbd2_journal_start_reserved(handle_t*, unsigned int, unsigned int)
    function int jbd2_journal_stop(handle_t*)
    function int jbd2_journal_try_to_free_buffers(journal_t*, page*, gfp_t)
    function void jbd2_journal_unlock_updates(journal_t*)
    function void jbd2_journal_update_sb_errno(journal_t*)
    function int jbd2_journal_wipe(journal_t*, int)
    function int jbd2_log_start_commit(journal_t*, tid_t)
    function int jbd2_log_wait_commit(journal_t*, tid_t)
    function int jbd2_trans_will_send_data_barrier(journal_t*, tid_t)
    function int jbd2_transaction_committed(journal_t*, tid_t)
    function int kallsyms_on_each_symbol(void ()*, void*)
    function vfsmount* kern_mount_data(file_system_type*, void*)
    function dentry* kern_path_create(int, const char*, path*, unsigned int)
    function void kern_unmount(vfsmount*)
    function int kernel_accept(socket*, socket**, int)
    function int kernel_bind(socket*, sockaddr*, int)
    function int kernel_connect(socket*, sockaddr*, int, int)
    function int kernel_getpeername(socket*, sockaddr*)
    function int kernel_getsockname(socket*, sockaddr*)
    function int kernel_getsockopt(socket*, int, int, char*, int*)
    function int kernel_listen(socket*, int)
    function void kernel_param_lock(module*)
    function void kernel_param_unlock(module*)
    function ssize_t kernel_read(file*, void*, size_t, loff_t*)
    function int kernel_read_file(file*, void**, loff_t*, loff_t, kernel_read_file_id)
    function int kernel_recvmsg(socket*, msghdr*, kvec*, size_t, size_t, int)
    function int kernel_sendmsg(socket*, msghdr*, kvec*, size_t, size_t)
    function int kernel_sendmsg_locked(sock*, msghdr*, kvec*, size_t, size_t)
    function int kernel_sendpage(socket*, page*, int, size_t, int)
    function int kernel_sendpage_locked(sock*, page*, int, size_t, int)
    function int kernel_setsockopt(socket*, int, int, char*, unsigned int)
    function u32 kernel_sock_ip_overhead(sock*)
    function int kernel_sock_shutdown(socket*, sock_shutdown_cmd)
    function ssize_t kernel_write(file*, void*, size_t, loff_t*)
    function kernfs_node* kernfs_find_and_get_ns(kernfs_node*, const char*, void*)
    function void kernfs_get(kernfs_node*)
    function void kernfs_notify(kernfs_node*)
    function int kernfs_path_from_node(kernfs_node*, kernfs_node*, char*, size_t)
    function void kernfs_put(kernfs_node*)
    function void kill_anon_super(super_block*)
    function void kill_bdev(block_device*)
    function void kill_block_super(super_block*)
    function bool kill_device(device*)
    function void kill_litter_super(super_block*)
    function int km_new_mapping(xfrm_state*, xfrm_address_t*, __be16)
    function int km_query(xfrm_state*, xfrm_tmpl*, xfrm_policy*)
    function void km_state_expired(xfrm_state*, int, u32)
    function void km_state_notify(xfrm_state*, const km_event*)
    function int kobject_add(kobject*, kobject*, const char*, ...)
    function kobject* kobject_create_and_add(const char*, kobject*)
    function void kobject_del(kobject*)
    function kobject* kobject_get(kobject*)
    function char* kobject_get_path(kobject*, gfp_t)
    function kobject* kobject_get_unless_zero(kobject*)
    function void kobject_init(kobject*, kobj_type*)
    function int kobject_init_and_add(kobject*, kobj_type*, kobject*, const char*, ...)
    function int kobject_move(kobject*, kobject*)
    function void kobject_put(kobject*)
    function int kobject_rename(kobject*, const char*)
    function int kobject_set_name(kobject*, const char*, ...)
    function int kobject_uevent(kobject*, kobject_action)
    function int kobject_uevent_env(kobject*, kobject_action, char**)
    function kset* kset_create_and_add(const char*, const kset_uevent_ops*, kobject*)
    function kobject* kset_find_obj(kset*, const char*)
    function char* kstrdup_quotable_file(file*, gfp_t)
    function void kthread_associate_blkcg(cgroup_subsys_state*)
    function cgroup_subsys_state* kthread_blkcg()
    function int l2cap_add_psm(l2cap_chan*, bdaddr_t*, __le16)
    function void l2cap_chan_close(l2cap_chan*, int)
    function int l2cap_chan_connect(l2cap_chan*, __le16, u16, bdaddr_t*, u8)
    function l2cap_chan* l2cap_chan_create()
    function void l2cap_chan_del(l2cap_chan*, int)
    function void l2cap_chan_put(l2cap_chan*)
    function int l2cap_chan_send(l2cap_chan*, msghdr*, size_t)
    function void l2cap_chan_set_defaults(l2cap_chan*)
    function l2cap_conn* l2cap_conn_get(l2cap_conn*)
    function void l2cap_conn_put(l2cap_conn*)
    function bool l2cap_is_socket(socket*)
    function int l2cap_register_user(l2cap_conn*, l2cap_user*)
    function void l2cap_unregister_user(l2cap_conn*, l2cap_user*)
    function void l2tp_recv_common(l2tp_session*, sk_buff*, unsigned char*, unsigned char*, u16, int)
    function l2tp_session* l2tp_session_create(int, l2tp_tunnel*, u32, u32, l2tp_session_cfg*)
    function int l2tp_session_delete(l2tp_session*)
    function void l2tp_session_free(l2tp_session*)
    function l2tp_session* l2tp_session_get(const net*, u32)
    function l2tp_session* l2tp_session_get_by_ifname(const net*, const char*)
    function l2tp_session* l2tp_session_get_nth(l2tp_tunnel*, int)
    function int l2tp_session_register(l2tp_session*, l2tp_tunnel*)
    function void l2tp_session_set_header_len(l2tp_session*, int)
    function int l2tp_tunnel_create(net*, int, int, u32, u32, l2tp_tunnel_cfg*, l2tp_tunnel**)
    function void l2tp_tunnel_delete(l2tp_tunnel*)
    function void l2tp_tunnel_free(l2tp_tunnel*)
    function l2tp_tunnel* l2tp_tunnel_get(const net*, u32)
    function l2tp_tunnel* l2tp_tunnel_get_nth(const net*, int)
    function l2tp_session* l2tp_tunnel_get_session(l2tp_tunnel*, u32)
    function int l2tp_tunnel_register(l2tp_tunnel*, net*, l2tp_tunnel_cfg*)
    function int l2tp_udp_encap_recv(sock*, sk_buff*)
    function int l2tp_xmit_skb(l2tp_session*, sk_buff*, int)
    function void lease_get_mtime(inode*, timespec64*)
    function int lease_modify(file_lock*, int, list_head*)
    function void led_blink_set(led_classdev*, unsigned long int*, unsigned long int*)
    function void led_blink_set_oneshot(led_classdev*, unsigned long int*, unsigned long int*, int)
    function void led_classdev_resume(led_classdev*)
    function void led_classdev_suspend(led_classdev*)
    function void led_classdev_unregister(led_classdev*)
    function void led_init_core(led_classdev*)
    function void led_set_brightness(led_classdev*, led_brightness)
    function void led_set_brightness_nopm(led_classdev*, led_brightness)
    function void led_set_brightness_nosleep(led_classdev*, led_brightness)
    function int led_set_brightness_sync(led_classdev*, led_brightness)
    function void led_stop_software_blink(led_classdev*)
    function void led_sysfs_disable(led_classdev*)
    function void led_sysfs_enable(led_classdev*)
    function void led_trigger_remove(led_classdev*)
    function int led_trigger_set(led_classdev*, led_trigger*)
    function void led_trigger_set_default(led_classdev*)
    function ssize_t led_trigger_show(device*, device_attribute*, char*)
    function ssize_t led_trigger_store(device*, device_attribute*, const char*, size_t)
    function int led_update_brightness(led_classdev*)
    function void linkwatch_fire_event(net_device*)
    function unsigned long int list_lru_count_one(list_lru*, int, mem_cgroup*)
    function unsigned long int list_lru_walk_one(list_lru*, int, mem_cgroup*, list_lru_walk_cb, void*, unsigned long int*)
    function void ll_rw_block(int, int, int, buffer_head**)
    function void llc_add_pack(int, void ()*)
    function int llc_build_and_send_ui_pkt(llc_sap*, sk_buff*, unsigned char*, unsigned char)
    function void llc_sap_close(llc_sap*)
    function llc_sap* llc_sap_find(unsigned char)
    function llc_sap* llc_sap_open(unsigned char, void ()*)
    function int lock_fb_info(fb_info*)
    function mem_cgroup* lock_page_memcg(page*)
    function dentry* lock_rename(dentry*, dentry*)
    function bool lock_sock_fast(sock*)
    function void lock_sock_nested(sock*, int)
    function void lock_two_nondirectories(inode*, inode*)
    function file_lock* locks_alloc_lock()
    function void locks_copy_conflock(file_lock*, file_lock*)
    function void locks_copy_lock(file_lock*, file_lock*)
    function void locks_free_lock(file_lock*)
    function void locks_init_lock(file_lock*)
    function int locks_lock_inode_wait(inode*, file_lock*)
    function int locks_mandatory_area(inode*, file*, loff_t, loff_t, unsigned char)
    function void locks_release_private(file_lock*)
    function void locks_remove_posix(file*, fl_owner_t)
    function block_device* lookup_bdev(const char*)
    function dentry* lookup_one_len(const char*, dentry*, int)
    function dentry* lookup_one_len2(const char*, vfsmount*, dentry*, int)
    function dentry* lookup_one_len_unlocked(const char*, dentry*, int)
    function int loop_register_transfer(loop_func_table*)
    function void make_bad_inode(inode*)
    function void mark_buffer_async_write(buffer_head*)
    function void mark_buffer_dirty(buffer_head*)
    function void mark_buffer_dirty_inode(buffer_head*, inode*)
    function void mark_buffer_write_io_error(buffer_head*)
    function void mark_info_dirty(super_block*, int)
    function int may_umount(vfsmount*)
    function int may_umount_tree(vfsmount*)
    function void mbox_chan_received_data(mbox_chan*, void*)
    function void mbox_chan_txdone(mbox_chan*, int)
    function bool mbox_client_peek_data(mbox_chan*)
    function void mbox_client_txdone(mbox_chan*, int)
    function int mbox_controller_register(mbox_controller*)
    function void mbox_controller_unregister(mbox_controller*)
    function void mbox_free_channel(mbox_chan*)
    function mbox_chan* mbox_request_channel(mbox_client*, int)
    function mbox_chan* mbox_request_channel_byname(mbox_client*, const char*)
    function int mbox_send_message(mbox_chan*, void*)
    function mdio_device* mdio_device_create(mii_bus*, int)
    function void mdio_device_free(mdio_device*)
    function int mdio_device_register(mdio_device*)
    function void mdio_device_remove(mdio_device*)
    function void mdio_device_reset(mdio_device*, int)
    function int mdio_driver_register(mdio_driver*)
    function void mdio_driver_unregister(mdio_driver*)
    function mii_bus* mdiobus_alloc_size(size_t)
    function void mdiobus_free(mii_bus*)
    function phy_device* mdiobus_get_phy(mii_bus*, int)
    function bool mdiobus_is_registered_device(mii_bus*, int)
    function int mdiobus_read(mii_bus*, int, u32)
    function int mdiobus_read_nested(mii_bus*, int, u32)
    function int mdiobus_register_device(mdio_device*)
    function phy_device* mdiobus_scan(mii_bus*, int)
    function void mdiobus_setup_mdiodev_from_board_info(mii_bus*, void ()*)
    function void mdiobus_unregister(mii_bus*)
    function int mdiobus_unregister_device(mdio_device*)
    function int mdiobus_write(mii_bus*, int, u32, u16)
    function int mdiobus_write_nested(mii_bus*, int, u32, u16)
    function mem_cgroup* mem_cgroup_from_task(task_struct*)
    function metadata_dst* metadata_dst_alloc(u8, metadata_type, gfp_t)
    function metadata_dst* metadata_dst_alloc_percpu(u8, metadata_type, gfp_t)
    function void metadata_dst_free(metadata_dst*)
    function void metadata_dst_free_percpu(metadata_dst*)
    function int mfd_add_devices(device*, int, const mfd_cell*, int, resource*, int, irq_domain*)
    function int mfd_cell_disable(platform_device*)
    function int mfd_cell_enable(platform_device*)
    function void mfd_remove_devices(device*)
    function int migrate_page_move_mapping(address_space*, page*, page*, buffer_head*, migrate_mode, int)
    function int mii_check_gmii_support(mii_if_info*)
    function void mii_check_link(mii_if_info*)
    function unsigned int mii_check_media(mii_if_info*, unsigned int, unsigned int)
    function void mii_ethtool_get_link_ksettings(mii_if_info*, ethtool_link_ksettings*)
    function int mii_ethtool_gset(mii_if_info*, ethtool_cmd*)
    function int mii_ethtool_set_link_ksettings(mii_if_info*, const ethtool_link_ksettings*)
    function int mii_ethtool_sset(mii_if_info*, ethtool_cmd*)
    function int mii_link_ok(mii_if_info*)
    function int mii_nway_restart(mii_if_info*)
    function void mini_qdisc_pair_init(mini_Qdisc_pair*, Qdisc*, mini_Qdisc**)
    function void mini_qdisc_pair_swap(mini_Qdisc_pair*, tcf_proto*)
    function int mipi_dsi_attach(mipi_dsi_device*)
    function int mipi_dsi_dcs_enter_sleep_mode(mipi_dsi_device*)
    function int mipi_dsi_dcs_exit_sleep_mode(mipi_dsi_device*)
    function int mipi_dsi_dcs_get_display_brightness(mipi_dsi_device*, u16*)
    function int mipi_dsi_dcs_get_pixel_format(mipi_dsi_device*, u8*)
    function int mipi_dsi_dcs_get_power_mode(mipi_dsi_device*, u8*)
    function int mipi_dsi_dcs_nop(mipi_dsi_device*)
    function ssize_t mipi_dsi_dcs_read(mipi_dsi_device*, u8, void*, size_t)
    function int mipi_dsi_dcs_set_column_address(mipi_dsi_device*, u16, u16)
    function int mipi_dsi_dcs_set_display_brightness(mipi_dsi_device*, u16)
    function int mipi_dsi_dcs_set_display_off(mipi_dsi_device*)
    function int mipi_dsi_dcs_set_display_on(mipi_dsi_device*)
    function int mipi_dsi_dcs_set_page_address(mipi_dsi_device*, u16, u16)
    function int mipi_dsi_dcs_set_pixel_format(mipi_dsi_device*, u8)
    function int mipi_dsi_dcs_set_tear_off(mipi_dsi_device*)
    function int mipi_dsi_dcs_set_tear_on(mipi_dsi_device*, mipi_dsi_dcs_tear_mode)
    function int mipi_dsi_dcs_set_tear_scanline(mipi_dsi_device*, u16)
    function int mipi_dsi_dcs_soft_reset(mipi_dsi_device*)
    function ssize_t mipi_dsi_dcs_write(mipi_dsi_device*, u8, void*, size_t)
    function ssize_t mipi_dsi_dcs_write_buffer(mipi_dsi_device*, void*, size_t)
    function int mipi_dsi_detach(mipi_dsi_device*)
    function mipi_dsi_device* mipi_dsi_device_register_full(mipi_dsi_host*, const mipi_dsi_device_info*)
    function void mipi_dsi_device_unregister(mipi_dsi_device*)
    function int mipi_dsi_driver_register_full(mipi_dsi_driver*, module*)
    function void mipi_dsi_driver_unregister(mipi_dsi_driver*)
    function ssize_t mipi_dsi_generic_read(mipi_dsi_device*, void*, size_t, void*, size_t)
    function ssize_t mipi_dsi_generic_write(mipi_dsi_device*, void*, size_t)
    function int mipi_dsi_host_register(mipi_dsi_host*)
    function void mipi_dsi_host_unregister(mipi_dsi_host*)
    function int mipi_dsi_set_maximum_return_packet_size(mipi_dsi_device*, u16)
    function int mipi_dsi_shutdown_peripheral(mipi_dsi_device*)
    function int mipi_dsi_turn_on_peripheral(mipi_dsi_device*)
    function void misc_deregister(miscdevice*)
    function int misc_register(miscdevice*)
    function int mmc_abort_tuning(mmc_host*, u32)
    function int mmc_add_host(mmc_host*)
    function unsigned int mmc_align_data_size(mmc_card*, unsigned int)
    function mmc_host* mmc_alloc_host(int, device*)
    function int mmc_app_cmd(mmc_host*, mmc_card*)
    function unsigned int mmc_calc_max_discard(mmc_card*)
    function int mmc_can_discard(mmc_card*)
    function int mmc_can_erase(mmc_card*)
    function bool mmc_can_gpio_cd(mmc_host*)
    function bool mmc_can_gpio_ro(mmc_host*)
    function int mmc_can_sanitize(mmc_card*)
    function int mmc_can_secure_erase_trim(mmc_card*)
    function int mmc_can_trim(mmc_card*)
    function bool mmc_card_is_blockaddr(mmc_card*)
    function int mmc_cmdq_disable(mmc_card*)
    function int mmc_cmdq_enable(mmc_card*)
    function void mmc_command_done(mmc_host*, mmc_request*)
    function void mmc_cqe_post_req(mmc_host*, mmc_request*)
    function int mmc_cqe_recovery(mmc_host*)
    function void mmc_cqe_request_done(mmc_host*, mmc_request*)
    function int mmc_cqe_start_req(mmc_host*, mmc_request*)
    function int mmc_detect_card_removed(mmc_host*)
    function void mmc_detect_change(mmc_host*, unsigned long int)
    function int mmc_erase(mmc_card*, unsigned int, unsigned int, unsigned int)
    function int mmc_erase_group_aligned(mmc_card*, unsigned int, unsigned int)
    function int mmc_flush_cache(mmc_card*)
    function void mmc_free_host(mmc_host*)
    function void mmc_get_card(mmc_card*, mmc_ctx*)
    function int mmc_get_ext_csd(mmc_card*, u8**)
    function int mmc_gpio_get_cd(mmc_host*)
    function int mmc_gpio_get_ro(mmc_host*)
    function int mmc_gpio_request_cd(mmc_host*, unsigned int, unsigned int)
    function int mmc_gpio_request_ro(mmc_host*, unsigned int)
    function void mmc_gpio_set_cd_isr(mmc_host*, void ()*)
    function int mmc_gpio_set_cd_wake(mmc_host*, bool)
    function int mmc_gpiod_request_cd(mmc_host*, const char*, unsigned int, bool, unsigned int, bool*)
    function void mmc_gpiod_request_cd_irq(mmc_host*)
    function int mmc_gpiod_request_ro(mmc_host*, const char*, unsigned int, bool, unsigned int, bool*)
    function int mmc_hw_reset(mmc_host*)
    function bool mmc_is_req_done(mmc_host*, mmc_request*)
    function int mmc_of_parse(mmc_host*)
    function int mmc_of_parse_voltage(device_node*, u32*)
    function void mmc_put_card(mmc_card*, mmc_ctx*)
    function int mmc_pwrseq_register(mmc_pwrseq*)
    function void mmc_pwrseq_unregister(mmc_pwrseq*)
    function int mmc_register_driver(mmc_driver*)
    function int mmc_regulator_get_supply(mmc_host*)
    function int mmc_regulator_set_ocr(mmc_host*, regulator*, unsigned short int)
    function int mmc_regulator_set_vqmmc(mmc_host*, mmc_ios*)
    function void mmc_release_host(mmc_host*)
    function void mmc_remove_host(mmc_host*)
    function void mmc_request_done(mmc_host*, mmc_request*)
    function void mmc_retune_pause(mmc_host*)
    function void mmc_retune_release(mmc_host*)
    function void mmc_retune_timer_stop(mmc_host*)
    function void mmc_retune_unpause(mmc_host*)
    function int mmc_send_status(mmc_card*, u32*)
    function int mmc_send_tuning(mmc_host*, u32, int*)
    function int mmc_set_blockcount(mmc_card*, unsigned int, bool)
    function int mmc_set_blocklen(mmc_card*, unsigned int)
    function void mmc_set_data_timeout(mmc_data*, const mmc_card*)
    function void mmc_start_bkops(mmc_card*, bool)
    function int mmc_start_request(mmc_host*, mmc_request*)
    function int mmc_sw_reset(mmc_host*)
    function int mmc_switch(mmc_card*, u8, u8, u8, unsigned int)
    function void mmc_unregister_driver(mmc_driver*)
    function int mmc_wait_for_app_cmd(mmc_host*, mmc_card*, mmc_command*, int)
    function int mmc_wait_for_cmd(mmc_host*, mmc_command*, int)
    function void mmc_wait_for_req(mmc_host*, mmc_request*)
    function void mmc_wait_for_req_done(mmc_host*, mmc_request*)
    function int mnt_clone_write(vfsmount*)
    function void mnt_drop_write(vfsmount*)
    function void mnt_drop_write_file(file*)
    function void mnt_set_expiry(vfsmount*, list_head*)
    function int mnt_want_write(vfsmount*)
    function int mnt_want_write_file(file*)
    function vfsmount* mntget(vfsmount*)
    function void mntput(vfsmount*)
    function int modify_user_hw_breakpoint(perf_event*, perf_event_attr*)
    function void module_layout(module*, modversion_info*, kernel_param*, kernel_symbol*, tracepoint* const*)
    function void module_put(module*)
    function int module_refcount(module*)
    function dentry* mount_bdev(file_system_type*, int, const char*, void*, void ()*)
    function dentry* mount_nodev(file_system_type*, int, void*, void ()*)
    function dentry* mount_ns(file_system_type*, int, void*, void*, user_namespace*, void ()*)
    function dentry* mount_pseudo_xattr(file_system_type*, char*, const super_operations*, const xattr_handler**, const dentry_operations*, unsigned long int)
    function dentry* mount_single(file_system_type*, int, void*, void ()*)
    function dentry* mount_subtree(vfsmount*, const char*)
    function int mpage_readpage(page*, get_block_t*)
    function int mpage_readpages(address_space*, list_head*, unsigned int, get_block_t*)
    function int mpage_writepage(page*, get_block_t*, writeback_control*)
    function int mpage_writepages(address_space*, writeback_control*, get_block_t*)
    function int mr_dump(net*, notifier_block*, unsigned short int, void ()*, void ()*, rwlock_t*)
    function int mr_fill_mroute(mr_table*, sk_buff*, mr_mfc*, rtmsg*)
    function void* mr_mfc_find_any(mr_table*, int, void*)
    function void* mr_mfc_find_any_parent(mr_table*, int)
    function void* mr_mfc_find_parent(mr_table*, void*, int)
    function void* mr_mfc_seq_idx(net*, mr_mfc_iter*, loff_t)
    function int mr_rtm_dumproute(sk_buff*, netlink_callback*, void ()*, void ()*, spinlock_t*)
    function mr_table* mr_table_alloc(net*, u32, mr_table_ops*, void ()*, void ()*)
    function void* mr_vif_seq_idx(net*, mr_vif_iter*, loff_t)
    function pci_dev* msi_desc_to_pci_dev(msi_desc*)
    function void* msi_desc_to_pci_sysdata(msi_desc*)
    function long int n_tty_compat_ioctl_helper(tty_struct*, file*, unsigned int, unsigned long int)
    function void n_tty_inherit_ops(tty_ldisc_ops*)
    function int n_tty_ioctl_helper(tty_struct*, file*, unsigned int, unsigned long int)
    function bool napi_complete_done(napi_struct*, int)
    function void napi_disable(napi_struct*)
    function sk_buff* napi_get_frags(napi_struct*)
    function void napi_gro_flush(napi_struct*, bool)
    function gro_result_t napi_gro_frags(napi_struct*)
    function gro_result_t napi_gro_receive(napi_struct*, sk_buff*)
    function bool napi_hash_del(napi_struct*)
    function bool napi_schedule_prep(napi_struct*)
    function int ndisc_mc_map(const in6_addr*, char*, net_device*, int)
    function int ndo_dflt_bridge_getlink(sk_buff*, u32, u32, net_device*, u16, u32, u32, int, u32, void ()*)
    function int ndo_dflt_fdb_add(ndmsg*, nlattr**, net_device*, const unsigned char*, u16, u16)
    function int ndo_dflt_fdb_del(ndmsg*, nlattr**, net_device*, const unsigned char*, u16)
    function int ndo_dflt_fdb_dump(sk_buff*, netlink_callback*, net_device*, net_device*, int*)
    function void neigh_changeaddr(neigh_table*, net_device*)
    function neighbour* neigh_event_ns(neigh_table*, u8*, void*, net_device*)
    function int neigh_ifdown(neigh_table*, net_device*)
    function neighbour* neigh_lookup(neigh_table*, void*, net_device*)
    function neigh_parms* neigh_parms_alloc(net_device*, neigh_table*)
    function int neigh_sysctl_register(net_device*, neigh_parms*, proc_handler*)
    function int neigh_xmit(int, net_device*, void*, sk_buff*)
    function failover* net_failover_create(net_device*)
    function void net_failover_destroy(failover*)
    function void netdev_alert(const net_device*, const char*, ...)
    function int netdev_bind_sb_channel_queue(net_device*, net_device*, u8, u16, u16)
    function void netdev_bonding_info_change(net_device*, netdev_bonding_info*)
    function int netdev_boot_setup_check(net_device*)
    function void netdev_change_features(net_device*)
    function int netdev_class_create_file_ns(const class_attribute*, void*)
    function void netdev_class_remove_file_ns(const class_attribute*, void*)
    function void netdev_crit(const net_device*, const char*, ...)
    function void netdev_emerg(const net_device*, const char*, ...)
    function void netdev_err(const net_device*, const char*, ...)
    function void netdev_features_change(net_device*)
    function bool netdev_has_any_upper_dev(net_device*)
    function bool netdev_has_upper_dev(net_device*, net_device*)
    function bool netdev_has_upper_dev_all_rcu(net_device*, net_device*)
    function void netdev_info(const net_device*, const char*, ...)
    function bool netdev_is_rx_handler_busy(net_device*)
    function void* netdev_lower_dev_get_private(net_device*, net_device*)
    function void* netdev_lower_get_first_private_rcu(net_device*)
    function void* netdev_lower_get_next(net_device*, list_head**)
    function void* netdev_lower_get_next_private(net_device*, list_head**)
    function void* netdev_lower_get_next_private_rcu(net_device*, list_head**)
    function void netdev_lower_state_changed(net_device*, void*)
    function net_device* netdev_master_upper_dev_get(net_device*)
    function net_device* netdev_master_upper_dev_get_rcu(net_device*)
    function int netdev_master_upper_dev_link(net_device*, net_device*, void*, void*, netlink_ext_ack*)
    function void netdev_notice(const net_device*, const char*, ...)
    function void netdev_notify_peers(net_device*)
    function void netdev_printk(const char*, const net_device*, const char*, ...)
    function int netdev_refcnt_read(const net_device*)
    function void netdev_reset_tc(net_device*)
    function void netdev_rx_csum_fault(net_device*)
    function int netdev_rx_handler_register(net_device*, rx_handler_func_t*, void*)
    function void netdev_rx_handler_unregister(net_device*)
    function void netdev_set_default_ethtool_ops(net_device*, const ethtool_ops*)
    function int netdev_set_num_tc(net_device*, u8)
    function int netdev_set_sb_channel(net_device*, u16)
    function int netdev_set_tc_queue(net_device*, u8, u16, u16)
    function void netdev_state_change(net_device*)
    function int netdev_txq_to_tc(net_device*, unsigned int)
    function void netdev_unbind_sb_channel(net_device*, net_device*)
    function void netdev_update_features(net_device*)
    function int netdev_upper_dev_link(net_device*, net_device*, netlink_ext_ack*)
    function void netdev_upper_dev_unlink(net_device*, net_device*)
    function net_device* netdev_upper_get_next_dev_rcu(net_device*, list_head**)
    function int netdev_walk_all_lower_dev(net_device*, void ()*, void*)
    function int netdev_walk_all_lower_dev_rcu(net_device*, void ()*, void*)
    function int netdev_walk_all_upper_dev_rcu(net_device*, void ()*, void*)
    function void netdev_warn(const net_device*, const char*, ...)
    function void netif_carrier_off(net_device*)
    function void netif_carrier_on(net_device*)
    function void netif_device_attach(net_device*)
    function void netif_device_detach(net_device*)
    function void netif_napi_add(net_device*, napi_struct*, void ()*, int)
    function void netif_napi_del(napi_struct*)
    function void netif_schedule_queue(netdev_queue*)
    function int netif_set_real_num_rx_queues(net_device*, unsigned int)
    function int netif_set_real_num_tx_queues(net_device*, unsigned int)
    function int netif_set_xps_queue(net_device*, const cpumask*, u16)
    function void netif_stacked_transfer_operstate(const net_device*, net_device*)
    function void netif_tx_stop_all_queues(net_device*)
    function void netif_tx_wake_queue(netdev_queue*)
    function int netlink_add_tap(netlink_tap*)
    function int netlink_broadcast(sock*, sk_buff*, u32, u32, gfp_t)
    function int netlink_broadcast_filtered(sock*, sk_buff*, u32, u32, gfp_t, void ()*, void*)
    function int netlink_has_listeners(sock*, unsigned int)
    function void netlink_kernel_release(sock*)
    function int netlink_remove_tap(netlink_tap*)
    function int netlink_set_err(sock*, u32, u32, int)
    function int netlink_unicast(sock*, sk_buff*, u32, int)
    function inode* new_inode(super_block*)
    function void nf_conntrack_helper_put(nf_conntrack_helper*)
    function int nf_conntrack_helper_register(nf_conntrack_helper*)
    function nf_conntrack_helper* nf_conntrack_helper_try_module_get(const char*, u16, u8)
    function void nf_conntrack_helper_unregister(nf_conntrack_helper*)
    function int nf_conntrack_helpers_register(nf_conntrack_helper*, unsigned int)
    function void nf_conntrack_helpers_unregister(nf_conntrack_helper*, unsigned int)
    function int nf_conntrack_set_hashsize(const char*, const kernel_param*)
    function nf_conntrack_expect* nf_ct_expect_alloc(nf_conn*)
    function nf_conntrack_expect* nf_ct_expect_find_get(net*, const nf_conntrack_zone*, const nf_conntrack_tuple*)
    function void nf_ct_expect_init(nf_conntrack_expect*, unsigned int, u_int8_t, const nf_inet_addr*, const nf_inet_addr*, u_int8_t, const __be16*, const __be16*)
    function void nf_ct_expect_iterate_destroy(void ()*, void*)
    function void nf_ct_expect_iterate_net(net*, void ()*, void*, u32, int)
    function void nf_ct_expect_put(nf_conntrack_expect*)
    function int nf_ct_expect_related_report(nf_conntrack_expect*, u32, int)
    function nf_conn_help* nf_ct_helper_ext_add(nf_conn*, gfp_t)
    function void nf_ct_helper_init(nf_conntrack_helper*, u16, u16, const char*, u16, u16, u32, const nf_conntrack_expect_policy*, u32, void ()*, void ()*, module*)
    function bool nf_ct_invert_tuple(nf_conntrack_tuple*, const nf_conntrack_tuple*, const nf_conntrack_l4proto*)
    function const nf_conntrack_l4proto* nf_ct_l4proto_find_get(u_int16_t, u_int8_t)
    function int nf_ct_l4proto_pernet_register(net*, const nf_conntrack_l4proto* const*, unsigned int)
    function int nf_ct_l4proto_pernet_register_one(net*, const nf_conntrack_l4proto*)
    function void nf_ct_l4proto_pernet_unregister(net*, const nf_conntrack_l4proto* const*, unsigned int)
    function void nf_ct_l4proto_pernet_unregister_one(net*, const nf_conntrack_l4proto*)
    function void nf_ct_l4proto_put(const nf_conntrack_l4proto*)
    function int nf_ct_l4proto_register_one(const nf_conntrack_l4proto*)
    function void nf_ct_l4proto_unregister_one(const nf_conntrack_l4proto*)
    function bool nf_ct_remove_expect(nf_conntrack_expect*)
    function void nf_ct_unexpect_related(nf_conntrack_expect*)
    function void nf_ct_unlink_expect_report(nf_conntrack_expect*, u32, int)
    function int nf_getsockopt(sock*, u_int8_t, int, char*, int*)
    function void nf_hook_entries_delete_raw(nf_hook_entries**, const nf_hook_ops*)
    function int nf_hook_entries_insert_raw(nf_hook_entries**, const nf_hook_ops*)
    function int nf_hook_slow(sk_buff*, nf_hook_state*, const nf_hook_entries*, unsigned int)
    function int nf_ip_reroute(sk_buff*, const nf_queue_entry*)
    function int nf_ip_route(net*, dst_entry**, flowi*, bool)
    function void nf_log_packet(net*, u_int8_t, unsigned int, const sk_buff*, const net_device*, const net_device*, const nf_loginfo*, const char*, ...)
    function void nf_log_trace(net*, u_int8_t, unsigned int, const sk_buff*, const net_device*, const net_device*, const nf_loginfo*, const char*, ...)
    function void nf_nat_follow_master(nf_conn*, nf_conntrack_expect*)
    function unsigned int nf_nat_inet_fn(void*, sk_buff*, const nf_hook_state*)
    function unsigned int nf_nat_ipv4_fn(void*, sk_buff*, const nf_hook_state*)
    function int nf_nat_l3proto_ipv4_register_fn(net*, const nf_hook_ops*)
    function void nf_nat_l3proto_ipv4_unregister_fn(net*, const nf_hook_ops*)
    function int nf_nat_l3proto_ipv6_register_fn(net*, const nf_hook_ops*)
    function void nf_nat_l3proto_ipv6_unregister_fn(net*, const nf_hook_ops*)
    function unsigned int nf_nat_masquerade_ipv4(sk_buff*, unsigned int, const nf_nat_range2*, const net_device*)
    function int nf_nat_register_fn(net*, const nf_hook_ops*, const nf_hook_ops*, unsigned int)
    function void nf_nat_unregister_fn(net*, const nf_hook_ops*, unsigned int)
    function void nf_queue_entry_get_refs(nf_queue_entry*)
    function void nf_queue_entry_release_refs(nf_queue_entry*)
    function int nf_register_net_hook(net*, const nf_hook_ops*)
    function int nf_register_net_hooks(net*, const nf_hook_ops*, unsigned int)
    function int nf_register_sockopt(nf_sockopt_ops*)
    function void nf_reinject(nf_queue_entry*, unsigned int)
    function int nf_route(net*, dst_entry**, flowi*, bool, unsigned short int)
    function int nf_setsockopt(sock*, u_int8_t, int, char*, unsigned int)
    function sock* nf_sk_lookup_slow_v4(net*, const sk_buff*, const net_device*)
    function sock* nf_sk_lookup_slow_v6(net*, const sk_buff*, const net_device*)
    function sock* nf_tproxy_get_sock_v4(net*, sk_buff*, const u8, const __be32, const __be32, const __be16, const __be16, const net_device*, const nf_tproxy_lookup_t)
    function sock* nf_tproxy_get_sock_v6(net*, sk_buff*, int, const u8, const in6_addr*, const in6_addr*, const __be16, const __be16, const net_device*, const nf_tproxy_lookup_t)
    function sock* nf_tproxy_handle_time_wait4(net*, sk_buff*, __be32, __be16, sock*)
    function sock* nf_tproxy_handle_time_wait6(sk_buff*, int, int, net*, const in6_addr*, const __be16, sock*)
    function void nf_unregister_net_hook(net*, const nf_hook_ops*)
    function void nf_unregister_net_hooks(net*, const nf_hook_ops*, unsigned int)
    function void nf_unregister_sockopt(nf_sockopt_ops*)
    function int nfnetlink_subsys_register(const nfnetlink_subsystem*)
    function int nfnetlink_subsys_unregister(const nfnetlink_subsystem*)
    function int nlmsg_notify(sock*, sk_buff*, u32, unsigned int, int, gfp_t)
    function loff_t no_llseek(file*, loff_t, int)
    function loff_t no_seek_end_llseek(file*, loff_t, int)
    function loff_t no_seek_end_llseek_size(file*, loff_t, int, loff_t)
    function int nobh_truncate_page(address_space*, loff_t, get_block_t*)
    function int nobh_write_begin(address_space*, loff_t, unsigned int, unsigned int, page**, void**, get_block_t*)
    function int nobh_write_end(file*, address_space*, loff_t, unsigned int, unsigned int, page*, void*)
    function int nobh_writepage(page*, get_block_t*, writeback_control*)
    function int nonseekable_open(inode*, file*)
    function int noop_fsync(file*, loff_t, loff_t, int)
    function loff_t noop_llseek(file*, loff_t, int)
    function int notify_change(dentry*, iattr*, inode**)
    function int notify_change2(vfsmount*, dentry*, iattr*, inode**)
    function nvmem_cell* nvmem_cell_get(device*, const char*)
    function int nvmem_cell_read_u32(device*, const char*, u32*)
    function nvmem_device* nvmem_device_get(device*, const char*)
    function nvmem_device* nvmem_register(const nvmem_config*)
    function int of_address_to_resource(device_node*, int, resource*)
    function int of_alias_get_id(device_node*, const char*)
    function int of_clk_add_hw_provider(device_node*, void ()*, void*)
    function int of_clk_add_provider(device_node*, void ()*, void*)
    function void of_clk_del_provider(device_node*)
    function clk* of_clk_get(device_node*, int)
    function clk* of_clk_get_by_name(device_node*, const char*)
    function clk* of_clk_get_from_provider(of_phandle_args*)
    function unsigned int of_clk_get_parent_count(device_node*)
    function const char* of_clk_get_parent_name(device_node*, int)
    function clk_hw* of_clk_hw_onecell_get(of_phandle_args*, void*)
    function clk_hw* of_clk_hw_simple_get(of_phandle_args*, void*)
    function int of_clk_parent_fill(device_node*, const char**, unsigned int)
    function int of_clk_set_defaults(device_node*, bool)
    function clk* of_clk_src_onecell_get(of_phandle_args*, void*)
    function clk* of_clk_src_simple_get(of_phandle_args*, void*)
    function bool of_console_check(device_node*, char*, int)
    function int of_coresight_get_cpu(const device_node*)
    function int of_count_phandle_with_args(const device_node*, const char*, const char*)
    function int of_cpu_node_to_id(device_node*)
    function thermal_cooling_device* of_cpufreq_cooling_register(cpufreq_policy*)
    function cgroup_subsys_state* of_css(kernfs_open_file*)
    function platform_device* of_dev_get(platform_device*)
    function dev_pm_opp* of_dev_pm_opp_find_required_opp(device*, device_node*)
    function void of_dev_put(platform_device*)
    function thermal_cooling_device* of_devfreq_cooling_register(device_node*, devfreq*)
    function thermal_cooling_device* of_devfreq_cooling_register_power(device_node*, devfreq*, devfreq_cooling_power*)
    function platform_device* of_device_alloc(device_node*, const char*, device*)
    function void* of_device_get_match_data(const device*)
    function bool of_device_is_available(const device_node*)
    function bool of_device_is_big_endian(const device_node*)
    function int of_device_is_compatible(const device_node*, const char*)
    function ssize_t of_device_modalias(device*, char*, ssize_t)
    function int of_device_register(platform_device*)
    function int of_device_request_module(device*)
    function int of_device_uevent_modalias(device*, kobj_uevent_env*)
    function void of_device_unregister(platform_device*)
    function int of_dma_configure(device*, device_node*, bool)
    function void of_dma_controller_free(device_node*)
    function int of_dma_controller_register(device_node*, void ()*, void*)
    function int of_dma_get_range(device_node*, u64*, u64*, u64*)
    function bool of_dma_is_coherent(device_node*)
    function dma_chan* of_dma_request_slave_channel(device_node*, const char*)
    function int of_dma_router_register(device_node*, void ()*, dma_router*)
    function dma_chan* of_dma_simple_xlate(of_phandle_args*, of_dma*)
    function dma_chan* of_dma_xlate_by_chan_id(of_phandle_args*, of_dma*)
    function drm_bridge* of_drm_find_bridge(device_node*)
    function drm_panel* of_drm_find_panel(const device_node*)
    function void* of_fdt_unflatten_tree(const unsigned long int*, device_node*, device_node**)
    function device_node* of_find_all_nodes(device_node*)
    function device_node* of_find_compatible_node(device_node*, const char*, const char*)
    function platform_device* of_find_device_by_node(device_node*)
    function i2c_adapter* of_find_i2c_adapter_by_node(device_node*)
    function i2c_client* of_find_i2c_device_by_node(device_node*)
    function device_node* of_find_matching_node_and_match(device_node*, const of_device_id*, const of_device_id**)
    function mipi_dsi_device* of_find_mipi_dsi_device_by_node(device_node*)
    function mipi_dsi_host* of_find_mipi_dsi_host_by_node(device_node*)
    function net_device* of_find_net_device_by_node(device_node*)
    function device_node* of_find_node_by_name(device_node*, const char*)
    function device_node* of_find_node_by_phandle(phandle)
    function device_node* of_find_node_by_type(device_node*, const char*)
    function device_node* of_find_node_opts_by_path(const char*, const char**)
    function device_node* of_find_node_with_property(device_node*, const char*)
    function property* of_find_property(const device_node*, const char*, int*)
    function gen_pool* of_gen_pool_get(device_node*, const char*, int)
    function int of_genpd_add_device(of_phandle_args*, device*)
    function int of_genpd_add_provider_onecell(device_node*, genpd_onecell_data*)
    function int of_genpd_add_provider_simple(device_node*, generic_pm_domain*)
    function int of_genpd_add_subdomain(of_phandle_args*, of_phandle_args*)
    function void of_genpd_del_provider(device_node*)
    function unsigned int of_genpd_opp_to_performance_state(device*, device_node*)
    function int of_genpd_parse_idle_states(device_node*, genpd_power_state**, int*)
    function generic_pm_domain* of_genpd_remove_last(device_node*)
    function const __be32* of_get_address(device_node*, int, u64*, unsigned int*)
    function device_node* of_get_child_by_name(const device_node*, const char*)
    function device_node* of_get_compatible_child(const device_node*, const char*)
    function coresight_platform_data* of_get_coresight_platform_data(device*, const device_node*)
    function device_node* of_get_cpu_node(int, unsigned int*)
    function int of_get_display_timing(const device_node*, const char*, display_timing*)
    function display_timings* of_get_display_timings(const device_node*)
    function int of_get_dma_window(device_node*, const char*, int, unsigned long int*, dma_addr_t*, size_t*)
    function int of_get_drm_display_mode(device_node*, drm_display_mode*, u32*, int)
    function i2c_adapter* of_get_i2c_adapter_by_node(device_node*)
    function void* of_get_mac_address(device_node*)
    function int of_get_named_gpio_flags(device_node*, const char*, int, of_gpio_flags*)
    function device_node* of_get_next_available_child(const device_node*, device_node*)
    function device_node* of_get_next_child(const device_node*, device_node*)
    function device_node* of_get_next_parent(device_node*)
    function int of_get_nvmem_mac_address(device_node*, void*)
    function device_node* of_get_parent(const device_node*)
    function const __be32* of_get_pci_address(device_node*, int, u64*, unsigned int*)
    function int of_get_pci_domain_nr(device_node*)
    function int of_get_phy_mode(device_node*)
    function void* of_get_property(const device_node*, const char*, int*)
    function regulator_init_data* of_get_regulator_init_data(device*, device_node*, const regulator_desc*)
    function int of_get_videomode(device_node*, videomode*, int)
    function int of_gpio_simple_xlate(gpio_chip*, const of_phandle_args*, u32*)
    function device_node* of_graph_get_endpoint_by_regs(const device_node*, int, int)
    function int of_graph_get_endpoint_count(const device_node*)
    function device_node* of_graph_get_next_endpoint(const device_node*, device_node*)
    function device_node* of_graph_get_port_by_id(device_node*, u32)
    function device_node* of_graph_get_port_parent(device_node*)
    function device_node* of_graph_get_remote_endpoint(const device_node*)
    function device_node* of_graph_get_remote_node(const device_node*, u32, u32)
    function device_node* of_graph_get_remote_port(const device_node*)
    function device_node* of_graph_get_remote_port_parent(const device_node*)
    function int of_graph_parse_endpoint(const device_node*, of_endpoint*)
    function int of_hwspin_lock_get_id(device_node*, int)
    function int of_hwspin_lock_get_id_byname(device_node*, const char*)
    function int of_i2c_get_board_info(device*, device_node*, i2c_board_info*)
    function int of_iio_read_mount_matrix(const device*, const char*, iio_mount_matrix*)
    function void* of_io_request_and_map(device_node*, int, const char*)
    function void* of_iomap(device_node*, int)
    function device_node* of_irq_find_parent(device_node*)
    function int of_irq_get(device_node*, int)
    function int of_irq_get_byname(device_node*, const char*)
    function int of_irq_parse_and_map_pci(const pci_dev*, u8, u8)
    function int of_irq_parse_one(device_node*, int, of_phandle_args*)
    function int of_irq_parse_raw(const __be32*, of_phandle_args*)
    function int of_irq_to_resource(device_node*, int, resource*)
    function int of_irq_to_resource_table(device_node*, resource*, int)
    function int of_led_classdev_register(device*, device_node*, led_classdev*)
    function const of_device_id* of_match_device(const of_device_id*, const device*)
    function const of_device_id* of_match_node(const of_device_id*, const device_node*)
    function mii_bus* of_mdio_find_bus(device_node*)
    function int of_mdiobus_register(mii_bus*, device_node*)
    function int of_mm_gpiochip_add_data(device_node*, of_mm_gpio_chip*, void*)
    function void of_mm_gpiochip_remove(of_mm_gpio_chip*)
    function int of_modalias_node(device_node*, char*, int)
    function void of_msi_configure(device*, device_node*)
    function int of_n_addr_cells(device_node*)
    function int of_n_size_cells(device_node*)
    function bool of_node_name_eq(const device_node*, const char*)
    function bool of_node_name_prefix(const device_node*, const char*)
    function nvmem_cell* of_nvmem_cell_get(device_node*, const char*)
    function nvmem_device* of_nvmem_device_get(device_node*, const char*)
    function device_node* of_parse_phandle(const device_node*, const char*, int)
    function int of_parse_phandle_with_args(const device_node*, const char*, const char*, int, of_phandle_args*)
    function int of_parse_phandle_with_args_map(const device_node*, const char*, const char*, int, of_phandle_args*)
    function int of_parse_phandle_with_fixed_args(const device_node*, const char*, int, int, of_phandle_args*)
    function int of_pci_address_to_resource(device_node*, int, resource*)
    function int of_pci_dma_range_parser_init(of_pci_range_parser*, device_node*)
    function device_node* of_pci_find_child_device(device_node*, unsigned int)
    function int of_pci_get_devfn(device_node*)
    function int of_pci_get_max_link_speed(device_node*)
    function int of_pci_parse_bus_range(device_node*, resource*)
    function int of_pci_range_parser_init(of_pci_range_parser*, device_node*)
    function of_pci_range* of_pci_range_parser_one(of_pci_range_parser*, of_pci_range*)
    function int of_pci_range_to_resource(of_pci_range*, device_node*, resource*)
    function int of_phandle_iterator_init(of_phandle_iterator*, const device_node*, const char*, const char*, int)
    function int of_phandle_iterator_next(of_phandle_iterator*)
    function phy_device* of_phy_attach(net_device*, device_node*, u32, phy_interface_t)
    function phy_device* of_phy_connect(net_device*, device_node*, void ()*, u32, phy_interface_t)
    function void of_phy_deregister_fixed_link(device_node*)
    function phy_device* of_phy_find_device(device_node*)
    function phy* of_phy_get(device_node*, const char*)
    function phy_device* of_phy_get_and_connect(net_device*, device_node*, void ()*)
    function bool of_phy_is_fixed_link(device_node*)
    function void of_phy_provider_unregister(phy_provider*)
    function int of_phy_register_fixed_link(device_node*)
    function phy* of_phy_simple_xlate(device*, of_phandle_args*)
    function int of_platform_bus_probe(device_node*, const of_device_id*, device*)
    function int of_platform_default_populate(device_node*, const of_dev_auxdata*, device*)
    function void of_platform_depopulate(device*)
    function platform_device* of_platform_device_create(device_node*, const char*, device*)
    function int of_platform_device_destroy(device*, void*)
    function int of_platform_populate(device_node*, const of_device_id*, const of_dev_auxdata*, device*)
    function int of_pm_clk_add_clk(device*, const char*)
    function int of_pm_clk_add_clks(device*)
    function const char* of_prop_next_string(property*, const char*)
    function const __be32* of_prop_next_u32(property*, const __be32*, u32*)
    function int of_property_count_elems_of_size(const device_node*, const char*, int)
    function int of_property_match_string(const device_node*, const char*, const char*)
    function int of_property_read_string(const device_node*, const char*, const char**)
    function int of_property_read_string_helper(const device_node*, const char*, const char**, size_t, int)
    function int of_property_read_u32_index(const device_node*, const char*, u32, u32*)
    function int of_property_read_u64(const device_node*, const char*, u64*)
    function int of_property_read_u64_index(const device_node*, const char*, u32, u64*)
    function int of_property_read_variable_u16_array(const device_node*, const char*, u16*, size_t, size_t)
    function int of_property_read_variable_u32_array(const device_node*, const char*, u32*, size_t, size_t)
    function int of_property_read_variable_u64_array(const device_node*, const char*, u64*, size_t, size_t)
    function int of_property_read_variable_u8_array(const device_node*, const char*, u8*, size_t, size_t)
    function pwm_device* of_pwm_get(device_node*, const char*)
    function pwm_device* of_pwm_xlate_with_flags(pwm_chip*, const of_phandle_args*)
    function int of_regulator_match(device*, device_node*, of_regulator_match*, unsigned int)
    function int of_reserved_mem_device_init_by_idx(device*, device_node*, int)
    function void of_reserved_mem_device_release(device*)
    function reserved_mem* of_reserved_mem_lookup(device_node*)
    function reset_control* of_reset_control_array_get(device_node*, bool, bool)
    function int of_thermal_get_ntrips(thermal_zone_device*)
    function const thermal_trip* of_thermal_get_trip_points(thermal_zone_device*)
    function bool of_thermal_is_trip_valid(thermal_zone_device*, int)
    function u64 of_translate_address(device_node*, const __be32*)
    function u64 of_translate_dma_address(device_node*, const __be32*)
    function usb_dr_mode of_usb_get_dr_mode_by_phy(device_node*, int)
    function usb_phy_interface of_usb_get_phy_mode(device_node*)
    function bool of_usb_host_tpl_support(device_node*)
    function int of_usb_update_otg_caps(device_node*, usb_otg_caps*)
    function file* open_exec(const char*)
    function file* open_with_fake_path(const path*, int, inode*, const cred*)
    function void page_cache_async_readahead(address_space*, file_ra_state*, file*, page*, unsigned long int, unsigned long int)
    function void page_cache_sync_readahead(address_space*, file_ra_state*, file*, unsigned long int, unsigned long int)
    function const char* page_get_link(dentry*, inode*, delayed_call*)
    function int page_readlink(dentry*, char*, int)
    function int page_symlink(inode*, const char*, int)
    function void pagecache_isize_extended(inode*, loff_t, loff_t)
    function int pagecache_write_begin(file*, address_space*, loff_t, unsigned int, unsigned int, page**, void**)
    function int pagecache_write_end(file*, address_space*, loff_t, unsigned int, unsigned int, page*, void*)
    function int param_get_bool(char*, const kernel_param*)
    function int param_get_byte(char*, const kernel_param*)
    function int param_get_charp(char*, const kernel_param*)
    function int param_get_int(char*, const kernel_param*)
    function int param_get_invbool(char*, const kernel_param*)
    function int param_get_long(char*, const kernel_param*)
    function int param_get_short(char*, const kernel_param*)
    function int param_get_string(char*, const kernel_param*)
    function int param_get_uint(char*, const kernel_param*)
    function int param_get_ullong(char*, const kernel_param*)
    function int param_get_ulong(char*, const kernel_param*)
    function int param_get_ushort(char*, const kernel_param*)
    function int param_set_bint(const char*, const kernel_param*)
    function int param_set_bool(const char*, const kernel_param*)
    function int param_set_bool_enable_only(const char*, const kernel_param*)
    function int param_set_byte(const char*, const kernel_param*)
    function int param_set_charp(const char*, const kernel_param*)
    function int param_set_copystring(const char*, const kernel_param*)
    function int param_set_int(const char*, const kernel_param*)
    function int param_set_invbool(const char*, const kernel_param*)
    function int param_set_long(const char*, const kernel_param*)
    function int param_set_short(const char*, const kernel_param*)
    function int param_set_uint(const char*, const kernel_param*)
    function int param_set_ullong(const char*, const kernel_param*)
    function int param_set_ulong(const char*, const kernel_param*)
    function int param_set_ushort(const char*, const kernel_param*)
    function void part_round_stats(request_queue*, int, hd_struct*)
    function netdev_features_t passthru_features_check(sk_buff*, net_device*, netdev_features_t)
    function int pci_add_dynid(pci_driver*, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned long int)
    function pci_bus* pci_add_new_bus(pci_bus*, pci_dev*, int)
    function pci_dev* pci_alloc_dev(pci_bus*)
    function pci_host_bridge* pci_alloc_host_bridge(size_t)
    function int pci_alloc_irq_vectors_affinity(pci_dev*, unsigned int, unsigned int, unsigned int, const irq_affinity*)
    function int pci_assign_resource(pci_dev*, int)
    function void pci_assign_unassigned_bridge_resources(pci_dev*)
    function void pci_assign_unassigned_bus_resources(pci_bus*)
    function int pci_back_from_sleep(pci_dev*)
    function int pci_bridge_secondary_bus_reset(pci_dev*)
    function void pci_bus_add_device(pci_dev*)
    function void pci_bus_add_devices(const pci_bus*)
    function int pci_bus_alloc_resource(pci_bus*, resource*, resource_size_t, resource_size_t, resource_size_t, unsigned long int, void ()*, void*)
    function void pci_bus_assign_resources(const pci_bus*)
    function void pci_bus_claim_resources(pci_bus*)
    function int pci_bus_find_capability(pci_bus*, unsigned int, int)
    function pci_bus* pci_bus_get(pci_bus*)
    function unsigned char pci_bus_max_busnr(pci_bus*)
    function void pci_bus_put(pci_bus*)
    function int pci_bus_read_config_byte(pci_bus*, unsigned int, int, u8*)
    function int pci_bus_read_config_dword(pci_bus*, unsigned int, int, u32*)
    function int pci_bus_read_config_word(pci_bus*, unsigned int, int, u16*)
    function bool pci_bus_read_dev_vendor_id(pci_bus*, int, u32*, int)
    function resource* pci_bus_resource_n(const pci_bus*, int)
    function pci_ops* pci_bus_set_ops(pci_bus*, pci_ops*)
    function void pci_bus_size_bridges(pci_bus*)
    function int pci_bus_write_config_byte(pci_bus*, unsigned int, int, u8)
    function int pci_bus_write_config_dword(pci_bus*, unsigned int, int, u32)
    function int pci_bus_write_config_word(pci_bus*, unsigned int, int, u16)
    function void pci_cfg_access_lock(pci_dev*)
    function bool pci_cfg_access_trylock(pci_dev*)
    function void pci_cfg_access_unlock(pci_dev*)
    function bool pci_check_and_mask_intx(pci_dev*)
    function bool pci_check_and_unmask_intx(pci_dev*)
    function pci_power_t pci_choose_state(pci_dev*, pm_message_t)
    function int pci_claim_resource(pci_dev*, int)
    function void pci_clear_master(pci_dev*)
    function void pci_clear_mwi(pci_dev*)
    function u8 pci_common_swizzle(pci_dev*, u8*)
    function pci_bus* pci_create_root_bus(device*, int, pci_ops*, void*, list_head*)
    function pci_slot* pci_create_slot(pci_bus*, int, const char*, hotplug_slot*)
    function void pci_d3cold_disable(pci_dev*)
    function void pci_d3cold_enable(pci_dev*)
    function void pci_destroy_slot(pci_slot*)
    function pci_driver* pci_dev_driver(const pci_dev*)
    function pci_dev* pci_dev_get(pci_dev*)
    function void pci_dev_put(pci_dev*)
    function bool pci_dev_run_wake(pci_dev*)
    function bool pci_device_is_present(pci_dev*)
    function void pci_disable_device(pci_dev*)
    function void pci_disable_msi(pci_dev*)
    function void pci_disable_msix(pci_dev*)
    function void pci_disable_rom(pci_dev*)
    function int pci_enable_atomic_ops_to_root(pci_dev*, u32)
    function int pci_enable_device(pci_dev*)
    function int pci_enable_device_io(pci_dev*)
    function int pci_enable_device_mem(pci_dev*)
    function int pci_enable_msi(pci_dev*)
    function int pci_enable_msix_range(pci_dev*, msix_entry*, int, int)
    function int pci_enable_rom(pci_dev*)
    function int pci_enable_wake(pci_dev*, pci_power_t, bool)
    function pci_bus* pci_find_bus(int, int)
    function int pci_find_capability(pci_dev*, int)
    function int pci_find_ext_capability(pci_dev*, int)
    function int pci_find_ht_capability(pci_dev*, int)
    function pci_bus* pci_find_next_bus(const pci_bus*)
    function int pci_find_next_capability(pci_dev*, u8, int)
    function int pci_find_next_ext_capability(pci_dev*, int, int)
    function int pci_find_next_ht_capability(pci_dev*, int, int)
    function resource* pci_find_parent_resource(const pci_dev*, resource*)
    function pci_dev* pci_find_pcie_root_port(pci_dev*)
    function resource* pci_find_resource(pci_dev*, resource*)
    function void pci_fixup_cardbus(pci_bus*)
    function void pci_fixup_device(pci_fixup_pass, pci_dev*)
    function void pci_free_host_bridge(pci_host_bridge*)
    function void pci_free_irq(pci_dev*, unsigned int, void*)
    function void pci_free_irq_vectors(pci_dev*)
    function int pci_generic_config_read(pci_bus*, unsigned int, int, int, u32*)
    function int pci_generic_config_read32(pci_bus*, unsigned int, int, int, u32*)
    function int pci_generic_config_write(pci_bus*, unsigned int, int, int, u32)
    function int pci_generic_config_write32(pci_bus*, unsigned int, int, int, u32)
    function pci_dev* pci_get_class(unsigned int, pci_dev*)
    function pci_dev* pci_get_device(unsigned int, unsigned int, pci_dev*)
    function pci_dev* pci_get_domain_bus_and_slot(int, unsigned int, unsigned int)
    function pci_dev* pci_get_slot(pci_bus*, unsigned int)
    function pci_dev* pci_get_subsys(unsigned int, unsigned int, unsigned int, unsigned int, pci_dev*)
    function int pci_host_probe(pci_host_bridge*)
    function int pci_hp_add_bridge(pci_dev*)
    function void pci_ignore_hotplug(pci_dev*)
    function void pci_intx(pci_dev*, int)
    function void* pci_iomap(pci_dev*, int, unsigned long int)
    function void* pci_iomap_range(pci_dev*, int, unsigned long int, unsigned long int)
    function void* pci_iomap_wc(pci_dev*, int, unsigned long int)
    function void* pci_iomap_wc_range(pci_dev*, int, unsigned long int, unsigned long int)
    function void* pci_ioremap_bar(pci_dev*, int)
    function void* pci_ioremap_wc_bar(pci_dev*, int)
    function const cpumask* pci_irq_get_affinity(pci_dev*, int)
    function int pci_irq_get_node(pci_dev*, int)
    function int pci_irq_vector(pci_dev*, unsigned int)
    function int pci_load_and_free_saved_state(pci_dev*, pci_saved_state**)
    function int pci_load_saved_state(pci_dev*, pci_saved_state*)
    function pci_lost_interrupt_reason pci_lost_interrupt(pci_dev*)
    function void* pci_map_rom(pci_dev*, size_t*)
    function const pci_device_id* pci_match_id(const pci_device_id*, pci_dev*)
    function irq_domain* pci_msi_create_irq_domain(fwnode_handle*, msi_domain_info*, irq_domain*)
    function void pci_msi_mask_irq(irq_data*)
    function void pci_msi_unmask_irq(irq_data*)
    function int pci_msi_vec_count(pci_dev*)
    function int pci_msix_vec_count(pci_dev*)
    function void* pci_platform_rom(pci_dev*, size_t*)
    function void pci_pme_active(pci_dev*, bool)
    function bool pci_pme_capable(pci_dev*, pci_power_t)
    function int pci_prepare_to_sleep(pci_dev*)
    function int pci_probe_reset_bus(pci_bus*)
    function int pci_probe_reset_slot(pci_slot*)
    function int pci_read_config_byte(const pci_dev*, int, u8*)
    function int pci_read_config_dword(const pci_dev*, int, u32*)
    function int pci_read_config_word(const pci_dev*, int, u16*)
    function ssize_t pci_read_vpd(pci_dev*, loff_t, size_t, void*)
    function int pci_reenable_device(pci_dev*)
    function void pci_release_region(pci_dev*, int)
    function void pci_release_regions(pci_dev*)
    function void pci_release_resource(pci_dev*, int)
    function void pci_release_selected_regions(pci_dev*, int)
    function void pci_remove_bus(pci_bus*)
    function void pci_remove_root_bus(pci_bus*)
    function int pci_request_irq(pci_dev*, unsigned int, irq_handler_t, irq_handler_t, void*, const char*, ...)
    function int pci_request_region(pci_dev*, int, const char*)
    function int pci_request_region_exclusive(pci_dev*, int, const char*)
    function int pci_request_regions(pci_dev*, const char*)
    function int pci_request_regions_exclusive(pci_dev*, const char*)
    function int pci_request_selected_regions(pci_dev*, int, const char*)
    function int pci_request_selected_regions_exclusive(pci_dev*, int, const char*)
    function unsigned int pci_rescan_bus(pci_bus*)
    function int pci_reset_bus(pci_dev*)
    function int pci_reset_function(pci_dev*)
    function int pci_reset_function_locked(pci_dev*)
    function int pci_resize_resource(pci_dev*, int, int)
    function void pci_restore_msi_state(pci_dev*)
    function void pci_restore_state(pci_dev*)
    function int pci_save_state(pci_dev*)
    function int pci_scan_bridge(pci_bus*, pci_dev*, int, int)
    function pci_bus* pci_scan_bus(int, pci_ops*, void*)
    function unsigned int pci_scan_child_bus(pci_bus*)
    function pci_bus* pci_scan_root_bus(device*, int, pci_ops*, void*, list_head*)
    function int pci_scan_root_bus_bridge(pci_host_bridge*)
    function pci_dev* pci_scan_single_device(pci_bus*, int)
    function int pci_scan_slot(pci_bus*, int)
    function int pci_select_bars(pci_dev*, unsigned long int)
    function int pci_set_cacheline_size(pci_dev*)
    function void pci_set_host_bridge_release(pci_host_bridge*, void ()*, void*)
    function void pci_set_master(pci_dev*)
    function int pci_set_mwi(pci_dev*)
    function int pci_set_pcie_reset_state(pci_dev*, pcie_reset_state)
    function int pci_set_power_state(pci_dev*, pci_power_t)
    function int pci_set_vpd_size(pci_dev*, size_t)
    function void pci_setup_cardbus(pci_bus*)
    function void pci_stop_and_remove_bus_device(pci_dev*)
    function void pci_stop_and_remove_bus_device_locked(pci_dev*)
    function void pci_stop_root_bus(pci_bus*)
    function pci_saved_state* pci_store_saved_state(pci_dev*)
    function int pci_try_reset_function(pci_dev*)
    function int pci_try_set_mwi(pci_dev*)
    function void pci_unmap_rom(pci_dev*, void*)
    function void pci_unregister_driver(pci_driver*)
    function int pci_user_read_config_byte(pci_dev*, int, u8*)
    function int pci_user_read_config_dword(pci_dev*, int, u32*)
    function int pci_user_read_config_word(pci_dev*, int, u16*)
    function int pci_user_write_config_byte(pci_dev*, int, u8)
    function int pci_user_write_config_dword(pci_dev*, int, u32)
    function int pci_user_write_config_word(pci_dev*, int, u16)
    function int pci_wait_for_pending_transaction(pci_dev*)
    function int pci_wake_from_d3(pci_dev*, bool)
    function void pci_walk_bus(pci_bus*, void ()*, void*)
    function int pci_write_config_byte(const pci_dev*, int, u8)
    function int pci_write_config_dword(const pci_dev*, int, u32)
    function int pci_write_config_word(const pci_dev*, int, u16)
    function ssize_t pci_write_vpd(pci_dev*, loff_t, size_t, void*)
    function void pcibios_bus_to_resource(pci_bus*, resource*, pci_bus_region*)
    function void pcibios_resource_to_bus(pci_bus*, pci_bus_region*, resource*)
    function u32 pcie_bandwidth_available(pci_dev*, pci_dev**, pci_bus_speed*, pcie_link_width*)
    function void pcie_bus_configure_settings(pci_bus*)
    function int pcie_capability_clear_and_set_dword(pci_dev*, int, u32, u32)
    function int pcie_capability_clear_and_set_word(pci_dev*, int, u16, u16)
    function int pcie_capability_read_dword(pci_dev*, int, u32*)
    function int pcie_capability_read_word(pci_dev*, int, u16*)
    function int pcie_capability_write_dword(pci_dev*, int, u32)
    function int pcie_capability_write_word(pci_dev*, int, u16)
    function int pcie_flr(pci_dev*)
    function int pcie_get_mps(pci_dev*)
    function int pcie_get_readrq(pci_dev*)
    function pci_bus_speed pcie_get_speed_cap(pci_dev*)
    function pcie_link_width pcie_get_width_cap(pci_dev*)
    function bool pcie_has_flr(pci_dev*)
    function void pcie_print_link_status(pci_dev*)
    function bool pcie_relaxed_ordering_enabled(pci_dev*)
    function int pcie_set_mps(pci_dev*, int)
    function int pcie_set_readrq(pci_dev*, int)
    function void pcie_update_link_speed(pci_bus*, u16)
    function int pcim_enable_device(pci_dev*)
    function void* pcim_iomap(pci_dev*, int, unsigned long int)
    function int pcim_iomap_regions(pci_dev*, int, const char*)
    function int pcim_iomap_regions_request_all(pci_dev*, int, const char*)
    function void* const* pcim_iomap_table(pci_dev*)
    function void pcim_iounmap(pci_dev*, void*)
    function void pcim_iounmap_regions(pci_dev*, int)
    function void pcim_pin_device(pci_dev*)
    function int pcim_set_mwi(pci_dev*)
    function serial_private* pciserial_init_ports(pci_dev*, const pciserial_board*)
    function void pciserial_remove_ports(serial_private*)
    function void pciserial_resume_ports(serial_private*)
    function void pciserial_suspend_ports(serial_private*)
    function int pcix_get_max_mmrbc(pci_dev*)
    function int pcix_get_mmrbc(pci_dev*)
    function int pcix_set_mmrbc(pci_dev*, int)
    function void* perf_aux_output_begin(perf_output_handle*, perf_event*)
    function void perf_aux_output_end(perf_output_handle*, unsigned long int)
    function void perf_aux_output_flag(perf_output_handle*, u64)
    function int perf_aux_output_skip(perf_output_handle*, unsigned long int)
    function void perf_event_addr_filters_sync(perf_event*)
    function perf_event* perf_event_create_kernel_counter(perf_event_attr*, int, task_struct*, perf_overflow_handler_t, void*)
    function void perf_event_disable(perf_event*)
    function void perf_event_enable(perf_event*)
    function u64 perf_event_read_value(perf_event*, u64*, u64*)
    function int perf_event_refresh(perf_event*, int)
    function int perf_event_release_kernel(perf_event*)
    function ssize_t perf_event_sysfs_show(device*, device_attribute*, char*)
    function void perf_event_update_userpage(perf_event*)
    function void* perf_get_aux(perf_output_handle*)
    function void perf_pmu_migrate_context(pmu*, int, int)
    function int perf_pmu_register(pmu*, const char*, int)
    function void perf_pmu_unregister(pmu*)
    function void perf_trace_run_bpf_submit(void*, int, int, trace_event_call*, u64, pt_regs*, hlist_head*, task_struct*)
    function int phy_aneg_done(phy_device*)
    function phy_device* phy_attach(net_device*, const char*, phy_interface_t)
    function int phy_attach_direct(net_device*, phy_device*, u32, phy_interface_t)
    function void phy_attached_info(phy_device*)
    function void phy_attached_print(phy_device*, const char*, ...)
    function int phy_calibrate(phy*)
    function phy_device* phy_connect(net_device*, const char*, void ()*, phy_interface_t)
    function int phy_connect_direct(net_device*, phy_device*, void ()*, phy_interface_t)
    function phy* phy_create(device*, device_node*, const phy_ops*)
    function int phy_create_lookup(phy*, const char*, const char*)
    function void phy_destroy(phy*)
    function void phy_detach(phy_device*)
    function phy_device* phy_device_create(mii_bus*, int, int, bool, phy_c45_device_ids*)
    function void phy_device_free(phy_device*)
    function int phy_device_register(phy_device*)
    function void phy_device_remove(phy_device*)
    function void phy_disconnect(phy_device*)
    function int phy_driver_register(phy_driver*, module*)
    function void phy_driver_unregister(phy_driver*)
    function int phy_drivers_register(phy_driver*, int, module*)
    function void phy_drivers_unregister(phy_driver*, int)
    function int phy_ethtool_get_eee(phy_device*, ethtool_eee*)
    function int phy_ethtool_get_link_ksettings(net_device*, ethtool_link_ksettings*)
    function void phy_ethtool_get_wol(phy_device*, ethtool_wolinfo*)
    function void phy_ethtool_ksettings_get(phy_device*, ethtool_link_ksettings*)
    function int phy_ethtool_ksettings_set(phy_device*, const ethtool_link_ksettings*)
    function int phy_ethtool_nway_reset(net_device*)
    function int phy_ethtool_set_eee(phy_device*, ethtool_eee*)
    function int phy_ethtool_set_link_ksettings(net_device*, const ethtool_link_ksettings*)
    function int phy_ethtool_set_wol(phy_device*, ethtool_wolinfo*)
    function int phy_ethtool_sset(phy_device*, ethtool_cmd*)
    function int phy_exit(phy*)
    function phy_device* phy_find_first(mii_bus*)
    function phy* phy_get(device*, const char*)
    function int phy_get_eee_err(phy_device*)
    function int phy_init(phy*)
    function int phy_init_eee(phy_device*, bool)
    function int phy_init_hw(phy_device*)
    function int phy_loopback(phy_device*, bool)
    function void phy_mac_interrupt(phy_device*)
    function int phy_mii_ioctl(phy_device*, ifreq*, int)
    function int phy_modify(phy_device*, u32, u16, u16)
    function int phy_modify_paged(phy_device*, int, u32, u16, u16)
    function phy* phy_optional_get(device*, const char*)
    function void phy_pm_runtime_allow(phy*)
    function void phy_pm_runtime_forbid(phy*)
    function int phy_pm_runtime_get(phy*)
    function int phy_pm_runtime_get_sync(phy*)
    function int phy_pm_runtime_put(phy*)
    function int phy_pm_runtime_put_sync(phy*)
    function int phy_power_off(phy*)
    function int phy_power_on(phy*)
    function void phy_print_status(phy_device*)
    function void phy_put(phy*)
    function int phy_read_mmd(phy_device*, int, u32)
    function int phy_read_paged(phy_device*, int, u32)
    function int phy_register_fixup(const char*, u32, u32, void ()*)
    function int phy_register_fixup_for_id(const char*, void ()*)
    function int phy_register_fixup_for_uid(u32, u32, void ()*)
    function void phy_remove_lookup(phy*, const char*, const char*)
    function int phy_reset(phy*)
    function int phy_reset_after_clk_enable(phy_device*)
    function void phy_resolve_aneg_linkmode(phy_device*)
    function int phy_restart_aneg(phy_device*)
    function int phy_restore_page(phy_device*, int, int)
    function int phy_resume(phy_device*)
    function int phy_save_page(phy_device*)
    function int phy_select_page(phy_device*, int)
    function int phy_set_max_speed(phy_device*, u32)
    function int phy_set_mode(phy*, phy_mode)
    function int phy_speed_down(phy_device*, bool)
    function int phy_speed_up(phy_device*)
    function void phy_start(phy_device*)
    function int phy_start_aneg(phy_device*)
    function int phy_start_interrupts(phy_device*)
    function void phy_start_machine(phy_device*)
    function void phy_stop(phy_device*)
    function int phy_stop_interrupts(phy_device*)
    function int phy_suspend(phy_device*)
    function int phy_write_mmd(phy_device*, int, u32, u16)
    function int phy_write_paged(phy_device*, int, u32, u16)
    function pgprot_t phys_mem_access_prot(file*, unsigned long int, unsigned long int, pgprot_t)
    function pid_t pid_nr_ns(pid*, pid_namespace*)
    function bool pin_is_valid(pinctrl_dev*, int)
    function void pinconf_generic_dt_free_map(pinctrl_dev*, pinctrl_map*, unsigned int)
    function int pinconf_generic_dt_node_to_map(pinctrl_dev*, device_node*, pinctrl_map**, unsigned int*, pinctrl_map_type)
    function int pinconf_generic_dt_subnode_to_map(pinctrl_dev*, device_node*, pinctrl_map**, unsigned int*, unsigned int*, pinctrl_map_type)
    function void pinconf_generic_dump_config(pinctrl_dev*, seq_file*, unsigned long int)
    function void pinctrl_add_gpio_range(pinctrl_dev*, pinctrl_gpio_range*)
    function void pinctrl_add_gpio_ranges(pinctrl_dev*, pinctrl_gpio_range*, unsigned int)
    function int pinctrl_count_index_with_args(const device_node*, const char*)
    function const char* pinctrl_dev_get_devname(pinctrl_dev*)
    function void* pinctrl_dev_get_drvdata(pinctrl_dev*)
    function const char* pinctrl_dev_get_name(pinctrl_dev*)
    function int pinctrl_enable(pinctrl_dev*)
    function pinctrl_dev* pinctrl_find_and_add_gpio_range(const char*, pinctrl_gpio_range*)
    function pinctrl_gpio_range* pinctrl_find_gpio_range_from_pin(pinctrl_dev*, unsigned int)
    function pinctrl_gpio_range* pinctrl_find_gpio_range_from_pin_nolock(pinctrl_dev*, unsigned int)
    function int pinctrl_force_default(pinctrl_dev*)
    function int pinctrl_force_sleep(pinctrl_dev*)
    function int pinctrl_generic_add_group(pinctrl_dev*, const char*, int*, int, void*)
    function group_desc* pinctrl_generic_get_group(pinctrl_dev*, unsigned int)
    function int pinctrl_generic_get_group_count(pinctrl_dev*)
    function const char* pinctrl_generic_get_group_name(pinctrl_dev*, unsigned int)
    function int pinctrl_generic_get_group_pins(pinctrl_dev*, unsigned int, const unsigned int**, unsigned int*)
    function int pinctrl_generic_remove_group(pinctrl_dev*, unsigned int)
    function pinctrl* pinctrl_get(device*)
    function int pinctrl_get_group_pins(pinctrl_dev*, const char*, const unsigned int**, unsigned int*)
    function pinctrl_state* pinctrl_lookup_state(pinctrl*, const char*)
    function int pinctrl_parse_index_with_args(const device_node*, const char*, int, of_phandle_args*)
    function int pinctrl_pm_select_default_state(device*)
    function int pinctrl_pm_select_idle_state(device*)
    function int pinctrl_pm_select_sleep_state(device*)
    function void pinctrl_put(pinctrl*)
    function pinctrl_dev* pinctrl_register(pinctrl_desc*, device*, void*)
    function int pinctrl_register_and_init(pinctrl_desc*, device*, void*, pinctrl_dev**)
    function void pinctrl_remove_gpio_range(pinctrl_dev*, pinctrl_gpio_range*)
    function int pinctrl_select_state(pinctrl*, pinctrl_state*)
    function void pinctrl_unregister(pinctrl_dev*)
    function int pinctrl_utils_add_config(pinctrl_dev*, unsigned long int**, unsigned int*, unsigned long int)
    function int pinctrl_utils_add_map_configs(pinctrl_dev*, pinctrl_map**, unsigned int*, unsigned int*, const char*, unsigned long int*, unsigned int, pinctrl_map_type)
    function int pinctrl_utils_add_map_mux(pinctrl_dev*, pinctrl_map**, unsigned int*, unsigned int*, const char*, const char*)
    function void pinctrl_utils_free_map(pinctrl_dev*, pinctrl_map*, unsigned int)
    function int pinctrl_utils_reserve_map(pinctrl_dev*, pinctrl_map**, unsigned int*, unsigned int*, unsigned int)
    function int ping_bind(sock*, sockaddr*, int)
    function void ping_close(sock*, long int)
    function int ping_get_port(sock*, unsigned short int)
    function int ping_hash(sock*)
    function int ping_init_sock(sock*)
    function int ping_queue_rcv_skb(sock*, sk_buff*)
    function int ping_recvmsg(sock*, msghdr*, size_t, int, int, int*)
    function void ping_unhash(sock*)
    function int pinmux_generic_add_function(pinctrl_dev*, const char*, const char**, const unsigned int, void*)
    function function_desc* pinmux_generic_get_function(pinctrl_dev*, unsigned int)
    function int pinmux_generic_get_function_count(pinctrl_dev*)
    function int pinmux_generic_get_function_groups(pinctrl_dev*, unsigned int, const char* const**, unsigned int* const)
    function const char* pinmux_generic_get_function_name(pinctrl_dev*, unsigned int)
    function int pinmux_generic_remove_function(pinctrl_dev*, unsigned int)
    function int platform_add_devices(platform_device**, int)
    function int platform_device_add(platform_device*)
    function int platform_device_add_data(platform_device*, void*, size_t)
    function int platform_device_add_properties(platform_device*, const property_entry*)
    function int platform_device_add_resources(platform_device*, const resource*, unsigned int)
    function platform_device* platform_device_alloc(const char*, int)
    function void platform_device_del(platform_device*)
    function void platform_device_put(platform_device*)
    function int platform_device_register(platform_device*)
    function platform_device* platform_device_register_full(const platform_device_info*)
    function void platform_device_unregister(platform_device*)
    function void platform_driver_unregister(platform_driver*)
    function int platform_get_irq(platform_device*, unsigned int)
    function int platform_get_irq_byname(platform_device*, const char*)
    function resource* platform_get_resource(platform_device*, unsigned int, unsigned int)
    function resource* platform_get_resource_byname(platform_device*, unsigned int, const char*)
    function int platform_irq_count(platform_device*)
    function int platform_msi_domain_alloc_irqs(device*, unsigned int, irq_write_msi_msg_t)
    function void platform_msi_domain_free_irqs(device*)
    function void platform_unregister_drivers(platform_driver* const*, unsigned int)
    function int pm_clk_add(device*, const char*)
    function int pm_clk_add_clk(device*, clk*)
    function void pm_clk_add_notifier(bus_type*, pm_clk_notifier_block*)
    function int pm_clk_create(device*)
    function void pm_clk_destroy(device*)
    function void pm_clk_init(device*)
    function void pm_clk_remove(device*, const char*)
    function void pm_clk_remove_clk(device*, clk*)
    function int pm_clk_resume(device*)
    function int pm_clk_runtime_resume(device*)
    function int pm_clk_runtime_suspend(device*)
    function int pm_clk_suspend(device*)
    function int pm_generic_freeze(device*)
    function int pm_generic_freeze_late(device*)
    function int pm_generic_freeze_noirq(device*)
    function int pm_generic_poweroff(device*)
    function int pm_generic_poweroff_late(device*)
    function int pm_generic_poweroff_noirq(device*)
    function int pm_generic_restore(device*)
    function int pm_generic_restore_early(device*)
    function int pm_generic_restore_noirq(device*)
    function int pm_generic_resume(device*)
    function int pm_generic_resume_early(device*)
    function int pm_generic_resume_noirq(device*)
    function int pm_generic_runtime_resume(device*)
    function int pm_generic_runtime_suspend(device*)
    function int pm_generic_suspend(device*)
    function int pm_generic_suspend_late(device*)
    function int pm_generic_suspend_noirq(device*)
    function int pm_generic_thaw(device*)
    function int pm_generic_thaw_early(device*)
    function int pm_generic_thaw_noirq(device*)
    function int pm_genpd_add_device(generic_pm_domain*, device*)
    function int pm_genpd_add_subdomain(generic_pm_domain*, generic_pm_domain*)
    function int pm_genpd_init(generic_pm_domain*, dev_power_governor*, bool)
    function int pm_genpd_remove(generic_pm_domain*)
    function int pm_genpd_remove_device(device*)
    function int pm_genpd_remove_subdomain(generic_pm_domain*, generic_pm_domain*)
    function void pm_genpd_syscore_poweroff(device*)
    function void pm_genpd_syscore_poweron(device*)
    function void pm_relax(device*)
    function void pm_runtime_allow(device*)
    function unsigned long int pm_runtime_autosuspend_expiration(device*)
    function int pm_runtime_barrier(device*)
    function void pm_runtime_enable(device*)
    function void pm_runtime_forbid(device*)
    function int pm_runtime_force_resume(device*)
    function int pm_runtime_force_suspend(device*)
    function int pm_runtime_get_if_in_use(device*)
    function void pm_runtime_irq_safe(device*)
    function void pm_runtime_no_callbacks(device*)
    function void pm_runtime_set_autosuspend_delay(device*, int)
    function void pm_runtime_set_memalloc_noio(device*, bool)
    function int pm_schedule_suspend(device*, unsigned int)
    function void pm_stay_awake(device*)
    function void pm_wakeup_dev_event(device*, unsigned int, bool)
    function void pm_wakeup_ws_event(wakeup_source*, unsigned int, bool)
    function pneigh_entry* pneigh_lookup(neigh_table*, net*, void*, net_device*, int)
    function bool policy_has_boost_freq(cpufreq_policy*)
    function void poll_freewait(poll_wqueues*)
    function void poll_initwait(poll_wqueues*)
    function int posix_acl_chmod(inode*, umode_t)
    function int posix_acl_create(inode*, umode_t*, posix_acl**, posix_acl**)
    function int posix_acl_update_mode(inode*, umode_t*, posix_acl**)
    function int posix_clock_register(posix_clock*, device*)
    function void posix_clock_unregister(posix_clock*)
    function int posix_lock_file(file*, file_lock*, file_lock*)
    function void posix_test_lock(file*, file_lock*)
    function int posix_unblock_lock(file_lock*)
    function int power_supply_am_i_supplied(power_supply*)
    function void power_supply_changed(power_supply*)
    function void power_supply_external_power_changed(power_supply*)
    function int power_supply_get_battery_info(power_supply*, power_supply_battery_info*)
    function power_supply* power_supply_get_by_name(const char*)
    function power_supply* power_supply_get_by_phandle(device_node*, const char*)
    function void* power_supply_get_drvdata(power_supply*)
    function int power_supply_get_property(power_supply*, power_supply_property, power_supply_propval*)
    function int power_supply_powers(power_supply*, device*)
    function int power_supply_property_is_writeable(power_supply*, power_supply_property)
    function void power_supply_put(power_supply*)
    function power_supply* power_supply_register(device*, const power_supply_desc*, const power_supply_config*)
    function power_supply* power_supply_register_no_ws(device*, const power_supply_desc*, const power_supply_config*)
    function int power_supply_set_battery_charged(power_supply*)
    function int power_supply_set_input_current_limit_from_supplier(power_supply*)
    function int power_supply_set_property(power_supply*, power_supply_property, const power_supply_propval*)
    function void power_supply_unregister(power_supply*)
    function int ppp_register_compressor(compressor*)
    function void ppp_unregister_compressor(compressor*)
    function int pppox_compat_ioctl(socket*, unsigned int, unsigned long int)
    function int pppox_ioctl(socket*, unsigned int, unsigned long int)
    function void pppox_unbind_sock(sock*)
    function int prepare_binprm(linux_binprm*)
    function void print_tuple(seq_file*, const nf_conntrack_tuple*, const nf_conntrack_l4proto*)
    function proc_dir_entry* proc_create(const char*, umode_t, proc_dir_entry*, const file_operations*)
    function proc_dir_entry* proc_create_data(const char*, umode_t, proc_dir_entry*, const file_operations*, void*)
    function proc_dir_entry* proc_create_net_data_write(const char*, umode_t, proc_dir_entry*, const seq_operations*, proc_write_t, unsigned int, void*)
    function proc_dir_entry* proc_create_net_single_write(const char*, umode_t, proc_dir_entry*, void ()*, proc_write_t, void*)
    function void* proc_get_parent_data(const inode*)
    function int proto_register(proto*, int)
    function void proto_unregister(proto*)
    function void ps2_begin_command(ps2dev*)
    function void ps2_cmd_aborted(ps2dev*)
    function int ps2_command(ps2dev*, u8*, unsigned int)
    function void ps2_drain(ps2dev*, size_t, unsigned int)
    function void ps2_end_command(ps2dev*)
    function bool ps2_handle_ack(ps2dev*, u8)
    function bool ps2_handle_response(ps2dev*, u8)
    function void ps2_init(ps2dev*, serio*)
    function int ps2_sendbyte(ps2dev*, u8, unsigned int)
    function int ps2_sliced_command(ps2dev*, u8)
    function int pstore_register(pstore_info*)
    function void pstore_unregister(pstore_info*)
    function void put_device(device*)
    function void put_disk(gendisk*)
    function void put_disk_and_module(gendisk*)
    function void put_tty_driver(tty_driver*)
    function int pwm_adjust_config(pwm_device*)
    function int pwm_apply_state(pwm_device*, pwm_state*)
    function int pwm_capture(pwm_device*, pwm_capture*, unsigned long int)
    function void pwm_free(pwm_device*)
    function pwm_device* pwm_get(device*, const char*)
    function void* pwm_get_chip_data(pwm_device*)
    function void pwm_put(pwm_device*)
    function pwm_device* pwm_request(int, const char*)
    function pwm_device* pwm_request_from_chip(pwm_chip*, unsigned int, const char*)
    function int pwm_set_chip_data(pwm_device*, void*)
    function int pwmchip_add(pwm_chip*)
    function int pwmchip_add_with_polarity(pwm_chip*, pwm_polarity)
    function int pwmchip_remove(pwm_chip*)
    function int qcom_mdt_load(device*, const firmware*, const char*, int, void*, phys_addr_t, size_t, phys_addr_t*)
    function int qcom_mdt_load_no_init(device*, const firmware*, const char*, int, void*, phys_addr_t, size_t, phys_addr_t*)
    function void qdisc_class_hash_grow(Qdisc*, Qdisc_class_hash*)
    function Qdisc* qdisc_create_dflt(netdev_queue*, const Qdisc_ops*, unsigned int, netlink_ext_ack*)
    function void qdisc_hash_add(Qdisc*, bool)
    function void qdisc_hash_del(Qdisc*)
    function void qdisc_tree_reduce_backlog(Qdisc*, unsigned int, unsigned int)
    function void qdisc_warn_nonwc(const char*, Qdisc*)
    function void qdisc_watchdog_cancel(qdisc_watchdog*)
    function void qdisc_watchdog_init(qdisc_watchdog*, Qdisc*)
    function void qdisc_watchdog_init_clockid(qdisc_watchdog*, Qdisc*, clockid_t)
    function void qdisc_watchdog_schedule_ns(qdisc_watchdog*, u64)
    function int qtree_delete_dquot(qtree_mem_dqinfo*, dquot*)
    function int qtree_entry_unused(qtree_mem_dqinfo*, char*)
    function int qtree_get_next_id(qtree_mem_dqinfo*, kqid*)
    function int qtree_read_dquot(qtree_mem_dqinfo*, dquot*)
    function int qtree_release_dquot(qtree_mem_dqinfo*, dquot*)
    function int qtree_write_dquot(qtree_mem_dqinfo*, dquot*)
    function bool rate_control_send_low(ieee80211_sta*, void*, ieee80211_tx_rate_control*)
    function int rate_control_set_rates(ieee80211_hw*, ieee80211_sta*, ieee80211_sta_rates*)
    function int raw_abort(sock*, int)
    function int raw_hash_sk(sock*)
    function void raw_unhash_sk(sock*)
    function device* rdev_get_dev(regulator_dev*)
    function void* rdev_get_drvdata(regulator_dev*)
    function int rdev_get_id(regulator_dev*)
    function ssize_t read_code(file*, unsigned long int, loff_t, size_t)
    function unsigned char* read_dev_sector(block_device*, sector_t, Sector*)
    function int redirty_page_for_writepage(writeback_control*, page*)
    function int ref_module(module*, module*)
    function void regcache_cache_bypass(regmap*, bool)
    function void regcache_cache_only(regmap*, bool)
    function int regcache_drop_region(regmap*, unsigned int, unsigned int)
    function void regcache_mark_dirty(regmap*)
    function int regcache_sync(regmap*)
    function int regcache_sync_region(regmap*, unsigned int, unsigned int)
    function datalink_proto* register_8022_client(unsigned char, void ()*)
    function int register_asymmetric_key_parser(asymmetric_key_parser*)
    function void register_console(console*)
    function int register_filesystem(file_system_type*)
    function int register_framebuffer(fb_info*)
    function int register_gifconf(unsigned int, gifconf_func_t*)
    function int register_netdev(net_device*)
    function int register_netdevice(net_device*)
    function int register_pppox_proto(int, const pppox_proto*)
    function int register_qdisc(Qdisc_ops*)
    function int register_quota_format(quota_format_type*)
    function datalink_proto* register_snap_client(const unsigned char*, void ()*)
    function int register_tcf_proto_ops(tcf_proto_ops*)
    function perf_event* register_user_hw_breakpoint(perf_event_attr*, perf_overflow_handler_t, void*, task_struct*)
    function int register_virtio_device(virtio_device*)
    function int register_virtio_driver(virtio_driver*)
    function perf_event** register_wide_hw_breakpoint(perf_event_attr*, perf_overflow_handler_t, void*)
    function int regmap_add_irq_chip(regmap*, int, int, int, const regmap_irq_chip*, regmap_irq_chip_data**)
    function int regmap_async_complete(regmap*)
    function void regmap_async_complete_cb(regmap_async*, int)
    function int regmap_attach_dev(device*, regmap*, const regmap_config*)
    function int regmap_bulk_read(regmap*, unsigned int, void*, size_t)
    function int regmap_bulk_write(regmap*, unsigned int, void*, size_t)
    function bool regmap_can_raw_write(regmap*)
    function bool regmap_check_range_table(regmap*, unsigned int, const regmap_access_table*)
    function void regmap_del_irq_chip(int, regmap_irq_chip_data*)
    function void regmap_exit(regmap*)
    function regmap_field* regmap_field_alloc(regmap*, reg_field)
    function void regmap_field_free(regmap_field*)
    function int regmap_field_read(regmap_field*, unsigned int*)
    function int regmap_field_update_bits_base(regmap_field*, unsigned int, unsigned int, bool*, bool, bool)
    function int regmap_fields_read(regmap_field*, unsigned int, unsigned int*)
    function int regmap_fields_update_bits_base(regmap_field*, unsigned int, unsigned int, unsigned int, bool*, bool, bool)
    function device* regmap_get_device(regmap*)
    function int regmap_get_max_register(regmap*)
    function size_t regmap_get_raw_read_max(regmap*)
    function size_t regmap_get_raw_write_max(regmap*)
    function int regmap_get_reg_stride(regmap*)
    function int regmap_get_val_bytes(regmap*)
    function regmap_endian regmap_get_val_endian(device*, const regmap_bus*, const regmap_config*)
    function int regmap_irq_chip_get_base(regmap_irq_chip_data*)
    function irq_domain* regmap_irq_get_domain(regmap_irq_chip_data*)
    function int regmap_irq_get_virq(regmap_irq_chip_data*, int)
    function int regmap_mmio_attach_clk(regmap*, clk*)
    function void regmap_mmio_detach_clk(regmap*)
    function int regmap_multi_reg_write(regmap*, const reg_sequence*, int)
    function int regmap_multi_reg_write_bypassed(regmap*, const reg_sequence*, int)
    function int regmap_noinc_read(regmap*, unsigned int, void*, size_t)
    function int regmap_parse_val(regmap*, void*, unsigned int*)
    function int regmap_raw_read(regmap*, unsigned int, void*, size_t)
    function int regmap_raw_write(regmap*, unsigned int, void*, size_t)
    function int regmap_raw_write_async(regmap*, unsigned int, void*, size_t)
    function int regmap_read(regmap*, unsigned int, unsigned int*)
    function int regmap_register_patch(regmap*, const reg_sequence*, int)
    function int regmap_reinit_cache(regmap*, const regmap_config*)
    function int regmap_update_bits_base(regmap*, unsigned int, unsigned int, unsigned int, bool*, bool, bool)
    function int regmap_write(regmap*, unsigned int, unsigned int)
    function int regmap_write_async(regmap*, unsigned int, unsigned int)
    function int regulator_allow_bypass(regulator*, bool)
    function int regulator_bulk_disable(int, regulator_bulk_data*)
    function int regulator_bulk_enable(int, regulator_bulk_data*)
    function int regulator_bulk_force_disable(int, regulator_bulk_data*)
    function void regulator_bulk_free(int, regulator_bulk_data*)
    function int regulator_bulk_get(device*, int, regulator_bulk_data*)
    function int regulator_bulk_register_supply_alias(device*, const char* const*, device*, const char* const*, int)
    function void regulator_bulk_unregister_supply_alias(device*, const char* const*, int)
    function int regulator_count_voltages(regulator*)
    function int regulator_disable(regulator*)
    function int regulator_disable_deferred(regulator*, int)
    function int regulator_disable_regmap(regulator_dev*)
    function int regulator_enable(regulator*)
    function int regulator_enable_regmap(regulator_dev*)
    function int regulator_force_disable(regulator*)
    function regulator* regulator_get(device*, const char*)
    function int regulator_get_bypass_regmap(regulator_dev*, bool*)
    function int regulator_get_current_limit(regulator*)
    function void* regulator_get_drvdata(regulator*)
    function int regulator_get_error_flags(regulator*, unsigned int*)
    function regulator* regulator_get_exclusive(device*, const char*)
    function int regulator_get_hardware_vsel_register(regulator*, unsigned int*, unsigned int*)
    function unsigned int regulator_get_linear_step(regulator*)
    function unsigned int regulator_get_mode(regulator*)
    function regulator* regulator_get_optional(device*, const char*)
    function int regulator_get_voltage(regulator*)
    function int regulator_get_voltage_sel_regmap(regulator_dev*)
    function int regulator_is_enabled(regulator*)
    function int regulator_is_enabled_regmap(regulator_dev*)
    function int regulator_is_supported_voltage(regulator*, int, int)
    function int regulator_list_hardware_vsel(regulator*, unsigned int)
    function int regulator_list_voltage(regulator*, unsigned int)
    function int regulator_list_voltage_linear(regulator_dev*, unsigned int)
    function int regulator_list_voltage_linear_range(regulator_dev*, unsigned int)
    function int regulator_list_voltage_table(regulator_dev*, unsigned int)
    function int regulator_map_voltage_ascend(regulator_dev*, int, int)
    function int regulator_map_voltage_iterate(regulator_dev*, int, int)
    function int regulator_map_voltage_linear(regulator_dev*, int, int)
    function int regulator_map_voltage_linear_range(regulator_dev*, int, int)
    function int regulator_notifier_call_chain(regulator_dev*, unsigned long int, void*)
    function void regulator_put(regulator*)
    function regulator_dev* regulator_register(const regulator_desc*, const regulator_config*)
    function int regulator_register_notifier(regulator*, notifier_block*)
    function int regulator_register_supply_alias(device*, const char*, device*, const char*)
    function int regulator_set_active_discharge_regmap(regulator_dev*, bool)
    function int regulator_set_bypass_regmap(regulator_dev*, bool)
    function int regulator_set_current_limit(regulator*, int, int)
    function void regulator_set_drvdata(regulator*, void*)
    function int regulator_set_load(regulator*, int)
    function int regulator_set_mode(regulator*, unsigned int)
    function int regulator_set_pull_down_regmap(regulator_dev*)
    function int regulator_set_soft_start_regmap(regulator_dev*)
    function int regulator_set_suspend_voltage(regulator*, int, int, suspend_state_t)
    function int regulator_set_voltage(regulator*, int, int)
    function int regulator_set_voltage_sel_regmap(regulator_dev*, unsigned int)
    function int regulator_set_voltage_time(regulator*, int, int)
    function int regulator_set_voltage_time_sel(regulator_dev*, unsigned int, unsigned int)
    function int regulator_suspend_disable(regulator_dev*, suspend_state_t)
    function int regulator_suspend_enable(regulator_dev*, suspend_state_t)
    function int regulator_sync_voltage(regulator*)
    function void regulator_unregister(regulator_dev*)
    function int regulator_unregister_notifier(regulator*, notifier_block*)
    function void regulator_unregister_supply_alias(device*, const char*)
    function int regulatory_hint(wiphy*, const char*)
    function int regulatory_set_wiphy_regd(wiphy*, ieee80211_regdomain*)
    function int regulatory_set_wiphy_regd_sync_rtnl(wiphy*, ieee80211_regdomain*)
    function void release_sock(sock*)
    function int remove_arg_zero(linux_binprm*)
    function int report_iommu_fault(iommu_domain*, device*, unsigned long int, int)
    function int request_firmware(const firmware**, const char*, device*)
    function int request_firmware_direct(const firmware**, const char*, device*)
    function int request_firmware_into_buf(const firmware**, const char*, device*, void*, size_t)
    function int request_firmware_nowait(module*, bool, const char*, device*, gfp_t, void*, void ()*)
    function int reset_control_assert(reset_control*)
    function int reset_control_deassert(reset_control*)
    function void reset_control_put(reset_control*)
    function int reset_control_reset(reset_control*)
    function int reset_control_status(reset_control*)
    function int reset_controller_register(reset_controller_dev*)
    function void reset_controller_unregister(reset_controller_dev*)
    function int reuseport_alloc(sock*, bool)
    function int reuseport_attach_prog(sock*, bpf_prog*)
    function void reuseport_detach_sock(sock*)
    function sock* reuseport_select_sock(sock*, u32, sk_buff*, int)
    function int revalidate_disk(gendisk*)
    function rfkill* rfkill_alloc(const char*, device*, const rfkill_type, const rfkill_ops*, void*)
    function void rndis_borrow_net(usb_function_instance*, net_device*)
    function void rndis_deregister(rndis_params*)
    function void rndis_free_response(rndis_params*, u8*)
    function u8* rndis_get_next_response(rndis_params*, u32*)
    function int rndis_msg_parser(rndis_params*, u8*)
    function rndis_params* rndis_register(void ()*, void*)
    function int rndis_rm_hdr(gether*, sk_buff*, sk_buff_head*)
    function void rndis_set_host_mac(rndis_params*, const u8*)
    function int rndis_set_param_dev(rndis_params*, net_device*, u16*)
    function int rndis_set_param_medium(rndis_params*, u32, u32)
    function int rndis_set_param_vendor(rndis_params*, u32, const char*)
    function int rndis_signal_connect(rndis_params*)
    function int rndis_signal_disconnect(rndis_params*)
    function void rndis_uninit(rndis_params*)
    function void root_device_unregister(device*)
    function int rpmh_flush(const device*)
    function int rpmh_invalidate(const device*)
    function int rpmh_write(const device*, rpmh_state, const tcs_cmd*, u32)
    function int rpmh_write_async(const device*, rpmh_state, const tcs_cmd*, u32)
    function int rpmh_write_batch(const device*, rpmh_state, const tcs_cmd*, u32*)
    function bool rps_may_expire_flow(net_device*, u16, u32, u16)
    function void rq_flush_dcache_pages(request*)
    function rt6_info* rt6_lookup(net*, const in6_addr*, const in6_addr*, int, const sk_buff*, int)
    function rtable* rt_dst_alloc(net_device*, unsigned int, u16, bool, bool, bool)
    function int rtc_add_group(rtc_device*, const attribute_group*)
    function int rtc_add_groups(rtc_device*, const attribute_group**)
    function int rtc_alarm_irq_enable(rtc_device*, unsigned int)
    function void rtc_class_close(rtc_device*)
    function rtc_device* rtc_class_open(const char*)
    function rtc_device* rtc_device_register(const char*, device*, const rtc_class_ops*, module*)
    function void rtc_device_unregister(rtc_device*)
    function int rtc_initialize_alarm(rtc_device*, rtc_wkalrm*)
    function int rtc_nvmem_register(rtc_device*, nvmem_config*)
    function int rtc_read_alarm(rtc_device*, rtc_wkalrm*)
    function int rtc_read_time(rtc_device*, rtc_time*)
    function int rtc_set_alarm(rtc_device*, rtc_wkalrm*)
    function int rtc_set_time(rtc_device*, rtc_time*)
    function void rtc_update_irq(rtc_device*, unsigned long int, unsigned long int)
    function int rtc_update_irq_enable(rtc_device*, unsigned int)
    function void rtnl_af_register(rtnl_af_ops*)
    function void rtnl_af_unregister(rtnl_af_ops*)
    function int rtnl_configure_link(net_device*, const ifinfomsg*)
    function net_device* rtnl_create_link(net*, const char*, unsigned char, const rtnl_link_ops*, nlattr**)
    function int rtnl_delete_link(net_device*)
    function int rtnl_link_register(rtnl_link_ops*)
    function void rtnl_link_unregister(rtnl_link_ops*)
    function int rtnl_put_cacheinfo(sk_buff*, dst_entry*, u32, long int, u32)
    function int rtnl_register_module(module*, int, int, rtnl_doit_func, rtnl_dumpit_func, unsigned int)
    function void sb800_prefetch(device*, int)
    function int sb_min_blocksize(super_block*, int)
    function int sb_set_blocksize(super_block*, int)
    function void scm_detach_fds(msghdr*, scm_cookie*)
    function scm_fp_list* scm_fp_dup(scm_fp_list*)
    function void scmd_printk(const char*, const scsi_cmnd*, const char*, ...)
    function int scmi_driver_register(scmi_driver*, module*, const char*)
    function void scmi_driver_unregister(scmi_driver*)
    function int scmi_protocol_register(int, scmi_prot_init_fn_t)
    function int scsi_add_device(Scsi_Host*, uint, uint, u64)
    function int scsi_add_host_with_dma(Scsi_Host*, device*, device*)
    function int scsi_autopm_get_device(scsi_device*)
    function void scsi_autopm_put_device(scsi_device*)
    function unsigned char* scsi_bios_ptable(block_device*)
    function void scsi_block_requests(Scsi_Host*)
    function int scsi_block_when_processing_errors(scsi_device*)
    function int scsi_change_queue_depth(scsi_device*, int)
    function int scsi_check_sense(scsi_cmnd*)
    function int scsi_cmd_blk_ioctl(block_device*, fmode_t, unsigned int, void*)
    function void scsi_cmd_get_serial(Scsi_Host*, scsi_cmnd*)
    function int scsi_cmd_ioctl(request_queue*, gendisk*, fmode_t, unsigned int, void*)
    function bool scsi_command_normalize_sense(const scsi_cmnd*, scsi_sense_hdr*)
    function scsi_device* scsi_device_from_queue(request_queue*)
    function int scsi_device_get(scsi_device*)
    function scsi_device* scsi_device_lookup(Scsi_Host*, uint, uint, u64)
    function scsi_device* scsi_device_lookup_by_target(scsi_target*, u64)
    function void scsi_device_put(scsi_device*)
    function int scsi_device_quiesce(scsi_device*)
    function void scsi_device_resume(scsi_device*)
    function int scsi_device_set_state(scsi_device*, scsi_device_state)
    function int scsi_dma_map(scsi_cmnd*)
    function void scsi_dma_unmap(scsi_cmnd*)
    function void scsi_eh_finish_cmd(scsi_cmnd*, list_head*)
    function void scsi_eh_prep_cmnd(scsi_cmnd*, scsi_eh_save*, unsigned char*, int, unsigned int)
    function void scsi_eh_ready_devs(Scsi_Host*, list_head*, list_head*)
    function void scsi_eh_restore_cmnd(scsi_cmnd*, scsi_eh_save*)
    function void scsi_flush_work(Scsi_Host*)
    function void scsi_free_host_dev(scsi_device*)
    function blist_flags_t scsi_get_device_flags_keyed(scsi_device*, const unsigned char*, const unsigned char*, scsi_devinfo_key)
    function scsi_device* scsi_get_host_dev(Scsi_Host*)
    function int scsi_get_vpd_page(scsi_device*, u8, unsigned char*, int)
    function Scsi_Host* scsi_host_alloc(scsi_host_template*, int)
    function int scsi_host_busy(Scsi_Host*)
    function Scsi_Host* scsi_host_get(Scsi_Host*)
    function Scsi_Host* scsi_host_lookup(unsigned short int)
    function void scsi_host_put(Scsi_Host*)
    function int scsi_init_io(scsi_cmnd*)
    function int scsi_internal_device_block_nowait(scsi_device*)
    function int scsi_internal_device_unblock_nowait(scsi_device*, scsi_device_state)
    function int scsi_ioctl(scsi_device*, int, void*)
    function int scsi_ioctl_block_when_processing_errors(scsi_device*, int, bool)
    function int scsi_ioctl_reset(scsi_device*, int*)
    function int scsi_is_host_device(const device*)
    function int scsi_is_sdev_device(const device*)
    function int scsi_is_target_device(const device*)
    function int scsi_mode_select(scsi_device*, int, int, int, unsigned char*, int, int, int, scsi_mode_data*, scsi_sense_hdr*)
    function int scsi_mode_sense(scsi_device*, int, int, unsigned char*, int, int, int, scsi_mode_data*, scsi_sense_hdr*)
    function void scsi_print_command(scsi_cmnd*)
    function void scsi_print_result(const scsi_cmnd*, const char*, int)
    function void scsi_print_sense(const scsi_cmnd*)
    function void scsi_print_sense_hdr(const scsi_device*, const char*, const scsi_sense_hdr*)
    function int scsi_queue_work(Scsi_Host*, work_struct*)
    function int scsi_register_driver(device_driver*)
    function int scsi_register_interface(class_interface*)
    function void scsi_remove_device(scsi_device*)
    function void scsi_remove_host(Scsi_Host*)
    function void scsi_remove_target(device*)
    function void scsi_report_bus_reset(Scsi_Host*, int)
    function void scsi_report_device_reset(Scsi_Host*, int, int)
    function int scsi_report_opcode(scsi_device*, unsigned char*, unsigned int, unsigned char)
    function void scsi_rescan_device(device*)
    function void scsi_scan_host(Scsi_Host*)
    function void scsi_scan_target(device*, unsigned int, unsigned int, u64, scsi_scan_mode)
    function void scsi_schedule_eh(Scsi_Host*)
    function int scsi_set_medium_removal(scsi_device*, char)
    function void scsi_target_block(device*)
    function void scsi_target_quiesce(scsi_target*)
    function void scsi_target_resume(scsi_target*)
    function void scsi_target_unblock(device*, scsi_device_state)
    function int scsi_test_unit_ready(scsi_device*, int, int, scsi_sense_hdr*)
    function int scsi_track_queue_full(scsi_device*, int)
    function void scsi_unblock_requests(Scsi_Host*)
    function int scsi_verify_blk_ioctl(block_device*, unsigned int)
    function int scsi_vpd_lun_id(scsi_device*, char*, size_t)
    function int scsi_vpd_tpg_id(scsi_device*, int*)
    function int scsicam_bios_param(block_device*, sector_t, int*)
    function int sctp_do_peeloff(sock*, sctp_assoc_t, socket**)
    function int sctp_for_each_transport(void ()*, void ()*, net*, int*, void*)
    function int sctp_get_sctp_info(sock*, sctp_association*, sctp_info*)
    function int sctp_transport_lookup_process(void ()*, net*, const sctp_addr*, const sctp_addr*, void*)
    function void sdev_disable_disk_events(scsi_device*)
    function void sdev_enable_disk_events(scsi_device*)
    function void sdev_evt_send(scsi_device*, scsi_event*)
    function void sdev_evt_send_simple(scsi_device*, scsi_device_event, gfp_t)
    function void sdev_prefix_printk(const char*, const scsi_device*, const char*, const char*, ...)
    function unsigned int sdio_align_size(sdio_func*, unsigned int)
    function void sdio_claim_host(sdio_func*)
    function int sdio_claim_irq(sdio_func*, sdio_irq_handler_t*)
    function int sdio_disable_func(sdio_func*)
    function int sdio_enable_func(sdio_func*)
    function unsigned char sdio_f0_readb(sdio_func*, unsigned int, int*)
    function void sdio_f0_writeb(sdio_func*, unsigned char, unsigned int, int*)
    function mmc_pm_flag_t sdio_get_host_pm_caps(sdio_func*)
    function int sdio_memcpy_fromio(sdio_func*, void*, unsigned int, int)
    function int sdio_memcpy_toio(sdio_func*, unsigned int, void*, int)
    function u8 sdio_readb(sdio_func*, unsigned int, int*)
    function u32 sdio_readl(sdio_func*, unsigned int, int*)
    function int sdio_readsb(sdio_func*, void*, unsigned int, int)
    function u16 sdio_readw(sdio_func*, unsigned int, int*)
    function int sdio_register_driver(sdio_driver*)
    function void sdio_release_host(sdio_func*)
    function int sdio_release_irq(sdio_func*)
    function void sdio_retune_crc_disable(sdio_func*)
    function void sdio_retune_crc_enable(sdio_func*)
    function void sdio_retune_hold_now(sdio_func*)
    function void sdio_retune_release(sdio_func*)
    function void sdio_run_irqs(mmc_host*)
    function int sdio_set_block_size(sdio_func*, unsigned int)
    function int sdio_set_host_pm_flags(sdio_func*, mmc_pm_flag_t)
    function void sdio_signal_irq(mmc_host*)
    function void sdio_unregister_driver(sdio_driver*)
    function void sdio_writeb(sdio_func*, u8, unsigned int, int*)
    function u8 sdio_writeb_readb(sdio_func*, u8, unsigned int, int*)
    function void sdio_writel(sdio_func*, u32, unsigned int, int*)
    function int sdio_writesb(sdio_func*, unsigned int, void*, int)
    function void sdio_writew(sdio_func*, u16, unsigned int, int*)
    function int search_binary_handler(linux_binprm*)
    function void security_d_instantiate(dentry*, inode*)
    function int security_dentry_create_files_as(dentry*, int, qstr*, const cred*, cred*)
    function int security_dentry_init_security(dentry*, int, const qstr*, void**, u32*)
    function int security_inode_copy_up(dentry*, cred**)
    function int security_inode_create(inode*, dentry*, umode_t)
    function int security_inode_getsecctx(inode*, void**, u32*)
    function int security_inode_init_security(inode*, inode*, const qstr*, const initxattrs, void*)
    function void security_inode_invalidate_secctx(inode*)
    function int security_inode_listsecurity(inode*, char*, size_t)
    function int security_inode_mkdir(inode*, dentry*, umode_t)
    function int security_inode_notifysecctx(inode*, void*, u32)
    function int security_inode_setattr(dentry*, iattr*)
    function int security_inode_setsecctx(dentry*, void*, u32)
    function int security_kernel_post_read_file(file*, char*, loff_t, kernel_read_file_id)
    function int security_kernel_read_file(file*, kernel_read_file_id)
    function int security_old_inode_init_security(inode*, inode*, const qstr*, const char**, void**, size_t*)
    function int security_sb_clone_mnt_opts(const super_block*, super_block*, unsigned long int, unsigned long int*)
    function int security_sb_set_mnt_opts(super_block*, security_mnt_opts*, unsigned long int, unsigned long int*)
    function int seq_dentry(seq_file*, dentry*, const char*)
    function int seq_file_path(seq_file*, file*, const char*)
    function loff_t seq_lseek(file*, loff_t, int)
    function int seq_open(file*, const seq_operations*)
    function int seq_open_private(file*, const seq_operations*, int)
    function ssize_t seq_read(file*, char*, size_t, loff_t*)
    function int seq_release(inode*, file*)
    function int seq_release_private(inode*, file*)
    function int serdev_controller_add(serdev_controller*)
    function serdev_controller* serdev_controller_alloc(device*, size_t)
    function void serdev_controller_remove(serdev_controller*)
    function int serdev_device_add(serdev_device*)
    function serdev_device* serdev_device_alloc(serdev_controller*)
    function void serdev_device_close(serdev_device*)
    function int serdev_device_get_tiocm(serdev_device*)
    function int serdev_device_open(serdev_device*)
    function void serdev_device_remove(serdev_device*)
    function unsigned int serdev_device_set_baudrate(serdev_device*, unsigned int)
    function void serdev_device_set_flow_control(serdev_device*, bool)
    function int serdev_device_set_parity(serdev_device*, serdev_parity)
    function int serdev_device_set_tiocm(serdev_device*, int, int)
    function void serdev_device_wait_until_sent(serdev_device*, long int)
    function int serdev_device_write(serdev_device*, const unsigned char*, size_t, unsigned long int)
    function int serdev_device_write_buf(serdev_device*, const unsigned char*, size_t)
    function void serdev_device_write_flush(serdev_device*)
    function int serdev_device_write_room(serdev_device*)
    function void serdev_device_write_wakeup(serdev_device*)
    function void serial8250_clear_and_reinit_fifos(uart_8250_port*)
    function unsigned int serial8250_do_get_mctrl(uart_port*)
    function void serial8250_do_pm(uart_port*, unsigned int, unsigned int)
    function void serial8250_do_set_divisor(uart_port*, unsigned int, unsigned int, unsigned int)
    function void serial8250_do_set_ldisc(uart_port*, ktermios*)
    function void serial8250_do_set_mctrl(uart_port*, unsigned int)
    function void serial8250_do_set_termios(uart_port*, ktermios*, ktermios*)
    function void serial8250_do_shutdown(uart_port*)
    function int serial8250_do_startup(uart_port*)
    function void serial8250_em485_destroy(uart_8250_port*)
    function int serial8250_em485_init(uart_8250_port*)
    function uart_8250_port* serial8250_get_port(int)
    function int serial8250_handle_irq(uart_port*, unsigned int)
    function void serial8250_init_port(uart_8250_port*)
    function unsigned int serial8250_modem_status(uart_8250_port*)
    function void serial8250_read_char(uart_8250_port*, unsigned char)
    function int serial8250_register_8250_port(uart_8250_port*)
    function void serial8250_release_dma(uart_8250_port*)
    function int serial8250_request_dma(uart_8250_port*)
    function void serial8250_rpm_get(uart_8250_port*)
    function void serial8250_rpm_get_tx(uart_8250_port*)
    function void serial8250_rpm_put(uart_8250_port*)
    function void serial8250_rpm_put_tx(uart_8250_port*)
    function unsigned char serial8250_rx_chars(uart_8250_port*, unsigned char)
    function void serial8250_rx_dma_flush(uart_8250_port*)
    function void serial8250_set_defaults(uart_8250_port*)
    function void serial8250_set_isa_configurator(void ()*)
    function void serial8250_tx_chars(uart_8250_port*)
    function void serio_close(serio*)
    function irqreturn_t serio_interrupt(serio*, unsigned char, unsigned int)
    function int serio_open(serio*, serio_driver*)
    function void serio_reconnect(serio*)
    function void serio_rescan(serio*)
    function void serio_unregister_child_port(serio*)
    function void serio_unregister_driver(serio_driver*)
    function void serio_unregister_port(serio*)
    function int set_anon_super(super_block*, void*)
    function void set_bh_page(buffer_head*, page*, unsigned long int)
    function void set_binfmt(linux_binfmt*)
    function int set_blocksize(block_device*, int)
    function void set_cached_acl(inode*, int, posix_acl*)
    function int set_create_files_as(cred*, inode*)
    function void set_device_ro(block_device*, int)
    function void set_disk_ro(gendisk*, int)
    function void set_nlink(inode*, unsigned int)
    function int set_posix_acl(inode*, int, posix_acl*)
    function void set_primary_fwnode(device*, fwnode_handle*)
    function void setattr_copy(inode*, const iattr*)
    function int setattr_prepare(dentry*, iattr*)
    function int setup_arg_pages(linux_binprm*, unsigned long int, int)
    function void setup_new_exec(linux_binprm*)
    function void setup_udp_tunnel_sock(net*, socket*, udp_tunnel_sock_cfg*)
    function int sg_scsi_ioctl(request_queue*, gendisk*, fmode_t, scsi_ioctl_command*)
    function super_block* sget(file_system_type*, void ()*, void ()*, int, void*)
    function super_block* sget_userns(file_system_type*, void ()*, void ()*, int, user_namespace*, void*)
    function int shash_ahash_digest(ahash_request*, shash_desc*)
    function int shash_ahash_finup(ahash_request*, shash_desc*)
    function int shash_ahash_update(ahash_request*, shash_desc*)
    function shash_alg* shash_attr_alg(rtattr*, u32, u32)
    function void shash_free_instance(crypto_instance*)
    function int shash_no_setkey(crypto_shash*, const u8*, unsigned int)
    function int shash_register_instance(crypto_template*, shash_instance*)
    function file* shmem_file_setup(const char*, loff_t, unsigned long int)
    function file* shmem_file_setup_with_mnt(vfsmount*, const char*, loff_t, unsigned long int)
    function void shmem_truncate_range(inode*, loff_t, loff_t)
    function int should_remove_suid(dentry*)
    function ssize_t show_class_attr_string(class*, class_attribute*, char*)
    function void shrink_dcache_parent(dentry*)
    function void shrink_dcache_sb(super_block*)
    function int simd_register_skciphers_compat(skcipher_alg*, int, simd_skcipher_alg**)
    function simd_skcipher_alg* simd_skcipher_create(const char*, const char*)
    function simd_skcipher_alg* simd_skcipher_create_compat(const char*, const char*, const char*)
    function void simd_skcipher_free(simd_skcipher_alg*)
    function void simd_unregister_skciphers(skcipher_alg*, int, simd_skcipher_alg**)
    function int simple_attr_open(inode*, file*, void ()*, void ()*, const char*)
    function ssize_t simple_attr_read(file*, char*, size_t, loff_t*)
    function int simple_attr_release(inode*, file*)
    function ssize_t simple_attr_write(file*, const char*, size_t, loff_t*)
    function char* simple_dname(dentry*, char*, int)
    function int simple_empty(dentry*)
    function int simple_fill_super(super_block*, unsigned long int, const tree_descr*)
    function const char* simple_get_link(dentry*, inode*, delayed_call*)
    function int simple_link(dentry*, inode*, dentry*)
    function dentry* simple_lookup(inode*, dentry*, unsigned int)
    function int simple_nosetlease(file*, long int, file_lock**, void**)
    function int simple_open(inode*, file*)
    function int simple_pin_fs(file_system_type*, vfsmount**, int*)
    function int simple_readpage(file*, page*)
    function void simple_release_fs(vfsmount**, int*)
    function int simple_rename(inode*, dentry*, inode*, dentry*, unsigned int)
    function int simple_rmdir(inode*, dentry*)
    function int simple_setattr(dentry*, iattr*)
    function int simple_statfs(dentry*, kstatfs*)
    function char* simple_transaction_get(file*, const char*, size_t)
    function ssize_t simple_transaction_read(file*, char*, size_t, loff_t*)
    function int simple_transaction_release(inode*, file*)
    function void simple_transaction_set(file*, size_t)
    function int simple_unlink(inode*, dentry*)
    function int simple_write_begin(file*, address_space*, loff_t, unsigned int, unsigned int, page**, void**)
    function int simple_write_end(file*, address_space*, loff_t, unsigned int, unsigned int, page*, void*)
    function int single_open(file*, void ()*, void*)
    function int single_open_size(file*, void ()*, void*, size_t)
    function int single_release(inode*, file*)
    function sock* sk_alloc(net*, int, gfp_t, proto*, int)
    function int sk_alloc_sg(sock*, int, scatterlist*, int, int*, unsigned int*, int)
    function int sk_attach_filter(sock_fprog*, sock*)
    function bool sk_capable(const sock*, int)
    function void sk_clear_memalloc(sock*)
    function sock* sk_clone_lock(const sock*, const gfp_t)
    function void sk_common_release(sock*)
    function int sk_detach_filter(sock*)
    function dst_entry* sk_dst_check(sock*, u32)
    function int sk_filter_trim_cap(sock*, sk_buff*, unsigned int)
    function void sk_free(sock*)
    function void sk_free_unlock_clone(sock*)
    function bool sk_mc_loop(sock*)
    function bool sk_net_capable(const sock*, int)
    function bool sk_ns_capable(const sock*, user_namespace*, int)
    function bool sk_page_frag_refill(sock*, page_frag*)
    function void sk_reset_timer(sock*, timer_list*, unsigned long int)
    function void sk_send_sigurg(sock*)
    function void sk_set_memalloc(sock*)
    function int sk_set_peek_off(sock*, int)
    function void sk_setup_caps(sock*, dst_entry*)
    function void sk_stop_timer(sock*, timer_list*)
    function int sk_stream_error(sock*, int, int)
    function void sk_stream_kill_queues(sock*)
    function void sk_stream_wait_close(sock*, long int)
    function int sk_stream_wait_connect(sock*, long int*)
    function int sk_stream_wait_memory(sock*, long int*)
    function int sk_wait_data(sock*, long int*, const sk_buff*)
    function int skb_append_datato_frags(sock*, sk_buff*, void ()*, void*, int)
    function void skb_consume_udp(sock*, sk_buff*, int)
    function void skb_free_datagram(sock*, sk_buff*)
    function int skb_kill_datagram(sock*, sk_buff*, unsigned int)
    function sk_buff* skb_recv_datagram(sock*, unsigned int, int, int*)
    function int skb_send_sock(sock*, sk_buff*, int, int)
    function int skb_send_sock_locked(sock*, sk_buff*, int, int)
    function void skb_set_owner_w(sk_buff*, sock*)
    function int skb_splice_bits(sk_buff*, sock*, unsigned int, pipe_inode_info*, unsigned int, unsigned int)
    function int skb_zerocopy_iter_stream(sock*, sk_buff*, msghdr*, int, ubuf_info*)
    function int skcipher_register_instance(crypto_template*, skcipher_instance*)
    function int snd_ac97_bus(snd_card*, int, snd_ac97_bus_ops*, void*, snd_ac97_bus**)
    function const char* snd_ac97_get_short_name(snd_ac97*)
    function int snd_ac97_mixer(snd_ac97_bus*, snd_ac97_template*, snd_ac97**)
    function int snd_ac97_pcm_assign(snd_ac97_bus*, unsigned short int, const ac97_pcm*)
    function int snd_ac97_pcm_close(ac97_pcm*)
    function int snd_ac97_pcm_double_rate_rules(snd_pcm_runtime*)
    function int snd_ac97_pcm_open(ac97_pcm*, unsigned int, ac97_pcm_cfg, unsigned short int)
    function unsigned short int snd_ac97_read(snd_ac97*, unsigned short int)
    function int snd_ac97_reset(snd_ac97*, bool, unsigned int, unsigned int)
    function void snd_ac97_resume(snd_ac97*)
    function int snd_ac97_set_rate(snd_ac97*, int, unsigned int)
    function void snd_ac97_suspend(snd_ac97*)
    function int snd_ac97_tune_hardware(snd_ac97*, const ac97_quirk*, const char*)
    function int snd_ac97_update(snd_ac97*, unsigned short int, unsigned short int)
    function int snd_ac97_update_bits(snd_ac97*, unsigned short int, unsigned short int, unsigned short int)
    function void snd_ac97_write(snd_ac97*, unsigned short int, unsigned short int)
    function void snd_ac97_write_cache(snd_ac97*, unsigned short int, unsigned short int)
    function int snd_card_add_dev_attr(snd_card*, const attribute_group*)
    function int snd_card_disconnect(snd_card*)
    function void snd_card_disconnect_sync(snd_card*)
    function int snd_card_file_add(snd_card*, file*)
    function int snd_card_file_remove(snd_card*, file*)
    function int snd_card_free(snd_card*)
    function int snd_card_free_when_closed(snd_card*)
    function int snd_card_new(device*, int, const char*, module*, int, snd_card**)
    function int snd_card_register(snd_card*)
    function void snd_card_set_id(snd_card*, const char*)
    function int snd_component_add(snd_card*, const char*)
    function int snd_ctl_activate_id(snd_card*, snd_ctl_elem_id*, int)
    function int snd_ctl_add(snd_card*, snd_kcontrol*)
    function int snd_ctl_add_vmaster_hook(snd_kcontrol*, void ()*, void*)
    function int snd_ctl_apply_vmaster_slaves(snd_kcontrol*, void ()*, void*)
    function int snd_ctl_boolean_mono_info(snd_kcontrol*, snd_ctl_elem_info*)
    function int snd_ctl_boolean_stereo_info(snd_kcontrol*, snd_ctl_elem_info*)
    function snd_kcontrol* snd_ctl_find_id(snd_card*, snd_ctl_elem_id*)
    function snd_kcontrol* snd_ctl_find_numid(snd_card*, unsigned int)
    function void snd_ctl_free_one(snd_kcontrol*)
    function int snd_ctl_get_preferred_subdevice(snd_card*, int)
    function snd_kcontrol* snd_ctl_make_virtual_master(char*, const unsigned int*)
    function snd_kcontrol* snd_ctl_new1(const snd_kcontrol_new*, void*)
    function void snd_ctl_notify(snd_card*, unsigned int, snd_ctl_elem_id*)
    function int snd_ctl_register_ioctl(snd_kctl_ioctl_func_t)
    function int snd_ctl_register_ioctl_compat(snd_kctl_ioctl_func_t)
    function int snd_ctl_remove(snd_card*, snd_kcontrol*)
    function int snd_ctl_remove_id(snd_card*, snd_ctl_elem_id*)
    function int snd_ctl_rename_id(snd_card*, snd_ctl_elem_id*, snd_ctl_elem_id*)
    function int snd_ctl_replace(snd_card*, snd_kcontrol*, bool)
    function void snd_ctl_sync_vmaster(snd_kcontrol*, bool)
    function int snd_ctl_unregister_ioctl(snd_kctl_ioctl_func_t)
    function int snd_ctl_unregister_ioctl_compat(snd_kctl_ioctl_func_t)
    function void snd_device_disconnect(snd_card*, void*)
    function void snd_device_free(snd_card*, void*)
    function void snd_device_initialize(device*, snd_card*)
    function int snd_device_new(snd_card*, snd_device_type, void*, snd_device_ops*)
    function int snd_device_register(snd_card*, void*)
    function int snd_dma_alloc_pages(int, device*, size_t, snd_dma_buffer*)
    function int snd_dma_alloc_pages_fallback(int, device*, size_t, snd_dma_buffer*)
    function void snd_dma_free_pages(snd_dma_buffer*)
    function int snd_dmaengine_pcm_close(snd_pcm_substream*)
    function int snd_dmaengine_pcm_close_release_chan(snd_pcm_substream*)
    function dma_chan* snd_dmaengine_pcm_get_chan(snd_pcm_substream*)
    function int snd_dmaengine_pcm_open(snd_pcm_substream*, dma_chan*)
    function int snd_dmaengine_pcm_open_request_chan(snd_pcm_substream*, dma_filter_fn, void*)
    function snd_pcm_uframes_t snd_dmaengine_pcm_pointer(snd_pcm_substream*)
    function snd_pcm_uframes_t snd_dmaengine_pcm_pointer_no_residue(snd_pcm_substream*)
    function int snd_dmaengine_pcm_prepare_slave_config(snd_pcm_substream*, snd_pcm_hw_params*, dma_slave_config*)
    function int snd_dmaengine_pcm_register(device*, const snd_dmaengine_pcm_config*, unsigned int)
    function dma_chan* snd_dmaengine_pcm_request_channel(dma_filter_fn, void*)
    function void snd_dmaengine_pcm_set_config_from_dai_data(const snd_pcm_substream*, const snd_dmaengine_dai_dma_data*, dma_slave_config*)
    function int snd_dmaengine_pcm_trigger(snd_pcm_substream*, int)
    function void snd_dmaengine_pcm_unregister(device*)
    function int snd_hwdep_new(snd_card*, char*, int, snd_hwdep**)
    function int snd_hwparams_to_dma_slave_config(const snd_pcm_substream*, const snd_pcm_hw_params*, dma_slave_config*)
    function snd_info_entry* snd_info_create_card_entry(snd_card*, const char*, snd_info_entry*)
    function snd_info_entry* snd_info_create_module_entry(module*, const char*, snd_info_entry*)
    function void snd_info_free_entry(snd_info_entry*)
    function int snd_info_register(snd_info_entry*)
    function int snd_jack_add_new_kctl(snd_jack*, const char*, int)
    function int snd_jack_new(snd_card*, const char*, int, snd_jack**, bool, bool)
    function void snd_jack_report(snd_jack*, int)
    function int snd_jack_set_key(snd_jack*, snd_jack_types, int)
    function void snd_jack_set_parent(snd_jack*, device*)
    function const snd_pci_quirk* snd_pci_quirk_lookup(pci_dev*, const snd_pci_quirk*)
    function int snd_pcm_add_chmap_ctls(snd_pcm*, int, const snd_pcm_chmap_elem*, int, unsigned long int, snd_pcm_chmap**)
    function int snd_pcm_create_iec958_consumer(snd_pcm_runtime*, u8*, size_t)
    function int snd_pcm_hw_constraint_eld(snd_pcm_runtime*, void*)
    function int snd_pcm_hw_constraint_integer(snd_pcm_runtime*, snd_pcm_hw_param_t)
    function int snd_pcm_hw_constraint_list(snd_pcm_runtime*, unsigned int, snd_pcm_hw_param_t, const snd_pcm_hw_constraint_list*)
    function int snd_pcm_hw_constraint_mask64(snd_pcm_runtime*, snd_pcm_hw_param_t, u_int64_t)
    function int snd_pcm_hw_constraint_minmax(snd_pcm_runtime*, snd_pcm_hw_param_t, unsigned int, unsigned int)
    function int snd_pcm_hw_constraint_msbits(snd_pcm_runtime*, unsigned int, unsigned int, unsigned int)
    function int snd_pcm_hw_constraint_pow2(snd_pcm_runtime*, unsigned int, snd_pcm_hw_param_t)
    function int snd_pcm_hw_constraint_ranges(snd_pcm_runtime*, unsigned int, snd_pcm_hw_param_t, const snd_pcm_hw_constraint_ranges*)
    function int snd_pcm_hw_constraint_ratdens(snd_pcm_runtime*, unsigned int, snd_pcm_hw_param_t, const snd_pcm_hw_constraint_ratdens*)
    function int snd_pcm_hw_constraint_ratnums(snd_pcm_runtime*, unsigned int, snd_pcm_hw_param_t, const snd_pcm_hw_constraint_ratnums*)
    function int snd_pcm_hw_constraint_step(snd_pcm_runtime*, unsigned int, snd_pcm_hw_param_t, unsigned long int)
    function int snd_pcm_hw_param_first(snd_pcm_substream*, snd_pcm_hw_params*, snd_pcm_hw_param_t, int*)
    function int snd_pcm_hw_param_last(snd_pcm_substream*, snd_pcm_hw_params*, snd_pcm_hw_param_t, int*)
    function int snd_pcm_hw_refine(snd_pcm_substream*, snd_pcm_hw_params*)
    function int snd_pcm_hw_rule_add(snd_pcm_runtime*, unsigned int, int, snd_pcm_hw_rule_func_t, void*, int, ...)
    function int snd_pcm_hw_rule_noresample(snd_pcm_runtime*, unsigned int)
    function int snd_pcm_kernel_ioctl(snd_pcm_substream*, unsigned int, void*)
    function int snd_pcm_lib_default_mmap(snd_pcm_substream*, vm_area_struct*)
    function int snd_pcm_lib_free_pages(snd_pcm_substream*)
    function int snd_pcm_lib_free_vmalloc_buffer(snd_pcm_substream*)
    function page* snd_pcm_lib_get_vmalloc_page(snd_pcm_substream*, unsigned long int)
    function int snd_pcm_lib_ioctl(snd_pcm_substream*, unsigned int, void*)
    function int snd_pcm_lib_malloc_pages(snd_pcm_substream*, size_t)
    function int snd_pcm_lib_preallocate_free_for_all(snd_pcm*)
    function int snd_pcm_lib_preallocate_pages(snd_pcm_substream*, int, device*, size_t, size_t)
    function int snd_pcm_lib_preallocate_pages_for_all(snd_pcm*, int, void*, size_t, size_t)
    function int snd_pcm_limit_hw_rates(snd_pcm_runtime*)
    function int snd_pcm_mmap_data(snd_pcm_substream*, file*, vm_area_struct*)
    function int snd_pcm_new(snd_card*, const char*, int, int, int, snd_pcm**)
    function int snd_pcm_new_internal(snd_card*, const char*, int, int, int, snd_pcm**)
    function int snd_pcm_new_stream(snd_pcm*, int, int)
    function int snd_pcm_open_substream(snd_pcm*, int, file*, snd_pcm_substream**)
    function void snd_pcm_period_elapsed(snd_pcm_substream*)
    function void snd_pcm_release_substream(snd_pcm_substream*)
    function void snd_pcm_set_ops(snd_pcm*, int, const snd_pcm_ops*)
    function void snd_pcm_set_sync(snd_pcm_substream*)
    function int snd_pcm_stop(snd_pcm_substream*, snd_pcm_state_t)
    function int snd_pcm_stop_xrun(snd_pcm_substream*)
    function void snd_pcm_stream_lock(snd_pcm_substream*)
    function void snd_pcm_stream_lock_irq(snd_pcm_substream*)
    function void snd_pcm_stream_unlock(snd_pcm_substream*)
    function void snd_pcm_stream_unlock_irq(snd_pcm_substream*)
    function void snd_pcm_stream_unlock_irqrestore(snd_pcm_substream*, unsigned long int)
    function int snd_pcm_suspend(snd_pcm_substream*)
    function int snd_pcm_suspend_all(snd_pcm*)
    function int snd_power_wait(snd_card*, unsigned int)
    function int snd_rawmidi_drain_input(snd_rawmidi_substream*)
    function int snd_rawmidi_drain_output(snd_rawmidi_substream*)
    function int snd_rawmidi_drop_output(snd_rawmidi_substream*)
    function int snd_rawmidi_info_select(snd_card*, snd_rawmidi_info*)
    function int snd_rawmidi_input_params(snd_rawmidi_substream*, snd_rawmidi_params*)
    function int snd_rawmidi_kernel_open(snd_card*, int, int, int, snd_rawmidi_file*)
    function long int snd_rawmidi_kernel_read(snd_rawmidi_substream*, unsigned char*, long int)
    function int snd_rawmidi_kernel_release(snd_rawmidi_file*)
    function long int snd_rawmidi_kernel_write(snd_rawmidi_substream*, const unsigned char*, long int)
    function int snd_rawmidi_new(snd_card*, char*, int, int, int, snd_rawmidi**)
    function int snd_rawmidi_output_params(snd_rawmidi_substream*, snd_rawmidi_params*)
    function int snd_rawmidi_receive(snd_rawmidi_substream*, const unsigned char*, int)
    function void snd_rawmidi_set_ops(snd_rawmidi*, int, const snd_rawmidi_ops*)
    function int snd_rawmidi_transmit(snd_rawmidi_substream*, unsigned char*, int)
    function int snd_rawmidi_transmit_ack(snd_rawmidi_substream*, int)
    function int snd_rawmidi_transmit_empty(snd_rawmidi_substream*)
    function int snd_rawmidi_transmit_peek(snd_rawmidi_substream*, unsigned char*, int)
    function int snd_register_device(int, snd_card*, int, const file_operations*, void*, device*)
    function int snd_soc_add_card_controls(snd_soc_card*, const snd_kcontrol_new*, int)
    function int snd_soc_add_component(device*, snd_soc_component*, const snd_soc_component_driver*, snd_soc_dai_driver*, int)
    function int snd_soc_add_component_controls(snd_soc_component*, const snd_kcontrol_new*, unsigned int)
    function int snd_soc_add_dai_controls(snd_soc_dai*, const snd_kcontrol_new*, int)
    function int snd_soc_add_dai_link(snd_soc_card*, snd_soc_dai_link*)
    function int snd_soc_bytes_get(snd_kcontrol*, snd_ctl_elem_value*)
    function int snd_soc_bytes_info(snd_kcontrol*, snd_ctl_elem_info*)
    function int snd_soc_bytes_info_ext(snd_kcontrol*, snd_ctl_elem_info*)
    function int snd_soc_bytes_put(snd_kcontrol*, snd_ctl_elem_value*)
    function int snd_soc_bytes_tlv_callback(snd_kcontrol*, int, unsigned int, unsigned int*)
    function snd_kcontrol* snd_soc_card_get_kcontrol(snd_soc_card*, const char*)
    function int snd_soc_card_jack_new(snd_soc_card*, const char*, int, snd_soc_jack*, snd_soc_jack_pin*, unsigned int)
    function snd_kcontrol* snd_soc_cnew(const snd_kcontrol_new*, void*, const char*, const char*)
    function void snd_soc_component_async_complete(snd_soc_component*)
    function int snd_soc_component_disable_pin(snd_soc_component*, const char*)
    function int snd_soc_component_disable_pin_unlocked(snd_soc_component*, const char*)
    function int snd_soc_component_enable_pin(snd_soc_component*, const char*)
    function int snd_soc_component_enable_pin_unlocked(snd_soc_component*, const char*)
    function void snd_soc_component_exit_regmap(snd_soc_component*)
    function int snd_soc_component_force_enable_pin(snd_soc_component*, const char*)
    function int snd_soc_component_force_enable_pin_unlocked(snd_soc_component*, const char*)
    function int snd_soc_component_get_pin_status(snd_soc_component*, const char*)
    function void snd_soc_component_init_regmap(snd_soc_component*, regmap*)
    function int snd_soc_component_nc_pin(snd_soc_component*, const char*)
    function int snd_soc_component_nc_pin_unlocked(snd_soc_component*, const char*)
    function int snd_soc_component_read(snd_soc_component*, unsigned int, unsigned int*)
    function unsigned int snd_soc_component_read32(snd_soc_component*, unsigned int)
    function int snd_soc_component_set_jack(snd_soc_component*, snd_soc_jack*, void*)
    function int snd_soc_component_set_pll(snd_soc_component*, int, int, unsigned int, unsigned int)
    function int snd_soc_component_set_sysclk(snd_soc_component*, int, int, unsigned int, int)
    function int snd_soc_component_test_bits(snd_soc_component*, unsigned int, unsigned int, unsigned int)
    function int snd_soc_component_update_bits(snd_soc_component*, unsigned int, unsigned int, unsigned int)
    function int snd_soc_component_update_bits_async(snd_soc_component*, unsigned int, unsigned int, unsigned int)
    function int snd_soc_component_write(snd_soc_component*, unsigned int, unsigned int)
    function int snd_soc_dai_digital_mute(snd_soc_dai*, int, int)
    function int snd_soc_dai_get_channel_map(snd_soc_dai*, unsigned int*, unsigned int*, unsigned int*, unsigned int*)
    function int snd_soc_dai_set_bclk_ratio(snd_soc_dai*, unsigned int)
    function int snd_soc_dai_set_channel_map(snd_soc_dai*, unsigned int, unsigned int*, unsigned int, unsigned int*)
    function int snd_soc_dai_set_clkdiv(snd_soc_dai*, int, int)
    function int snd_soc_dai_set_fmt(snd_soc_dai*, unsigned int)
    function int snd_soc_dai_set_pll(snd_soc_dai*, int, int, unsigned int, unsigned int)
    function int snd_soc_dai_set_sysclk(snd_soc_dai*, int, unsigned int, int)
    function int snd_soc_dai_set_tdm_slot(snd_soc_dai*, unsigned int, unsigned int, int, int)
    function int snd_soc_dai_set_tristate(snd_soc_dai*, int)
    function int snd_soc_dapm_add_routes(snd_soc_dapm_context*, const snd_soc_dapm_route*, int)
    function int snd_soc_dapm_del_routes(snd_soc_dapm_context*, const snd_soc_dapm_route*, int)
    function int snd_soc_dapm_disable_pin(snd_soc_dapm_context*, const char*)
    function int snd_soc_dapm_disable_pin_unlocked(snd_soc_dapm_context*, const char*)
    function int snd_soc_dapm_enable_pin(snd_soc_dapm_context*, const char*)
    function int snd_soc_dapm_enable_pin_unlocked(snd_soc_dapm_context*, const char*)
    function int snd_soc_dapm_force_bias_level(snd_soc_dapm_context*, snd_soc_bias_level)
    function int snd_soc_dapm_force_enable_pin(snd_soc_dapm_context*, const char*)
    function int snd_soc_dapm_force_enable_pin_unlocked(snd_soc_dapm_context*, const char*)
    function void snd_soc_dapm_free(snd_soc_dapm_context*)
    function int snd_soc_dapm_get_enum_double(snd_kcontrol*, snd_ctl_elem_value*)
    function int snd_soc_dapm_get_pin_status(snd_soc_dapm_context*, const char*)
    function int snd_soc_dapm_get_pin_switch(snd_kcontrol*, snd_ctl_elem_value*)
    function int snd_soc_dapm_get_volsw(snd_kcontrol*, snd_ctl_elem_value*)
    function int snd_soc_dapm_ignore_suspend(snd_soc_dapm_context*, const char*)
    function int snd_soc_dapm_info_pin_switch(snd_kcontrol*, snd_ctl_elem_info*)
    function snd_soc_dapm_context* snd_soc_dapm_kcontrol_dapm(snd_kcontrol*)
    function snd_soc_dapm_widget* snd_soc_dapm_kcontrol_widget(snd_kcontrol*)
    function int snd_soc_dapm_mixer_update_power(snd_soc_dapm_context*, snd_kcontrol*, int, snd_soc_dapm_update*)
    function int snd_soc_dapm_mux_update_power(snd_soc_dapm_context*, snd_kcontrol*, int, soc_enum*, snd_soc_dapm_update*)
    function int snd_soc_dapm_nc_pin(snd_soc_dapm_context*, const char*)
    function int snd_soc_dapm_nc_pin_unlocked(snd_soc_dapm_context*, const char*)
    function snd_soc_dapm_widget* snd_soc_dapm_new_control(snd_soc_dapm_context*, const snd_soc_dapm_widget*)
    function int snd_soc_dapm_new_controls(snd_soc_dapm_context*, const snd_soc_dapm_widget*, int)
    function int snd_soc_dapm_new_widgets(snd_soc_card*)
    function int snd_soc_dapm_put_enum_double(snd_kcontrol*, snd_ctl_elem_value*)
    function int snd_soc_dapm_put_pin_switch(snd_kcontrol*, snd_ctl_elem_value*)
    function int snd_soc_dapm_put_volsw(snd_kcontrol*, snd_ctl_elem_value*)
    function int snd_soc_dapm_sync(snd_soc_dapm_context*)
    function int snd_soc_dapm_sync_unlocked(snd_soc_dapm_context*)
    function int snd_soc_dapm_weak_routes(snd_soc_dapm_context*, const snd_soc_dapm_route*, int)
    function void snd_soc_disconnect_sync(device*)
    function int snd_soc_dpcm_be_can_update(snd_soc_pcm_runtime*, snd_soc_pcm_runtime*, int)
    function snd_soc_dpcm_state snd_soc_dpcm_be_get_state(snd_soc_pcm_runtime*, int)
    function void snd_soc_dpcm_be_set_state(snd_soc_pcm_runtime*, int, snd_soc_dpcm_state)
    function int snd_soc_dpcm_can_be_free_stop(snd_soc_pcm_runtime*, snd_soc_pcm_runtime*, int)
    function int snd_soc_dpcm_can_be_params(snd_soc_pcm_runtime*, snd_soc_pcm_runtime*, int)
    function int snd_soc_dpcm_fe_can_update(snd_soc_pcm_runtime*, int)
    function snd_pcm_substream* snd_soc_dpcm_get_substream(snd_soc_pcm_runtime*, int)
    function snd_soc_dai* snd_soc_find_dai(const snd_soc_dai_link_component*)
    function snd_soc_dai_link* snd_soc_find_dai_link(snd_soc_card*, int, const char*, const char*)
    function int snd_soc_get_dai_id(device_node*)
    function int snd_soc_get_dai_name(of_phandle_args*, const char**)
    function snd_pcm_substream* snd_soc_get_dai_substream(snd_soc_card*, const char*, int)
    function int snd_soc_get_enum_double(snd_kcontrol*, snd_ctl_elem_value*)
    function snd_soc_pcm_runtime* snd_soc_get_pcm_runtime(snd_soc_card*, const char*)
    function int snd_soc_get_strobe(snd_kcontrol*, snd_ctl_elem_value*)
    function int snd_soc_get_volsw(snd_kcontrol*, snd_ctl_elem_value*)
    function int snd_soc_get_volsw_range(snd_kcontrol*, snd_ctl_elem_value*)
    function int snd_soc_get_volsw_sx(snd_kcontrol*, snd_ctl_elem_value*)
    function int snd_soc_get_xr_sx(snd_kcontrol*, snd_ctl_elem_value*)
    function int snd_soc_info_enum_double(snd_kcontrol*, snd_ctl_elem_info*)
    function int snd_soc_info_volsw(snd_kcontrol*, snd_ctl_elem_info*)
    function int snd_soc_info_volsw_range(snd_kcontrol*, snd_ctl_elem_info*)
    function int snd_soc_info_volsw_sx(snd_kcontrol*, snd_ctl_elem_info*)
    function int snd_soc_info_xr_sx(snd_kcontrol*, snd_ctl_elem_info*)
    function int snd_soc_jack_add_gpiods(device*, snd_soc_jack*, int, snd_soc_jack_gpio*)
    function int snd_soc_jack_add_gpios(snd_soc_jack*, int, snd_soc_jack_gpio*)
    function int snd_soc_jack_add_pins(snd_soc_jack*, int, snd_soc_jack_pin*)
    function int snd_soc_jack_add_zones(snd_soc_jack*, int, snd_soc_jack_zone*)
    function void snd_soc_jack_free_gpios(snd_soc_jack*, int, snd_soc_jack_gpio*)
    function int snd_soc_jack_get_type(snd_soc_jack*, int)
    function void snd_soc_jack_notifier_register(snd_soc_jack*, notifier_block*)
    function void snd_soc_jack_notifier_unregister(snd_soc_jack*, notifier_block*)
    function void snd_soc_jack_report(snd_soc_jack*, int, int)
    function int snd_soc_limit_volume(snd_soc_card*, const char*, int)
    function snd_soc_component* snd_soc_lookup_component(device*, const char*)
    function int snd_soc_of_get_dai_link_codecs(device*, device_node*, snd_soc_dai_link*)
    function int snd_soc_of_get_dai_name(device_node*, const char**)
    function int snd_soc_of_get_slot_mask(device_node*, const char*, unsigned int*)
    function void snd_soc_of_parse_audio_prefix(snd_soc_card*, snd_soc_codec_conf*, device_node*, const char*)
    function int snd_soc_of_parse_audio_routing(snd_soc_card*, const char*)
    function int snd_soc_of_parse_audio_simple_widgets(snd_soc_card*, const char*)
    function int snd_soc_of_parse_card_name(snd_soc_card*, const char*)
    function unsigned int snd_soc_of_parse_daifmt(device_node*, const char*, device_node**, device_node**)
    function int snd_soc_of_parse_tdm_slot(device_node*, unsigned int*, unsigned int*, unsigned int*, unsigned int*)
    function void snd_soc_of_put_dai_link_codecs(snd_soc_dai_link*)
    function int snd_soc_poweroff(device*)
    function int snd_soc_put_enum_double(snd_kcontrol*, snd_ctl_elem_value*)
    function int snd_soc_put_strobe(snd_kcontrol*, snd_ctl_elem_value*)
    function int snd_soc_put_volsw(snd_kcontrol*, snd_ctl_elem_value*)
    function int snd_soc_put_volsw_range(snd_kcontrol*, snd_ctl_elem_value*)
    function int snd_soc_put_volsw_sx(snd_kcontrol*, snd_ctl_elem_value*)
    function int snd_soc_put_xr_sx(snd_kcontrol*, snd_ctl_elem_value*)
    function int snd_soc_register_card(snd_soc_card*)
    function int snd_soc_register_component(device*, const snd_soc_component_driver*, snd_soc_dai_driver*, int)
    function int snd_soc_register_dai(snd_soc_component*, snd_soc_dai_driver*)
    function void snd_soc_remove_dai_link(snd_soc_card*, snd_soc_dai_link*)
    function int snd_soc_resume(device*)
    function snd_soc_component* snd_soc_rtdcom_lookup(snd_soc_pcm_runtime*, const char*)
    function int snd_soc_runtime_set_dai_fmt(snd_soc_pcm_runtime*, unsigned int)
    function int snd_soc_set_runtime_hwparams(snd_pcm_substream*, const snd_pcm_hardware*)
    function int snd_soc_suspend(device*)
    function int snd_soc_unregister_card(snd_soc_card*)
    function void snd_soc_unregister_component(device*)
    function int snd_timer_close(snd_timer_instance*)
    function int snd_timer_continue(snd_timer_instance*)
    function int snd_timer_global_free(snd_timer*)
    function int snd_timer_global_new(char*, int, snd_timer**)
    function int snd_timer_global_register(snd_timer*)
    function void snd_timer_interrupt(snd_timer*, unsigned long int)
    function int snd_timer_new(snd_card*, char*, snd_timer_id*, snd_timer**)
    function void snd_timer_notify(snd_timer*, int, timespec*)
    function int snd_timer_open(snd_timer_instance**, char*, snd_timer_id*, unsigned int)
    function int snd_timer_pause(snd_timer_instance*)
    function unsigned long int snd_timer_resolution(snd_timer_instance*)
    function int snd_timer_start(snd_timer_instance*, unsigned int)
    function int snd_timer_stop(snd_timer_instance*)
    function int snd_unregister_device(device*)
    function socket* sock_alloc()
    function file* sock_alloc_file(socket*, int, const char*)
    function sk_buff* sock_alloc_send_pskb(sock*, unsigned long int, unsigned long int, int, int*, int)
    function sk_buff* sock_alloc_send_skb(sock*, unsigned long int, int, int*)
    function int sock_cmsg_send(sock*, msghdr*, sockcm_cookie*)
    function int sock_common_getsockopt(socket*, int, int, char*, int*)
    function int sock_common_recvmsg(socket*, msghdr*, size_t, int)
    function int sock_common_setsockopt(socket*, int, int, char*, unsigned int)
    function int sock_create(int, int, int, socket**)
    function int sock_create_kern(net*, int, int, int, socket**)
    function int sock_create_lite(int, int, int, socket**)
    function sk_buff* sock_dequeue_err_skb(sock*)
    function int sock_diag_check_cookie(sock*, const __u32*)
    function int sock_diag_destroy(sock*, int)
    function int sock_diag_put_filterinfo(bool, sock*, sk_buff*, int)
    function int sock_diag_put_meminfo(sock*, sk_buff*, int)
    function int sock_diag_register(const sock_diag_handler*)
    function void sock_diag_save_cookie(sock*, __u32*)
    function void sock_diag_unregister(const sock_diag_handler*)
    function socket* sock_from_file(file*, int*)
    function void sock_gen_put(sock*)
    function int sock_get_timestamp(sock*, timeval*)
    function int sock_get_timestampns(sock*, timespec*)
    function unsigned long int sock_i_ino(sock*)
    function kuid_t sock_i_uid(sock*)
    function void sock_init_data(socket*, sock*)
    function void sock_kfree_s(sock*, void*, int)
    function void* sock_kmalloc(sock*, int, gfp_t)
    function void sock_kzfree_s(sock*, void*, int)
    function int sock_no_accept(socket*, socket*, int, bool)
    function int sock_no_bind(socket*, sockaddr*, int)
    function int sock_no_connect(socket*, sockaddr*, int, int)
    function int sock_no_getname(socket*, sockaddr*, int)
    function int sock_no_getsockopt(socket*, int, int, char*, int*)
    function int sock_no_ioctl(socket*, unsigned int, unsigned long int)
    function int sock_no_listen(socket*, int)
    function int sock_no_mmap(file*, socket*, vm_area_struct*)
    function int sock_no_recvmsg(socket*, msghdr*, size_t, int)
    function int sock_no_sendmsg(socket*, msghdr*, size_t)
    function int sock_no_sendmsg_locked(sock*, msghdr*, size_t)
    function ssize_t sock_no_sendpage(socket*, page*, int, size_t, int)
    function ssize_t sock_no_sendpage_locked(sock*, page*, int, size_t, int)
    function int sock_no_setsockopt(socket*, int, int, char*, unsigned int)
    function int sock_no_shutdown(socket*, int)
    function int sock_no_socketpair(socket*, socket*)
    function void sock_prot_inuse_add(net*, proto*, int)
    function int sock_prot_inuse_get(net*, proto*)
    function int sock_queue_err_skb(sock*, sk_buff*)
    function int sock_queue_rcv_skb(sock*, sk_buff*)
    function int sock_recv_errqueue(sock*, msghdr*, int, int, int)
    function int sock_recvmsg(socket*, msghdr*, int)
    function int sock_register(const net_proto_family*)
    function void sock_release(socket*)
    function int sock_sendmsg(socket*, msghdr*)
    function int sock_setsockopt(socket*, int, int, char*, unsigned int)
    function sk_buff* sock_wmalloc(sock*, unsigned long int, int, gfp_t)
    function ubuf_info* sock_zerocopy_alloc(sock*, size_t)
    function ubuf_info* sock_zerocopy_realloc(sock*, size_t, ubuf_info*)
    function socket* sockfd_lookup(int, int*)
    function int spi_add_device(spi_device*)
    function spi_device* spi_alloc_device(spi_controller*)
    function int spi_async(spi_device*, spi_message*)
    function int spi_async_locked(spi_device*, spi_message*)
    function int spi_bus_lock(spi_controller*)
    function int spi_bus_unlock(spi_controller*)
    function spi_controller* spi_busnum_to_master(u16)
    function int spi_controller_resume(spi_controller*)
    function int spi_controller_suspend(spi_controller*)
    function void spi_finalize_current_message(spi_controller*)
    function void spi_finalize_current_transfer(spi_controller*)
    function const spi_device_id* spi_get_device_id(const spi_device*)
    function spi_message* spi_get_next_queued_message(spi_controller*)
    function spi_device* spi_new_device(spi_controller*, spi_board_info*)
    function int spi_register_controller(spi_controller*)
    function spi_replaced_transfers* spi_replace_transfers(spi_message*, spi_transfer*, size_t, size_t, spi_replaced_release_t, size_t, gfp_t)
    function void spi_res_add(spi_message*, void*)
    function void* spi_res_alloc(spi_device*, spi_res_release_t, size_t, gfp_t)
    function void spi_res_release(spi_controller*, spi_message*)
    function int spi_setup(spi_device*)
    function int spi_split_transfers_maxsize(spi_controller*, spi_message*, size_t, gfp_t)
    function void spi_statistics_add_transfer_stats(spi_statistics*, spi_transfer*, spi_controller*)
    function int spi_sync(spi_device*, spi_message*)
    function int spi_sync_locked(spi_device*, spi_message*)
    function void spi_unregister_controller(spi_controller*)
    function void spi_unregister_device(spi_device*)
    function int spi_write_then_read(spi_device*, void*, unsigned int, void*, unsigned int)
    function ssize_t splice_direct_to_actor(file*, splice_desc*, splice_direct_actor*)
    function int spmi_command_reset(spmi_device*)
    function int spmi_command_shutdown(spmi_device*)
    function int spmi_command_sleep(spmi_device*)
    function int spmi_command_wakeup(spmi_device*)
    function int spmi_controller_add(spmi_controller*)
    function spmi_controller* spmi_controller_alloc(device*, size_t)
    function void spmi_controller_remove(spmi_controller*)
    function int spmi_device_add(spmi_device*)
    function spmi_device* spmi_device_alloc(spmi_controller*)
    function void spmi_device_remove(spmi_device*)
    function int spmi_ext_register_read(spmi_device*, u8, u8*, size_t)
    function int spmi_ext_register_readl(spmi_device*, u16, u8*, size_t)
    function int spmi_ext_register_write(spmi_device*, u8, const u8*, size_t)
    function int spmi_ext_register_writel(spmi_device*, u16, const u8*, size_t)
    function int spmi_register_read(spmi_device*, u8, u8*)
    function int spmi_register_write(spmi_device*, u8, u8)
    function int spmi_register_zero_write(spmi_device*, u8)
    function void starget_for_each_device(scsi_target*, void*, void ()*)
    function void start_tty(tty_struct*)
    function int stm_register_device(device*, stm_data*, module*)
    function int stm_source_register_device(device*, stm_source_data*)
    function void stm_source_unregister_device(stm_source_data*)
    function int stm_source_write(stm_source_data*, unsigned int, const char*, size_t)
    function void stm_unregister_device(stm_data*)
    function void stop_tty(tty_struct*)
    function ssize_t store_sampling_rate(gov_attr_set*, const char*, size_t)
    function int stp_proto_register(const stp_proto*)
    function void stp_proto_unregister(const stp_proto*)
    function int stream_open(inode*, file*)
    function int submit_bh(int, int, buffer_head*)
    function blk_qc_t submit_bio(bio*)
    function int submit_bio_wait(bio*)
    function void subsys_dev_iter_exit(subsys_dev_iter*)
    function void subsys_dev_iter_init(subsys_dev_iter*, bus_type*, device*, const device_type*)
    function device* subsys_dev_iter_next(subsys_dev_iter*)
    function device* subsys_find_device_by_id(bus_type*, unsigned int, device*)
    function int subsys_interface_register(subsys_interface*)
    function void subsys_interface_unregister(subsys_interface*)
    function int subsys_system_register(bus_type*, const attribute_group**)
    function int subsys_virtual_register(bus_type*, const attribute_group**)
    function int super_setup_bdi(super_block*)
    function int super_setup_bdi_name(super_block*, char*, ...)
    function int sync_blockdev(block_device*)
    function int sync_dirty_buffer(buffer_head*)
    function sync_file* sync_file_create(dma_fence*)
    function int sync_filesystem(super_block*)
    function int sync_inode(inode*, writeback_control*)
    function int sync_inode_metadata(inode*, int)
    function void sync_inodes_sb(super_block*)
    function void sys_copyarea(fb_info*, const fb_copyarea*)
    function void sys_fillrect(fb_info*, const fb_fillrect*)
    function void sys_imageblit(fb_info*, const fb_image*)
    function regmap* syscon_node_to_regmap(device_node*)
    function regmap* syscon_regmap_lookup_by_phandle(device_node*, const char*)
    function int sysfs_add_file_to_group(kobject*, const attribute*, const char*)
    function int sysfs_add_link_to_group(kobject*, const char*, kobject*, const char*)
    function kernfs_node* sysfs_break_active_protection(kobject*, const attribute*)
    function int sysfs_chmod_file(kobject*, const attribute*, umode_t)
    function int sysfs_create_bin_file(kobject*, const bin_attribute*)
    function int sysfs_create_file_ns(kobject*, const attribute*, void*)
    function int sysfs_create_files(kobject*, const attribute**)
    function int sysfs_create_group(kobject*, const attribute_group*)
    function int sysfs_create_groups(kobject*, const attribute_group**)
    function int sysfs_create_link(kobject*, kobject*, const char*)
    function int sysfs_create_link_nowarn(kobject*, kobject*, const char*)
    function int sysfs_create_mount_point(kobject*, const char*)
    function int sysfs_merge_group(kobject*, const attribute_group*)
    function void sysfs_notify(kobject*, const char*, const char*)
    function void sysfs_remove_bin_file(kobject*, const bin_attribute*)
    function void sysfs_remove_file_from_group(kobject*, const attribute*, const char*)
    function void sysfs_remove_file_ns(kobject*, const attribute*, void*)
    function void sysfs_remove_files(kobject*, const attribute**)
    function void sysfs_remove_group(kobject*, const attribute_group*)
    function void sysfs_remove_groups(kobject*, const attribute_group**)
    function void sysfs_remove_link(kobject*, const char*)
    function void sysfs_remove_link_from_group(kobject*, const char*, const char*)
    function void sysfs_remove_mount_point(kobject*, const char*)
    function int sysfs_rename_link_ns(kobject*, kobject*, const char*, const char*, void*)
    function void sysfs_unbreak_active_protection(kernfs_node*)
    function void sysfs_unmerge_group(kobject*, const attribute_group*)
    function int sysfs_update_group(kobject*, const attribute_group*)
    function void take_dentry_name_snapshot(name_snapshot*, dentry*)
    function pid_namespace* task_active_pid_ns(task_struct*)
    function int tc_setup_cb_call(tcf_block*, tcf_exts*, tc_setup_type, void*, bool)
    function int tc_setup_cb_egdev_call(const net_device*, tc_setup_type, void*, bool)
    function int tc_setup_cb_egdev_register(const net_device*, tc_setup_cb_t*, void*)
    function void tc_setup_cb_egdev_unregister(const net_device*, tc_setup_cb_t*, void*)
    function int tcf_action_dump_1(sk_buff*, tc_action*, int, int)
    function int tcf_action_exec(sk_buff*, tc_action**, int, tcf_result*)
    function tcf_block_cb* tcf_block_cb_lookup(tcf_block*, tc_setup_cb_t*, void*)
    function int tcf_block_cb_register(tcf_block*, tc_setup_cb_t*, void*, void*, netlink_ext_ack*)
    function void tcf_block_cb_unregister(tcf_block*, tc_setup_cb_t*, void*)
    function int tcf_block_get(tcf_block**, tcf_proto**, Qdisc*, netlink_ext_ack*)
    function int tcf_block_get_ext(tcf_block**, Qdisc*, tcf_block_ext_info*, netlink_ext_ack*)
    function void tcf_block_netif_keep_dst(tcf_block*)
    function void tcf_block_put(tcf_block*)
    function void tcf_block_put_ext(tcf_block*, Qdisc*, tcf_block_ext_info*)
    function tcf_chain* tcf_chain_get_by_act(tcf_block*, u32)
    function void tcf_chain_put_by_act(tcf_chain*)
    function int tcf_classify(sk_buff*, const tcf_proto*, tcf_result*, bool)
    function int tcf_em_register(tcf_ematch_ops*)
    function int tcf_em_tree_validate(tcf_proto*, nlattr*, tcf_ematch_tree*)
    function void tcf_em_unregister(tcf_ematch_ops*)
    function void tcf_exts_change(tcf_exts*, tcf_exts*)
    function void tcf_exts_destroy(tcf_exts*)
    function int tcf_exts_dump(sk_buff*, tcf_exts*)
    function int tcf_exts_dump_stats(sk_buff*, tcf_exts*)
    function int tcf_exts_validate(net*, tcf_proto*, nlattr**, nlattr*, tcf_exts*, bool, netlink_ext_ack*)
    function int tcf_generic_walker(tc_action_net*, sk_buff*, netlink_callback*, int, const tc_action_ops*, netlink_ext_ack*)
    function int tcf_idr_check_alloc(tc_action_net*, u32*, tc_action**, int)
    function void tcf_idr_cleanup(tc_action_net*, u32)
    function int tcf_idr_create(tc_action_net*, u32, nlattr*, tc_action**, const tc_action_ops*, int, bool)
    function void tcf_idr_insert(tc_action_net*, tc_action*)
    function int tcf_idr_search(tc_action_net*, tc_action**, u32)
    function void tcf_idrinfo_destroy(const tc_action_ops*, tcf_idrinfo*)
    function int tcf_register_action(tc_action_ops*, pernet_operations*)
    function int tcf_unregister_action(tc_action_ops*, pernet_operations*)
    function int tcp_abort(sock*, int)
    function bool tcp_add_backlog(sock*, sk_buff*)
    function void tcp_ca_openreq_child(sock*, const dst_entry*)
    function sock* tcp_check_req(sock*, sk_buff*, request_sock*, bool, bool*)
    function int tcp_child_process(sock*, sock*, sk_buff*)
    function void tcp_close(sock*, long int)
    function void tcp_cong_avoid_ai(tcp_sock*, u32, u32)
    function int tcp_conn_request(request_sock_ops*, const tcp_request_sock_ops*, sock*, sk_buff*)
    function int tcp_connect(sock*)
    function sock* tcp_create_openreq_child(const sock*, request_sock*, sk_buff*)
    function int tcp_disconnect(sock*, int)
    function void tcp_done(sock*)
    function void tcp_enter_cwr(sock*)
    function void tcp_enter_memory_pressure(sock*)
    function void tcp_enter_quickack_mode(sock*, unsigned int)
    function bool tcp_fastopen_defer_connect(sock*, int*)
    function int tcp_filter(sock*, sk_buff*)
    function void tcp_get_info(sock*, tcp_info*)
    function int tcp_getsockopt(sock*, int, int, char*, int*)
    function void tcp_init_sock(sock*)
    function void tcp_initialize_rcv_mss(sock*)
    function int tcp_ioctl(sock*, int, unsigned long int)
    function void tcp_leave_memory_pressure(sock*)
    function sk_buff* tcp_make_synack(const sock*, dst_entry*, request_sock*, tcp_fastopen_cookie*, tcp_synack_type)
    function int tcp_mmap(file*, socket*, vm_area_struct*)
    function int tcp_mss_to_mtu(sock*, int)
    function void tcp_mtup_init(sock*)
    function void tcp_openreq_init_rwin(request_sock*, const sock*, const dst_entry*)
    function int tcp_peek_len(socket*)
    function __poll_t tcp_poll(file*, socket*, poll_table*)
    function void tcp_rate_check_app_limited(sock*)
    function void tcp_rcv_established(sock*, sk_buff*)
    function int tcp_rcv_state_process(sock*, sk_buff*)
    function int tcp_read_sock(sock*, read_descriptor_t*, sk_read_actor_t)
    function int tcp_recvmsg(sock*, msghdr*, size_t, int, int, int*)
    function int tcp_register_congestion_control(tcp_congestion_ops*)
    function int tcp_register_ulp(tcp_ulp_ops*)
    function void tcp_release_cb(sock*)
    function void tcp_reno_cong_avoid(sock*, u32, u32)
    function u32 tcp_reno_ssthresh(sock*)
    function u32 tcp_reno_undo_cwnd(sock*)
    function void tcp_req_err(sock*, u32, bool)
    function int tcp_rtx_synack(const sock*, request_sock*)
    function void tcp_select_initial_window(const sock*, int, __u32, __u32*, __u32*, int, __u8*, __u32)
    function int tcp_sendmsg(sock*, msghdr*, size_t)
    function int tcp_sendmsg_locked(sock*, msghdr*, size_t)
    function int tcp_sendpage(sock*, page*, int, size_t, int)
    function int tcp_sendpage_locked(sock*, page*, int, size_t, int)
    function void tcp_set_keepalive(sock*, int)
    function int tcp_set_rcvlowat(sock*, int)
    function void tcp_set_state(sock*, int)
    function int tcp_setsockopt(sock*, int, int, char*, unsigned int)
    function void tcp_shutdown(sock*, int)
    function void tcp_simple_retransmit(sock*)
    function u32 tcp_slow_start(tcp_sock*, u32)
    function ssize_t tcp_splice_read(socket*, loff_t*, pipe_inode_info*, size_t, unsigned int)
    function void tcp_syn_ack_timeout(const request_sock*)
    function unsigned int tcp_sync_mss(sock*, u32)
    function void tcp_time_wait(sock*, int, int)
    function tcp_tw_status tcp_timewait_state_process(inet_timewait_sock*, sk_buff*, const tcphdr*)
    function void tcp_twsk_destructor(sock*)
    function int tcp_twsk_unique(sock*, sock*, void*)
    function void tcp_unregister_congestion_control(tcp_congestion_ops*)
    function void tcp_unregister_ulp(tcp_ulp_ops*)
    function int tcp_v4_conn_request(sock*, sk_buff*)
    function int tcp_v4_connect(sock*, sockaddr*, int)
    function void tcp_v4_destroy_sock(sock*)
    function int tcp_v4_do_rcv(sock*, sk_buff*)
    function void tcp_v4_mtu_reduced(sock*)
    function void tcp_v4_send_check(sock*, sk_buff*)
    function sock* tcp_v4_syn_recv_sock(const sock*, sk_buff*, request_sock*, dst_entry*, request_sock*, bool*)
    function int textsearch_register(ts_ops*)
    function int textsearch_unregister(ts_ops*)
    function int thaw_bdev(block_device*, super_block*)
    function int thaw_super(super_block*)
    function void thermal_cdev_update(thermal_cooling_device*)
    function thermal_cooling_device* thermal_cooling_device_register(char*, void*, const thermal_cooling_device_ops*)
    function void thermal_cooling_device_unregister(thermal_cooling_device*)
    function int thermal_generate_netlink_event(thermal_zone_device*, events)
    function void thermal_notify_framework(thermal_zone_device*, int)
    function thermal_cooling_device* thermal_of_cooling_device_register(device_node*, char*, void*, const thermal_cooling_device_ops*)
    function int thermal_zone_bind_cooling_device(thermal_zone_device*, int, thermal_cooling_device*, unsigned long int, unsigned long int, unsigned int)
    function thermal_zone_device* thermal_zone_device_register(const char*, int, int, void*, thermal_zone_device_ops*, thermal_zone_params*, int, int)
    function void thermal_zone_device_unregister(thermal_zone_device*)
    function void thermal_zone_device_update(thermal_zone_device*, thermal_notify_event)
    function int thermal_zone_get_offset(thermal_zone_device*)
    function int thermal_zone_get_slope(thermal_zone_device*)
    function int thermal_zone_get_temp(thermal_zone_device*, int*)
    function thermal_zone_device* thermal_zone_get_zone_by_name(const char*)
    function thermal_zone_device* thermal_zone_of_sensor_register(device*, int, void*, const thermal_zone_of_device_ops*)
    function void thermal_zone_of_sensor_unregister(device*, thermal_zone_device*)
    function void thermal_zone_set_trips(thermal_zone_device*)
    function int thermal_zone_unbind_cooling_device(thermal_zone_device*, int, thermal_cooling_device*)
    function unsigned long int thp_get_unmapped_area(file*, unsigned long int, unsigned long int, unsigned long int, unsigned long int)
    function int tipc_dump_done(netlink_callback*)
    function int tipc_dump_start(netlink_callback*)
    function int tipc_nl_sk_walk(sk_buff*, netlink_callback*, void ()*)
    function int tipc_sk_fill_sock_diag(sk_buff*, netlink_callback*, tipc_sock*, u32, void ()*)
    function void touch_buffer(buffer_head*)
    function void touchscreen_parse_properties(input_dev*, bool, touchscreen_properties*)
    function void touchscreen_report_pos(input_dev*, const touchscreen_properties*, unsigned int, unsigned int, bool)
    function unsigned int trace_call_bpf(trace_event_call*, void*)
    function int trace_define_field(trace_event_call*, const char*, const char*, int, int, int, int)
    function void trace_event_buffer_commit(trace_event_buffer*)
    function ring_buffer_event* trace_event_buffer_lock_reserve(ring_buffer**, trace_event_file*, int, unsigned long int, unsigned long int, int)
    function void* trace_event_buffer_reserve(trace_event_buffer*, trace_event_file*, unsigned long int)
    function bool trace_event_ignore_this_pid(trace_event_file*)
    function int trace_event_raw_init(trace_event_call*)
    function int trace_event_reg(trace_event_call*, trace_reg, void*)
    function void transport_add_device(device*)
    function int transport_class_register(transport_class*)
    function void transport_class_unregister(transport_class*)
    function void transport_configure_device(device*)
    function void transport_destroy_device(device*)
    function void transport_remove_device(device*)
    function void transport_setup_device(device*)
    function void truncate_pagecache(inode*, loff_t)
    function void truncate_pagecache_range(inode*, loff_t, loff_t)
    function void truncate_setsize(inode*, loff_t)
    function dentry* try_lookup_one_len(const char*, dentry*, int)
    function bool try_module_get(module*)
    function void try_to_writeback_inodes_sb(super_block*, wb_reason)
    function int ttm_base_object_init(ttm_object_file*, ttm_base_object*, bool, ttm_object_type, void ()*, void ()*)
    function ttm_base_object* ttm_base_object_lookup(ttm_object_file*, uint32_t)
    function ttm_base_object* ttm_base_object_lookup_for_ref(ttm_object_device*, uint32_t)
    function void ttm_base_object_unref(ttm_base_object**)
    function size_t ttm_bo_acc_size(ttm_bo_device*, unsigned long int, unsigned int)
    function void ttm_bo_add_to_lru(ttm_buffer_object*)
    function int ttm_bo_clean_mm(ttm_bo_device*, unsigned int)
    function int ttm_bo_create(ttm_bo_device*, unsigned long int, ttm_bo_type, ttm_placement*, uint32_t, bool, ttm_buffer_object**)
    function void ttm_bo_del_sub_from_lru(ttm_buffer_object*)
    function int ttm_bo_device_init(ttm_bo_device*, ttm_bo_global*, ttm_bo_driver*, address_space*, uint64_t, bool)
    function int ttm_bo_device_release(ttm_bo_device*)
    function size_t ttm_bo_dma_acc_size(ttm_bo_device*, unsigned long int, unsigned int)
    function int ttm_bo_evict_mm(ttm_bo_device*, unsigned int)
    function bool ttm_bo_eviction_valuable(ttm_buffer_object*, const ttm_place*)
    function int ttm_bo_init(ttm_bo_device*, ttm_buffer_object*, unsigned long int, ttm_bo_type, ttm_placement*, uint32_t, bool, size_t, sg_table*, reservation_object*, void ()*)
    function int ttm_bo_init_mm(ttm_bo_device*, unsigned int, unsigned long int)
    function int ttm_bo_init_reserved(ttm_bo_device*, ttm_buffer_object*, unsigned long int, ttm_bo_type, ttm_placement*, uint32_t, ttm_operation_ctx*, size_t, sg_table*, reservation_object*, void ()*)
    function int ttm_bo_kmap(ttm_buffer_object*, unsigned long int, unsigned long int, ttm_bo_kmap_obj*)
    function void ttm_bo_kunmap(ttm_bo_kmap_obj*)
    function int ttm_bo_lock_delayed_workqueue(ttm_bo_device*)
    function void ttm_bo_mem_put(ttm_buffer_object*, ttm_mem_reg*)
    function int ttm_bo_mem_space(ttm_buffer_object*, ttm_placement*, ttm_mem_reg*, ttm_operation_ctx*)
    function int ttm_bo_mmap(file*, vm_area_struct*, ttm_bo_device*)
    function int ttm_bo_move_accel_cleanup(ttm_buffer_object*, dma_fence*, bool, ttm_mem_reg*)
    function int ttm_bo_move_memcpy(ttm_buffer_object*, ttm_operation_ctx*, ttm_mem_reg*)
    function void ttm_bo_move_to_lru_tail(ttm_buffer_object*)
    function int ttm_bo_move_ttm(ttm_buffer_object*, ttm_operation_ctx*, ttm_mem_reg*)
    function int ttm_bo_pipeline_move(ttm_buffer_object*, dma_fence*, bool, ttm_mem_reg*)
    function void ttm_bo_put(ttm_buffer_object*)
    function int ttm_bo_swapout(ttm_bo_global*, ttm_operation_ctx*)
    function void ttm_bo_swapout_all(ttm_bo_device*)
    function int ttm_bo_synccpu_write_grab(ttm_buffer_object*, bool)
    function void ttm_bo_synccpu_write_release(ttm_buffer_object*)
    function void ttm_bo_unlock_delayed_workqueue(ttm_bo_device*, int)
    function void ttm_bo_unmap_virtual(ttm_buffer_object*)
    function void ttm_bo_unref(ttm_buffer_object**)
    function int ttm_bo_validate(ttm_buffer_object*, ttm_placement*, ttm_operation_ctx*)
    function int ttm_bo_wait(ttm_buffer_object*, bool, bool)
    function bool ttm_check_under_lowerlimit(ttm_mem_global*, uint64_t, ttm_operation_ctx*)
    function int ttm_dma_populate(ttm_dma_tt*, device*, ttm_operation_ctx*)
    function void ttm_dma_tt_fini(ttm_dma_tt*)
    function int ttm_dma_tt_init(ttm_dma_tt*, ttm_buffer_object*, uint32_t)
    function void ttm_dma_unpopulate(ttm_dma_tt*, device*)
    function int ttm_fbdev_mmap(vm_area_struct*, ttm_buffer_object*)
    function uint64_t ttm_get_kernel_zone_memory_size(ttm_mem_global*)
    function void ttm_lock_init(ttm_lock*)
    function int ttm_mem_global_alloc(ttm_mem_global*, uint64_t, ttm_operation_ctx*)
    function void ttm_mem_global_free(ttm_mem_global*, uint64_t)
    function int ttm_mem_global_init(ttm_mem_global*)
    function void ttm_mem_global_release(ttm_mem_global*)
    function void ttm_mem_io_free(ttm_bo_device*, ttm_mem_reg*)
    function int ttm_mem_io_lock(ttm_mem_type_manager*, bool)
    function int ttm_mem_io_reserve(ttm_bo_device*, ttm_mem_reg*)
    function void ttm_mem_io_unlock(ttm_mem_type_manager*)
    function ttm_object_device* ttm_object_device_init(ttm_mem_global*, unsigned int, const dma_buf_ops*)
    function void ttm_object_device_release(ttm_object_device**)
    function ttm_object_file* ttm_object_file_init(ttm_object_device*, unsigned int)
    function void ttm_object_file_release(ttm_object_file**)
    function int ttm_pool_populate(ttm_tt*, ttm_operation_ctx*)
    function void ttm_pool_unpopulate(ttm_tt*)
    function int ttm_populate_and_map_pages(device*, ttm_dma_tt*, ttm_operation_ctx*)
    function int ttm_prime_fd_to_handle(ttm_object_file*, int, u32*)
    function int ttm_prime_handle_to_fd(ttm_object_file*, uint32_t, uint32_t, int*)
    function int ttm_prime_object_init(ttm_object_file*, size_t, ttm_prime_object*, bool, ttm_object_type, void ()*, void ()*)
    function int ttm_read_lock(ttm_lock*, bool)
    function void ttm_read_unlock(ttm_lock*)
    function int ttm_ref_object_add(ttm_object_file*, ttm_base_object*, ttm_ref_type, bool*, bool)
    function int ttm_ref_object_base_unref(ttm_object_file*, unsigned long int, ttm_ref_type)
    function bool ttm_ref_object_exists(ttm_object_file*, ttm_base_object*)
    function int ttm_sg_tt_init(ttm_dma_tt*, ttm_buffer_object*, uint32_t)
    function void ttm_suspend_lock(ttm_lock*)
    function void ttm_suspend_unlock(ttm_lock*)
    function int ttm_tt_bind(ttm_tt*, ttm_mem_reg*, ttm_operation_ctx*)
    function void ttm_tt_fini(ttm_tt*)
    function int ttm_tt_init(ttm_tt*, ttm_buffer_object*, uint32_t)
    function int ttm_tt_set_placement_caching(ttm_tt*, uint32_t)
    function void ttm_unmap_and_unpopulate_pages(device*, ttm_dma_tt*)
    function int ttm_vt_lock(ttm_lock*, bool, ttm_object_file*)
    function int ttm_vt_unlock(ttm_lock*)
    function int ttm_write_lock(ttm_lock*, bool)
    function void ttm_write_unlock(ttm_lock*)
    function void tty_buffer_lock_exclusive(tty_port*)
    function int tty_buffer_request_room(tty_port*, size_t)
    function int tty_buffer_set_limit(tty_port*, int)
    function int tty_buffer_space_avail(tty_port*)
    function void tty_buffer_unlock_exclusive(tty_port*)
    function int tty_chars_in_buffer(tty_struct*)
    function int tty_check_change(tty_struct*)
    function dev_t tty_devnum(tty_struct*)
    function int tty_do_resize(tty_struct*, winsize*)
    function void tty_driver_flush_buffer(tty_struct*)
    function void tty_driver_kref_put(tty_driver*)
    function void tty_encode_baud_rate(tty_struct*, speed_t, speed_t)
    function void tty_flip_buffer_push(tty_port*)
    function pid* tty_get_pgrp(tty_struct*)
    function void tty_hangup(tty_struct*)
    function int tty_hung_up_p(file*)
    function void tty_init_termios(tty_struct*)
    function int tty_insert_flip_string_fixed_flag(tty_port*, const unsigned char*, char, size_t)
    function int tty_insert_flip_string_flags(tty_port*, const unsigned char*, const char*, size_t)
    function void tty_kclose(tty_struct*)
    function tty_struct* tty_kopen(dev_t)
    function void tty_kref_put(tty_struct*)
    function void tty_ldisc_deref(tty_ldisc*)
    function void tty_ldisc_flush(tty_struct*)
    function int tty_ldisc_receive_buf(tty_ldisc*, const unsigned char*, char*, int)
    function tty_ldisc* tty_ldisc_ref(tty_struct*)
    function tty_ldisc* tty_ldisc_ref_wait(tty_struct*)
    function void tty_ldisc_release(tty_struct*)
    function void tty_lock(tty_struct*)
    function int tty_mode_ioctl(tty_struct*, file*, unsigned int, unsigned long int)
    function const char* tty_name(const tty_struct*)
    function int tty_perform_flush(tty_struct*, unsigned long int)
    function int tty_port_alloc_xmit_buf(tty_port*)
    function int tty_port_block_til_ready(tty_port*, tty_struct*, file*)
    function int tty_port_carrier_raised(tty_port*)
    function void tty_port_close(tty_port*, tty_struct*, file*)
    function void tty_port_close_end(tty_port*, tty_struct*)
    function int tty_port_close_start(tty_port*, tty_struct*, file*)
    function void tty_port_destroy(tty_port*)
    function void tty_port_free_xmit_buf(tty_port*)
    function void tty_port_hangup(tty_port*)
    function void tty_port_init(tty_port*)
    function int tty_port_install(tty_port*, tty_driver*, tty_struct*)
    function void tty_port_link_device(tty_port*, tty_driver*, unsigned int)
    function void tty_port_lower_dtr_rts(tty_port*)
    function int tty_port_open(tty_port*, tty_struct*, file*)
    function void tty_port_put(tty_port*)
    function void tty_port_raise_dtr_rts(tty_port*)
    function device* tty_port_register_device(tty_port*, tty_driver*, unsigned int, device*)
    function device* tty_port_register_device_attr(tty_port*, tty_driver*, unsigned int, device*, void*, const attribute_group**)
    function device* tty_port_register_device_attr_serdev(tty_port*, tty_driver*, unsigned int, device*, void*, const attribute_group**)
    function device* tty_port_register_device_serdev(tty_port*, tty_driver*, unsigned int, device*)
    function tty_struct* tty_port_tty_get(tty_port*)
    function void tty_port_tty_hangup(tty_port*, bool)
    function void tty_port_tty_set(tty_port*, tty_struct*)
    function void tty_port_tty_wakeup(tty_port*)
    function void tty_port_unregister_device(tty_port*, tty_driver*, unsigned int)
    function int tty_prepare_flip_string(tty_port*, unsigned char**, size_t)
    function int tty_put_char(tty_struct*, unsigned char)
    function device* tty_register_device(tty_driver*, unsigned int, device*)
    function device* tty_register_device_attr(tty_driver*, unsigned int, device*, void*, const attribute_group**)
    function int tty_register_driver(tty_driver*)
    function int tty_register_ldisc(int, tty_ldisc_ops*)
    function void tty_release_struct(tty_struct*, int)
    function void tty_save_termios(tty_struct*)
    function void tty_schedule_flip(tty_port*)
    function int tty_set_ldisc(tty_struct*, int)
    function void tty_set_operations(tty_driver*, const tty_operations*)
    function int tty_set_termios(tty_struct*, ktermios*)
    function int tty_standard_install(tty_driver*, tty_struct*)
    function void tty_throttle(tty_struct*)
    function void tty_unlock(tty_struct*)
    function void tty_unregister_device(tty_driver*, unsigned int)
    function int tty_unregister_driver(tty_driver*)
    function void tty_unthrottle(tty_struct*)
    function void tty_vhangup(tty_struct*)
    function void tty_wait_until_sent(tty_struct*, long int)
    function void tty_wakeup(tty_struct*)
    function int tty_write_room(tty_struct*)
    function socket* tun_get_socket(file*)
    function ptr_ring* tun_get_tx_ring(file*)
    function int uart_add_one_port(uart_driver*, uart_port*)
    function void uart_console_write(uart_port*, const char*, unsigned int, void ()*)
    function unsigned int uart_get_baud_rate(uart_port*, ktermios*, ktermios*, unsigned int, unsigned int)
    function unsigned int uart_get_divisor(uart_port*, unsigned int)
    function void uart_get_rs485_mode(device*, serial_rs485*)
    function void uart_handle_cts_change(uart_port*, unsigned int)
    function void uart_handle_dcd_change(uart_port*, unsigned int)
    function void uart_insert_char(uart_port*, unsigned int, unsigned int, unsigned int, unsigned int)
    function int uart_match_port(uart_port*, uart_port*)
    function int uart_register_driver(uart_driver*)
    function int uart_remove_one_port(uart_driver*, uart_port*)
    function int uart_resume_port(uart_driver*, uart_port*)
    function int uart_set_options(uart_port*, console*, int, int, int, int)
    function int uart_suspend_port(uart_driver*, uart_port*)
    function void uart_unregister_driver(uart_driver*)
    function void uart_update_timeout(uart_port*, unsigned int, unsigned int)
    function void uart_write_wakeup(uart_port*)
    function sock* udp4_lib_lookup(net*, __be32, __be16, __be32, __be16, int)
    function sock* udp4_lib_lookup_skb(sk_buff*, __be16, __be16)
    function sock* udp6_lib_lookup(net*, const in6_addr*, __be16, const in6_addr*, __be16, int)
    function sock* udp6_lib_lookup_skb(sk_buff*, __be16, __be16)
    function int udp_abort(sock*, int)
    function int udp_cmsg_send(sock*, msghdr*, u16*)
    function void udp_destruct_sock(sock*)
    function int udp_disconnect(sock*, int)
    function void udp_flush_pending_frames(sock*)
    function int udp_gro_complete(sk_buff*, int, udp_lookup_t)
    function sk_buff* udp_gro_receive(list_head*, sk_buff*, udphdr*, udp_lookup_t)
    function int udp_init_sock(sock*)
    function int udp_ioctl(sock*, int, unsigned long int)
    function int udp_lib_get_port(sock*, unsigned short int, unsigned int)
    function int udp_lib_getsockopt(sock*, int, int, char*, int*)
    function void udp_lib_rehash(sock*, u16)
    function int udp_lib_setsockopt(sock*, int, int, char*, unsigned int, void ()*)
    function void udp_lib_unhash(sock*)
    function __poll_t udp_poll(file*, socket*, poll_table*)
    function int udp_pre_connect(sock*, sockaddr*, int)
    function int udp_push_pending_frames(sock*)
    function int udp_sendmsg(sock*, msghdr*, size_t)
    function bool udp_sk_rx_dst_set(sock*, dst_entry*)
    function void udp_skb_destructor(sock*, sk_buff*)
    function int udp_sock_create4(net*, udp_port_cfg*, socket**)
    function int udp_sock_create6(net*, udp_port_cfg*, socket**)
    function metadata_dst* udp_tun_rx_dst(sk_buff*, unsigned short int, __be16, __be64, int)
    function int udp_tunnel6_xmit_skb(dst_entry*, sock*, sk_buff*, net_device*, in6_addr*, in6_addr*, __u8, __u8, __be32, __be16, __be16, bool)
    function void udp_tunnel_drop_rx_port(net_device*, socket*, unsigned short int)
    function void udp_tunnel_notify_add_rx_port(socket*, unsigned short int)
    function void udp_tunnel_notify_del_rx_port(socket*, unsigned short int)
    function void udp_tunnel_push_rx_port(net_device*, socket*, unsigned short int)
    function void udp_tunnel_sock_release(socket*)
    function void udp_tunnel_xmit_skb(rtable*, sock*, sk_buff*, __be32, __be32, __u8, __u8, __be16, __be16, __be16, bool, bool)
    function int ufshcd_alloc_host(device*, ufs_hba**)
    function int ufshcd_config_pwr_mode(ufs_hba*, ufs_pa_layer_attr*)
    function void ufshcd_dealloc_host(ufs_hba*)
    function int ufshcd_dme_get_attr(ufs_hba*, u32, u32*, u8)
    function int ufshcd_dme_set_attr(ufs_hba*, u32, u8, u32, u8)
    function int ufshcd_dump_regs(ufs_hba*, size_t, size_t, const char*)
    function u32 ufshcd_get_local_unipro_ver(ufs_hba*)
    function int ufshcd_hold(ufs_hba*, bool)
    function int ufshcd_init(ufs_hba*, void*, unsigned int)
    function int ufshcd_map_desc_id_to_length(ufs_hba*, desc_idn, int*)
    function int ufshcd_pltfrm_init(platform_device*, ufs_hba_variant_ops*)
    function int ufshcd_pltfrm_resume(device*)
    function int ufshcd_pltfrm_runtime_idle(device*)
    function int ufshcd_pltfrm_runtime_resume(device*)
    function int ufshcd_pltfrm_runtime_suspend(device*)
    function void ufshcd_pltfrm_shutdown(platform_device*)
    function int ufshcd_pltfrm_suspend(device*)
    function void ufshcd_release(ufs_hba*)
    function void ufshcd_remove(ufs_hba*)
    function int ufshcd_runtime_idle(ufs_hba*)
    function int ufshcd_runtime_resume(ufs_hba*)
    function int ufshcd_runtime_suspend(ufs_hba*)
    function int ufshcd_shutdown(ufs_hba*)
    function int ufshcd_system_resume(ufs_hba*)
    function int ufshcd_system_suspend(ufs_hba*)
    function int uhci_check_and_reset_hc(pci_dev*, unsigned long int)
    function void uhci_reset_hc(pci_dev*, unsigned long int)
    function void uio_event_notify(uio_info*)
    function void uio_unregister_device(uio_info*)
    function long int unix_inq_len(sock*)
    function long int unix_outq_len(sock*)
    function sock* unix_peer_get(sock*)
    function int unlink_framebuffer(fb_info*)
    function void unlock_buffer(buffer_head*)
    function void unlock_new_inode(inode*)
    function void unlock_rename(dentry*, dentry*)
    function void unlock_two_nondirectories(inode*, inode*)
    function void unregister_8022_client(datalink_proto*)
    function void unregister_asymmetric_key_parser(asymmetric_key_parser*)
    function void unregister_binfmt(linux_binfmt*)
    function int unregister_console(console*)
    function int unregister_filesystem(file_system_type*)
    function int unregister_framebuffer(fb_info*)
    function void unregister_gadget_item(config_item*)
    function void unregister_hw_breakpoint(perf_event*)
    function void unregister_netdev(net_device*)
    function void unregister_netdevice_queue(net_device*, list_head*)
    function int unregister_qdisc(Qdisc_ops*)
    function void unregister_quota_format(quota_format_type*)
    function void unregister_snap_client(datalink_proto*)
    function int unregister_tcf_proto_ops(tcf_proto_ops*)
    function void unregister_virtio_device(virtio_device*)
    function void unregister_virtio_driver(virtio_driver*)
    function void unregister_wide_hw_breakpoint(perf_event**)
    function int update_devfreq(devfreq*)
    function int uprobe_register(inode*, loff_t, uprobe_consumer*)
    function void uprobe_unregister(inode*, loff_t, uprobe_consumer*)
    function int usb_add_config(usb_composite_dev*, usb_configuration*, void ()*)
    function int usb_add_config_only(usb_composite_dev*, usb_configuration*)
    function int usb_add_function(usb_configuration*, usb_function*)
    function int usb_add_gadget_udc(device*, usb_gadget*)
    function int usb_add_gadget_udc_release(device*, usb_gadget*, void ()*)
    function int usb_add_hcd(usb_hcd*, unsigned int, unsigned long int)
    function int usb_add_phy(usb_phy*, usb_phy_type)
    function int usb_add_phy_dev(usb_phy*)
    function void* usb_alloc_coherent(usb_device*, size_t, gfp_t, dma_addr_t*)
    function usb_device* usb_alloc_dev(usb_device*, usb_bus*, unsigned int)
    function int usb_alloc_streams(usb_interface*, usb_host_endpoint**, unsigned int, unsigned int, gfp_t)
    function urb* usb_alloc_urb(int, gfp_t)
    function usb_host_interface* usb_altnum_to_altsetting(const usb_interface*, unsigned int)
    function bool usb_amd_pt_check_port(device*, int)
    function void usb_anchor_urb(urb*, usb_anchor*)
    function void usb_asmedia_modifyflowcontrol(pci_dev*)
    function int usb_assign_descriptors(usb_function*, usb_descriptor_header**, usb_descriptor_header**, usb_descriptor_header**, usb_descriptor_header**)
    function int usb_autopm_get_interface(usb_interface*)
    function int usb_autopm_get_interface_async(usb_interface*)
    function void usb_autopm_get_interface_no_resume(usb_interface*)
    function void usb_autopm_put_interface(usb_interface*)
    function void usb_autopm_put_interface_async(usb_interface*)
    function void usb_autopm_put_interface_no_suspend(usb_interface*)
    function void usb_block_urb(urb*)
    function int usb_bulk_msg(usb_device*, unsigned int, void*, int, int*, int)
    function int usb_bus_start_enum(usb_bus*, unsigned int)
    function int usb_choose_configuration(usb_device*)
    function int usb_clear_halt(usb_device*, int)
    function void usb_composite_overwrite_options(usb_composite_dev*, usb_composite_overwrite*)
    function int usb_composite_probe(usb_composite_driver*)
    function void usb_composite_setup_continue(usb_composite_dev*)
    function void usb_composite_unregister(usb_composite_driver*)
    function int usb_control_msg(usb_device*, unsigned int, __u8, __u8, __u16, __u16, void*, __u16, int)
    function usb_hcd* usb_create_hcd(const hc_driver*, device*, const char*)
    function usb_hcd* usb_create_shared_hcd(const hc_driver*, device*, const char*, usb_hcd*)
    function void usb_del_gadget_udc(usb_gadget*)
    function void usb_deregister(usb_driver*)
    function void usb_deregister_dev(usb_interface*, usb_class_driver*)
    function void usb_deregister_device_driver(usb_device_driver*)
    function void usb_disable_autosuspend(usb_device*)
    function int usb_disable_lpm(usb_device*)
    function int usb_disable_ltm(usb_device*)
    function void usb_disable_xhci_ports(pci_dev*)
    function int usb_driver_claim_interface(usb_driver*, usb_interface*, void*)
    function void usb_driver_release_interface(usb_driver*, usb_interface*)
    function int usb_driver_set_configuration(usb_device*, int)
    function void usb_enable_autosuspend(usb_device*)
    function void usb_enable_intel_xhci_ports(pci_dev*)
    function void usb_enable_lpm(usb_device*)
    function void usb_enable_ltm(usb_device*)
    function void usb_ep0_reinit(usb_device*)
    function usb_ep* usb_ep_autoconfig(usb_gadget*, usb_endpoint_descriptor*)
    function void usb_ep_autoconfig_reset(usb_gadget*)
    function usb_ep* usb_ep_autoconfig_ss(usb_gadget*, usb_endpoint_descriptor*, usb_ss_ep_comp_descriptor*)
    function usb_host_interface* usb_find_alt_setting(usb_host_config*, unsigned int, unsigned int)
    function usb_interface* usb_find_interface(usb_driver*, int)
    function int usb_for_each_dev(void*, void ()*)
    function void usb_free_all_descriptors(usb_function*)
    function void usb_free_coherent(usb_device*, size_t, void*, dma_addr_t)
    function int usb_free_streams(usb_interface*, usb_host_endpoint**, unsigned int, gfp_t)
    function void usb_free_urb(urb*)
    function int usb_function_activate(usb_function*)
    function int usb_function_deactivate(usb_function*)
    function int usb_function_register(usb_function_driver*)
    function void usb_function_unregister(usb_function_driver*)
    function int usb_gadget_activate(usb_gadget*)
    function int usb_gadget_clear_selfpowered(usb_gadget*)
    function int usb_gadget_connect(usb_gadget*)
    function int usb_gadget_deactivate(usb_gadget*)
    function int usb_gadget_disconnect(usb_gadget*)
    function int usb_gadget_ep_match_desc(usb_gadget*, usb_ep*, usb_endpoint_descriptor*, usb_ss_ep_comp_descriptor*)
    function int usb_gadget_frame_number(usb_gadget*)
    function int usb_gadget_map_request(usb_gadget*, usb_request*, int)
    function int usb_gadget_map_request_by_dev(device*, usb_request*, int)
    function int usb_gadget_probe_driver(usb_gadget_driver*)
    function int usb_gadget_set_selfpowered(usb_gadget*)
    function void usb_gadget_set_state(usb_gadget*, usb_device_state)
    function void usb_gadget_udc_reset(usb_gadget*, usb_gadget_driver*)
    function void usb_gadget_unmap_request(usb_gadget*, usb_request*, int)
    function void usb_gadget_unmap_request_by_dev(device*, usb_request*, int)
    function int usb_gadget_unregister_driver(usb_gadget_driver*)
    function int usb_gadget_vbus_connect(usb_gadget*)
    function int usb_gadget_vbus_disconnect(usb_gadget*)
    function int usb_gadget_vbus_draw(usb_gadget*, unsigned int)
    function int usb_gadget_wakeup(usb_gadget*)
    function int usb_gen_phy_init(usb_phy*)
    function void usb_gen_phy_shutdown(usb_phy*)
    function int usb_get_current_frame_number(usb_device*)
    function int usb_get_descriptor(usb_device*, unsigned char, unsigned char, void*, int)
    function usb_device* usb_get_dev(usb_device*)
    function usb_dr_mode usb_get_dr_mode(device*)
    function urb* usb_get_from_anchor(usb_anchor*)
    function usb_function* usb_get_function(usb_function_instance*)
    function usb_function_instance* usb_get_function_instance(const char*)
    function usb_hcd* usb_get_hcd(usb_hcd*)
    function usb_interface* usb_get_intf(usb_interface*)
    function usb_device_speed usb_get_maximum_speed(device*)
    function usb_phy* usb_get_phy(usb_phy_type)
    function int usb_get_status(usb_device*, int, int, int, void*)
    function urb* usb_get_urb(urb*)
    function usb_string* usb_gstrings_attach(usb_composite_dev*, usb_gadget_strings**, unsigned int)
    function void usb_hc_died(usb_hcd*)
    function int usb_hcd_amd_remote_wakeup_quirk(pci_dev*)
    function int usb_hcd_check_unlink_urb(usb_hcd*, urb*, int)
    function void usb_hcd_end_port_resume(usb_bus*, int)
    function void usb_hcd_giveback_urb(usb_hcd*, urb*, int)
    function int usb_hcd_is_primary_hcd(usb_hcd*)
    function int usb_hcd_link_urb_to_ep(usb_hcd*, urb*)
    function int usb_hcd_map_urb_for_dma(usb_hcd*, urb*, gfp_t)
    function int usb_hcd_pci_probe(pci_dev*, const pci_device_id*)
    function void usb_hcd_pci_remove(pci_dev*)
    function void usb_hcd_pci_shutdown(pci_dev*)
    function void usb_hcd_platform_shutdown(platform_device*)
    function void usb_hcd_poll_rh_status(usb_hcd*)
    function void usb_hcd_resume_root_hub(usb_hcd*)
    function void usb_hcd_start_port_resume(usb_bus*, int)
    function void usb_hcd_unlink_urb_from_ep(usb_hcd*, urb*)
    function void usb_hcd_unmap_urb_for_dma(usb_hcd*, urb*)
    function void usb_hcd_unmap_urb_setup_for_dma(usb_hcd*, urb*)
    function int usb_hub_claim_port(usb_device*, unsigned int, usb_dev_state*)
    function int usb_hub_clear_tt_buffer(urb*)
    function usb_device* usb_hub_find_child(usb_device*, int)
    function int usb_hub_release_port(usb_device*, unsigned int, usb_dev_state*)
    function usb_interface* usb_ifnum_to_if(const usb_device*, unsigned int)
    function void usb_init_urb(urb*)
    function int usb_interface_id(usb_configuration*, usb_function*)
    function int usb_interrupt_msg(usb_device*, unsigned int, void*, int, int*, int)
    function void usb_kill_urb(urb*)
    function int usb_lock_device_for_reset(usb_device*, const usb_interface*)
    function const usb_device_id* usb_match_id(usb_interface*, const usb_device_id*)
    function int usb_match_one_id(usb_interface*, const usb_device_id*)
    function device* usb_of_get_companion_dev(device*)
    function device_node* usb_of_get_device_node(usb_device*, int)
    function device_node* usb_of_get_interface_node(usb_device*, u8, u8)
    function bool usb_of_has_combined_node(usb_device*)
    function config_group* usb_os_desc_prepare_interf_dir(config_group*, int, usb_os_desc**, char**, module*)
    function usb_descriptor_header* usb_otg_descriptor_alloc(usb_gadget*)
    function int usb_otg_descriptor_init(usb_gadget*, usb_descriptor_header*)
    function int usb_phy_gen_create_phy(device*, usb_phy_generic*, usb_phy_generic_platform_data*)
    function platform_device* usb_phy_generic_register()
    function void usb_phy_generic_unregister(platform_device*)
    function void usb_phy_get_charger_current(usb_phy*, unsigned int*, unsigned int*)
    function usb_phy_roothub* usb_phy_roothub_alloc(device*)
    function int usb_phy_roothub_resume(device*, usb_phy_roothub*)
    function int usb_phy_roothub_suspend(device*, usb_phy_roothub*)
    function void usb_phy_set_charger_current(usb_phy*, unsigned int)
    function void usb_phy_set_charger_state(usb_phy*, usb_charger_state)
    function void usb_phy_set_event(usb_phy*, unsigned long int)
    function void usb_poison_urb(urb*)
    function void usb_put_dev(usb_device*)
    function void usb_put_function(usb_function*)
    function void usb_put_function_instance(usb_function_instance*)
    function void usb_put_hcd(usb_hcd*)
    function void usb_put_intf(usb_interface*)
    function void usb_put_phy(usb_phy*)
    function void usb_queue_reset_device(usb_interface*)
    function int usb_register_dev(usb_interface*, usb_class_driver*)
    function int usb_register_device_driver(usb_device_driver*, module*)
    function int usb_register_driver(usb_driver*, module*, const char*)
    function void usb_remove_function(usb_configuration*, usb_function*)
    function void usb_remove_hcd(usb_hcd*)
    function void usb_remove_phy(usb_phy*)
    function int usb_reset_configuration(usb_device*)
    function int usb_reset_device(usb_device*)
    function void usb_reset_endpoint(usb_device*, unsigned int)
    function void usb_root_hub_lost_power(usb_device*)
    function int usb_set_configuration(usb_device*, int)
    function void usb_set_device_state(usb_device*, usb_device_state)
    function int usb_set_interface(usb_device*, int, int)
    function void usb_sg_cancel(usb_sg_request*)
    function int usb_sg_init(usb_sg_request*, usb_device*, unsigned int, unsigned int, scatterlist*, int, size_t, gfp_t)
    function void usb_sg_wait(usb_sg_request*)
    function ssize_t usb_store_new_id(usb_dynids*, const usb_device_id*, device_driver*, const char*, size_t)
    function int usb_string(usb_device*, int, char*, size_t)
    function int usb_string_id(usb_composite_dev*)
    function int usb_string_ids_n(usb_composite_dev*, unsigned int)
    function int usb_string_ids_tab(usb_composite_dev*, usb_string*)
    function int usb_submit_urb(urb*, gfp_t)
    function void usb_udc_vbus_handler(usb_gadget*, bool)
    function void usb_unanchor_urb(urb*)
    function int usb_unlink_urb(urb*)
    function int usb_unlocked_disable_lpm(usb_device*)
    function void usb_unlocked_enable_lpm(usb_device*)
    function void usb_unpoison_urb(urb*)
    function int usb_urb_ep_type_check(const urb*)
    function void usb_wakeup_notification(usb_device*, unsigned int)
    function int usbnet_change_mtu(net_device*, int)
    function void usbnet_defer_kevent(usbnet*, int)
    function void usbnet_device_suggests_idle(usbnet*)
    function void usbnet_disconnect(usb_interface*)
    function void usbnet_get_drvinfo(net_device*, ethtool_drvinfo*)
    function int usbnet_get_endpoints(usbnet*, usb_interface*)
    function int usbnet_get_ethernet_addr(usbnet*, int)
    function u32 usbnet_get_link(net_device*)
    function int usbnet_get_link_ksettings(net_device*, ethtool_link_ksettings*)
    function u32 usbnet_get_msglevel(net_device*)
    function void usbnet_get_stats64(net_device*, rtnl_link_stats64*)
    function void usbnet_link_change(usbnet*, bool, bool)
    function int usbnet_manage_power(usbnet*, int)
    function int usbnet_nway_reset(net_device*)
    function int usbnet_open(net_device*)
    function void usbnet_pause_rx(usbnet*)
    function int usbnet_probe(usb_interface*, const usb_device_id*)
    function void usbnet_purge_paused_rxq(usbnet*)
    function int usbnet_read_cmd(usbnet*, u8, u8, u16, u16, void*, u16)
    function int usbnet_read_cmd_nopm(usbnet*, u8, u8, u16, u16, void*, u16)
    function int usbnet_resume(usb_interface*)
    function void usbnet_resume_rx(usbnet*)
    function int usbnet_set_link_ksettings(net_device*, const ethtool_link_ksettings*)
    function void usbnet_set_msglevel(net_device*, u32)
    function void usbnet_skb_return(usbnet*, sk_buff*)
    function netdev_tx_t usbnet_start_xmit(sk_buff*, net_device*)
    function int usbnet_status_start(usbnet*, gfp_t)
    function void usbnet_status_stop(usbnet*)
    function int usbnet_stop(net_device*)
    function int usbnet_suspend(usb_interface*, pm_message_t)
    function void usbnet_tx_timeout(net_device*)
    function void usbnet_unlink_rx_urbs(usbnet*)
    function void usbnet_update_max_qlen(usbnet*)
    function int usbnet_write_cmd(usbnet*, u8, u8, u16, u16, void*, u16)
    function int usbnet_write_cmd_async(usbnet*, u8, u8, u16, u16, void*, u16)
    function int usbnet_write_cmd_nopm(usbnet*, u8, u8, u16, u16, void*, u16)
    function dentry* user_path_create(int, const char*, path*, unsigned int)
    function sk_buff* validate_xmit_skb_list(sk_buff*, net_device*, bool*)
    function int vfs_cancel_lock(file*, file_lock*)
    function int vfs_clone_file_prep_inodes(inode*, loff_t, inode*, loff_t, u64*, bool)
    function int vfs_clone_file_range(file*, loff_t, file*, loff_t, u64)
    function ssize_t vfs_copy_file_range(file*, loff_t, file*, loff_t, size_t, unsigned int)
    function int vfs_create(inode*, dentry*, umode_t, bool)
    function int vfs_create2(vfsmount*, inode*, dentry*, umode_t, bool)
    function int vfs_dedupe_file_range(file*, file_dedupe_range*)
    function int vfs_dedupe_file_range_compare(inode*, loff_t, inode*, loff_t, loff_t, bool*)
    function int vfs_dedupe_file_range_one(file*, loff_t, file*, loff_t, u64)
    function int vfs_fadvise(file*, loff_t, loff_t, int)
    function int vfs_fallocate(file*, int, loff_t, loff_t)
    function int vfs_fsync(file*, int)
    function int vfs_fsync_range(file*, loff_t, loff_t, int)
    function const char* vfs_get_link(dentry*, delayed_call*)
    function ssize_t vfs_getxattr(dentry*, const char*, void*, size_t)
    function int vfs_ioc_fssetxattr_check(inode*, const fsxattr*, fsxattr*)
    function int vfs_ioc_setflags_prepare(inode*, unsigned int, unsigned int)
    function long int vfs_ioctl(file*, unsigned int, unsigned long int)
    function ssize_t vfs_iter_read(file*, iov_iter*, loff_t*, rwf_t)
    function ssize_t vfs_iter_write(file*, iov_iter*, loff_t*, rwf_t)
    function vfsmount* vfs_kern_mount(file_system_type*, int, const char*, void*)
    function int vfs_link(dentry*, inode*, dentry*, inode**)
    function int vfs_link2(vfsmount*, dentry*, inode*, dentry*, inode**)
    function ssize_t vfs_listxattr(dentry*, char*, size_t)
    function loff_t vfs_llseek(file*, loff_t, int)
    function int vfs_lock_file(file*, unsigned int, file_lock*, file_lock*)
    function int vfs_mkdir(inode*, dentry*, umode_t)
    function int vfs_mkdir2(vfsmount*, inode*, dentry*, umode_t)
    function int vfs_mknod(inode*, dentry*, umode_t, dev_t)
    function int vfs_mknod2(vfsmount*, inode*, dentry*, umode_t, dev_t)
    function int vfs_mkobj(dentry*, umode_t, void ()*, void*)
    function int vfs_mkobj2(vfsmount*, dentry*, umode_t, void ()*, void*)
    function int vfs_path_lookup(dentry*, vfsmount*, const char*, unsigned int, path*)
    function ssize_t vfs_read(file*, char*, size_t, loff_t*)
    function int vfs_readlink(dentry*, char*, int)
    function int vfs_removexattr(dentry*, const char*)
    function int vfs_rename(inode*, dentry*, inode*, dentry*, inode**, unsigned int)
    function int vfs_rename2(vfsmount*, inode*, dentry*, inode*, dentry*, inode**, unsigned int)
    function int vfs_rmdir(inode*, dentry*)
    function int vfs_rmdir2(vfsmount*, inode*, dentry*)
    function int vfs_setlease(file*, long int, file_lock**, void**)
    function loff_t vfs_setpos(file*, loff_t, loff_t)
    function int vfs_setxattr(dentry*, const char*, void*, size_t, int)
    function vfsmount* vfs_submount(const dentry*, file_system_type*, const char*, void*)
    function int vfs_symlink(inode*, dentry*, const char*)
    function int vfs_symlink2(vfsmount*, inode*, dentry*, const char*)
    function int vfs_test_lock(file*, file_lock*)
    function dentry* vfs_tmpfile(dentry*, umode_t, int)
    function int vfs_unlink(inode*, dentry*, inode**)
    function int vfs_unlink2(vfsmount*, inode*, dentry*, inode**)
    function int vfs_whiteout(inode*, dentry*)
    function ssize_t vfs_write(file*, const char*, size_t, loff_t*)
    function void vif_device_init(vif_device*, net_device*, unsigned long int, unsigned char, unsigned short int, unsigned short int)
    function int virt_wifi_register_network_simulation(virt_wifi_network_simulation*)
    function void virtio_add_status(virtio_device*, unsigned int)
    function void virtio_break_device(virtio_device*)
    function void virtio_check_driver_offered_feature(const virtio_device*, unsigned int)
    function void virtio_config_changed(virtio_device*)
    function void virtio_config_disable(virtio_device*)
    function void virtio_config_enable(virtio_device*)
    function int virtio_device_freeze(virtio_device*)
    function int virtio_device_restore(virtio_device*)
    function int virtio_finalize_features(virtio_device*)
    function int virtio_transport_connect(vsock_sock*)
    function void virtio_transport_deliver_tap_pkt(virtio_vsock_pkt*)
    function void virtio_transport_destruct(vsock_sock*)
    function int virtio_transport_dgram_bind(vsock_sock*, sockaddr_vm*)
    function int virtio_transport_dgram_dequeue(vsock_sock*, msghdr*, size_t, int)
    function int virtio_transport_dgram_enqueue(vsock_sock*, sockaddr_vm*, msghdr*, size_t)
    function int virtio_transport_do_socket_init(vsock_sock*, vsock_sock*)
    function void virtio_transport_free_pkt(virtio_vsock_pkt*)
    function u64 virtio_transport_get_buffer_size(vsock_sock*)
    function u32 virtio_transport_get_credit(virtio_vsock_sock*, u32)
    function u64 virtio_transport_get_max_buffer_size(vsock_sock*)
    function u64 virtio_transport_get_min_buffer_size(vsock_sock*)
    function void virtio_transport_inc_tx_pkt(virtio_vsock_sock*, virtio_vsock_pkt*)
    function int virtio_transport_notify_poll_in(vsock_sock*, size_t, bool*)
    function int virtio_transport_notify_poll_out(vsock_sock*, size_t, bool*)
    function int virtio_transport_notify_recv_init(vsock_sock*, size_t, vsock_transport_recv_notify_data*)
    function int virtio_transport_notify_recv_post_dequeue(vsock_sock*, size_t, ssize_t, bool, vsock_transport_recv_notify_data*)
    function int virtio_transport_notify_recv_pre_block(vsock_sock*, size_t, vsock_transport_recv_notify_data*)
    function int virtio_transport_notify_recv_pre_dequeue(vsock_sock*, size_t, vsock_transport_recv_notify_data*)
    function int virtio_transport_notify_send_init(vsock_sock*, vsock_transport_send_notify_data*)
    function int virtio_transport_notify_send_post_enqueue(vsock_sock*, ssize_t, vsock_transport_send_notify_data*)
    function int virtio_transport_notify_send_pre_block(vsock_sock*, vsock_transport_send_notify_data*)
    function int virtio_transport_notify_send_pre_enqueue(vsock_sock*, vsock_transport_send_notify_data*)
    function void virtio_transport_put_credit(virtio_vsock_sock*, u32)
    function void virtio_transport_recv_pkt(virtio_vsock_pkt*)
    function void virtio_transport_release(vsock_sock*)
    function void virtio_transport_set_buffer_size(vsock_sock*, u64)
    function void virtio_transport_set_max_buffer_size(vsock_sock*, u64)
    function void virtio_transport_set_min_buffer_size(vsock_sock*, u64)
    function int virtio_transport_shutdown(vsock_sock*, int)
    function ssize_t virtio_transport_stream_dequeue(vsock_sock*, msghdr*, size_t, int)
    function ssize_t virtio_transport_stream_enqueue(vsock_sock*, msghdr*, size_t)
    function s64 virtio_transport_stream_has_data(vsock_sock*)
    function s64 virtio_transport_stream_has_space(vsock_sock*)
    function bool virtio_transport_stream_is_active(vsock_sock*)
    function u64 virtio_transport_stream_rcvhiwat(vsock_sock*)
    function int virtqueue_add_inbuf(virtqueue*, scatterlist*, unsigned int, void*, gfp_t)
    function int virtqueue_add_inbuf_ctx(virtqueue*, scatterlist*, unsigned int, void*, void*, gfp_t)
    function int virtqueue_add_outbuf(virtqueue*, scatterlist*, unsigned int, void*, gfp_t)
    function int virtqueue_add_sgs(virtqueue*, scatterlist**, unsigned int, unsigned int, void*, gfp_t)
    function void* virtqueue_detach_unused_buf(virtqueue*)
    function void virtqueue_disable_cb(virtqueue*)
    function bool virtqueue_enable_cb(virtqueue*)
    function bool virtqueue_enable_cb_delayed(virtqueue*)
    function unsigned int virtqueue_enable_cb_prepare(virtqueue*)
    function dma_addr_t virtqueue_get_avail_addr(virtqueue*)
    function void* virtqueue_get_buf(virtqueue*, unsigned int*)
    function void* virtqueue_get_buf_ctx(virtqueue*, unsigned int*, void**)
    function dma_addr_t virtqueue_get_desc_addr(virtqueue*)
    function dma_addr_t virtqueue_get_used_addr(virtqueue*)
    function const vring* virtqueue_get_vring(virtqueue*)
    function unsigned int virtqueue_get_vring_size(virtqueue*)
    function bool virtqueue_is_broken(virtqueue*)
    function bool virtqueue_kick(virtqueue*)
    function bool virtqueue_kick_prepare(virtqueue*)
    function bool virtqueue_notify(virtqueue*)
    function bool virtqueue_poll(virtqueue*, unsigned int)
    function unsigned long int vm_mmap(file*, unsigned long int, unsigned long int, unsigned long int, unsigned long int, unsigned long int)
    function vm_fault_t vmf_insert_pfn_pmd(vm_fault*, pfn_t, bool)
    function virtqueue* vring_create_virtqueue(unsigned int, unsigned int, unsigned int, virtio_device*, bool, bool, bool, void ()*, void ()*, const char*)
    function void vring_del_virtqueue(virtqueue*)
    function virtqueue* vring_new_virtqueue(unsigned int, unsigned int, unsigned int, virtio_device*, bool, bool, void*, void ()*, void ()*, const char*)
    function void vring_transport_features(virtio_device*)
    function void vsock_add_pending(sock*, sock*)
    function int vsock_add_tap(vsock_tap*)
    function const vsock_transport* vsock_core_get_transport()
    function void vsock_enqueue_accept(sock*, sock*)
    function sock* vsock_find_bound_socket(sockaddr_vm*)
    function sock* vsock_find_connected_socket(sockaddr_vm*, sockaddr_vm*)
    function void vsock_insert_connected(vsock_sock*)
    function void vsock_remove_bound(vsock_sock*)
    function void vsock_remove_connected(vsock_sock*)
    function void vsock_remove_pending(sock*, sock*)
    function void vsock_remove_sock(vsock_sock*)
    function int vsock_remove_tap(vsock_tap*)
    function s64 vsock_stream_has_data(vsock_sock*)
    function s64 vsock_stream_has_space(vsock_sock*)
    function void wakeup_source_add(wakeup_source*)
    function wakeup_source* wakeup_source_create(const char*)
    function void wakeup_source_destroy(wakeup_source*)
    function wakeup_source* wakeup_source_register(device*, const char*)
    function void wakeup_source_remove(wakeup_source*)
    function void wakeup_source_unregister(wakeup_source*)
    function int watchdog_init_timeout(watchdog_device*, unsigned int, device*)
    function int watchdog_register_device(watchdog_device*)
    function void watchdog_set_restart_priority(watchdog_device*, int)
    function void watchdog_unregister_device(watchdog_device*)
    function void wb_writeout_inc(bdi_writeback*)
    function void wbc_account_io(writeback_control*, page*, size_t)
    function ieee80211_vif* wdev_to_ieee80211_vif(wireless_dev*)
    function void wiphy_apply_custom_regulatory(wiphy*, const ieee80211_regdomain*)
    function void wiphy_free(wiphy*)
    function wiphy* wiphy_new_nm(const cfg80211_ops*, int, const char*)
    function void wiphy_read_of_freq_limits(wiphy*)
    function int wiphy_register(wiphy*)
    function void wiphy_rfkill_set_hw_state(wiphy*, bool)
    function void wiphy_rfkill_start_polling(wiphy*)
    function void wiphy_rfkill_stop_polling(wiphy*)
    function ieee80211_hw* wiphy_to_ieee80211_hw(wiphy*)
    function void wiphy_unregister(wiphy*)
    function void wireless_send_event(net_device*, unsigned int, iwreq_data*, const char*)
    function void wireless_spy_update(net_device*, unsigned char*, iw_quality*)
    function void would_dump(linux_binprm*, file*)
    function int write_cache_pages(address_space*, writeback_control*, writepage_t, void*)
    function void write_dirty_buffer(buffer_head*, int)
    function int write_inode_now(inode*, int)
    function void writeback_inodes_sb(super_block*, wb_reason)
    function void writeback_inodes_sb_nr(super_block*, unsigned long int, wb_reason)
    function int xdp_do_generic_redirect(net_device*, sk_buff*, xdp_buff*, bpf_prog*)
    function int xdp_do_redirect(net_device*, xdp_buff*, bpf_prog*)
    function void xdp_return_buff(xdp_buff*)
    function void xdp_return_frame(xdp_frame*)
    function void xdp_return_frame_rx_napi(xdp_frame*)
    function bool xdp_rxq_info_is_reg(xdp_rxq_info*)
    function int xdp_rxq_info_reg(xdp_rxq_info*, net_device*, u32)
    function int xdp_rxq_info_reg_mem_model(xdp_rxq_info*, xdp_mem_type, void*)
    function void xdp_rxq_info_unreg(xdp_rxq_info*)
    function void xdp_rxq_info_unused(xdp_rxq_info*)
    function int xfrm4_prepare_output(xfrm_state*, sk_buff*)
    function int xfrm6_find_1stfragopt(xfrm_state*, sk_buff*, u8**)
    function int xfrm6_prepare_output(xfrm_state*, sk_buff*)
    function int xfrm_alloc_spi(xfrm_state*, u32, u32)
    function void xfrm_audit_state_add(xfrm_state*, int, bool)
    function void xfrm_audit_state_delete(xfrm_state*, int, bool)
    function void xfrm_audit_state_icvfail(xfrm_state*, sk_buff*, u8)
    function void xfrm_audit_state_replay(xfrm_state*, sk_buff*, __be32)
    function void xfrm_audit_state_replay_overflow(xfrm_state*, sk_buff*)
    function int xfrm_dev_state_flush(net*, net_device*, bool)
    function void xfrm_dst_ifdown(dst_entry*, net_device*)
    function xfrm_state* xfrm_find_acq(net*, const xfrm_mark*, u8, u32, u32, u8, const xfrm_address_t*, const xfrm_address_t*, int, unsigned short int)
    function xfrm_state* xfrm_find_acq_byseq(net*, u32, u32)
    function void xfrm_if_register_cb(const xfrm_if_cb*)
    function int xfrm_init_replay(xfrm_state*)
    function int xfrm_init_state(xfrm_state*)
    function int xfrm_inner_extract_output(xfrm_state*, sk_buff*)
    function dst_entry* xfrm_lookup(net*, dst_entry*, const flowi*, const sock*, int)
    function dst_entry* xfrm_lookup_route(net*, dst_entry*, const flowi*, const sock*, int)
    function dst_entry* xfrm_lookup_with_ifid(net*, dst_entry*, const flowi*, const sock*, int, u32)
    function int xfrm_output(sock*, sk_buff*)
    function int xfrm_policy_register_afinfo(const xfrm_policy_afinfo*, int)
    function void xfrm_policy_unregister_afinfo(const xfrm_policy_afinfo*)
    function int xfrm_prepare_input(xfrm_state*, sk_buff*)
    function int xfrm_register_km(xfrm_mgr*)
    function int xfrm_register_mode(xfrm_mode*, int)
    function int xfrm_register_type(const xfrm_type*, unsigned short int)
    function int xfrm_register_type_offload(const xfrm_type_offload*, unsigned short int)
    function u32 xfrm_replay_seqhi(xfrm_state*, __be32)
    function int xfrm_state_add(xfrm_state*)
    function xfrm_state* xfrm_state_alloc(net*)
    function int xfrm_state_check_expire(xfrm_state*)
    function int xfrm_state_delete(xfrm_state*)
    function void xfrm_state_delete_tunnel(xfrm_state*)
    function void xfrm_state_free(xfrm_state*)
    function void xfrm_state_insert(xfrm_state*)
    function xfrm_state* xfrm_state_lookup(net*, u32, const xfrm_address_t*, __be32, u8, unsigned short int)
    function xfrm_state* xfrm_state_lookup_byaddr(net*, u32, const xfrm_address_t*, const xfrm_address_t*, u8, unsigned short int)
    function xfrm_state* xfrm_state_lookup_byspi(net*, __be32, unsigned short int)
    function int xfrm_state_register_afinfo(xfrm_state_afinfo*)
    function int xfrm_state_sort(xfrm_state**, xfrm_state**, int, unsigned short int)
    function int xfrm_state_unregister_afinfo(xfrm_state_afinfo*)
    function int xfrm_state_update(xfrm_state*)
    function int xfrm_state_walk(net*, xfrm_state_walk*, void ()*, void*)
    function xfrm_state* xfrm_stateonly_find(net*, u32, u32, xfrm_address_t*, xfrm_address_t*, unsigned short int, u8, u8, u32)
    function int xfrm_unregister_km(xfrm_mgr*)
    function int xfrm_unregister_mode(xfrm_mode*, int)
    function int xfrm_unregister_type(const xfrm_type*, unsigned short int)
    function int xfrm_unregister_type_offload(const xfrm_type_offload*, unsigned short int)
    function int xfrm_user_policy(sock*, int, u8*, int)
    function int xt_check_match(xt_mtchk_param*, unsigned int, u_int8_t, bool)
    function void xt_compat_match_from_user(xt_entry_match*, void**, unsigned int*)
    function int xt_compat_match_offset(const xt_match*)
    function int xt_compat_match_to_user(const xt_entry_match*, void**, unsigned int*)
    function void xt_compat_target_from_user(xt_entry_target*, void**, unsigned int*)
    function int xt_compat_target_offset(const xt_target*)
    function int xt_compat_target_to_user(const xt_entry_target*, void**, unsigned int*)
    function xt_match* xt_find_match(u8, const char*, u8)
    function xt_target* xt_find_target(u8, const char*, u8)
    function nf_hook_ops* xt_hook_ops_alloc(const xt_table*, nf_hookfn*)
    function int xt_match_to_user(const xt_entry_match*, xt_entry_match*)
    function int xt_register_match(xt_match*)
    function int xt_register_matches(xt_match*, unsigned int)
    function int xt_register_target(xt_target*)
    function int xt_register_targets(xt_target*, unsigned int)
    function xt_match* xt_request_find_match(uint8_t, const char*, uint8_t)
    function xt_target* xt_request_find_target(u8, const char*, u8)
    function int xt_target_to_user(const xt_entry_target*, xt_entry_target*)
    function void xt_unregister_match(xt_match*)
    function void xt_unregister_matches(xt_match*, unsigned int)
    function void xt_unregister_target(xt_target*)
    function void xt_unregister_targets(xt_target*, unsigned int)
    function void zero_fill_bio_iter(bio*, bvec_iter)
    function unsigned long int zs_compact(zs_pool*)
    function zs_pool* zs_create_pool(const char*)
    function void zs_destroy_pool(zs_pool*)
    function void zs_free(zs_pool*, unsigned long int)
    function unsigned long int zs_get_total_pages(zs_pool*)
    function size_t zs_huge_class_size(zs_pool*)
    function unsigned long int zs_malloc(zs_pool*, size_t, gfp_t)
    function void* zs_map_object(zs_pool*, unsigned long int, zs_mapmode)
    function void zs_pool_stats(zs_pool*, zs_pool_stats*)
    function void zs_unmap_object(zs_pool*, unsigned long int)
    super_block* blockdev_superblock
    kobject* cpufreq_global_kobject
    irq_chip dummy_irq_chip
    kobject* firmware_kobj
    kobject* fs_kobj
    pid_namespace init_pid_ns
    kobject* kernel_kobj
    kobject* mm_kobj
    void ()* nat_callforwarding_hook
    void ()* nat_h245_hook
    void ()* nat_q931_hook
    void ()* nat_rtp_rtcp_hook
    void ()* nat_t120_hook
    void ()* nf_nat_amanda_hook
    void ()* nf_nat_ftp_hook
    void ()* nf_nat_irc_hook
    void ()* nf_nat_pptp_hook_exp_gre
    void ()* nf_nat_tftp_hook
    netlink_table* nl_table
    proto ping_prot
    pingv6_ops pingv6_ops
    proto pingv6_prot
    snd_card* snd_cards[32]
    snd_info_entry* snd_seq_root
    softnet_data softnet_data
    proto tcp_prot
    proto udp_prot
    proto udplite_prot
    hid_ll_driver uhid_hid_driver
    hid_ll_driver usb_hid_driver
